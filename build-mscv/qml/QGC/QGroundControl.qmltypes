import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "ADSBVehicleManagerSettings.h"
        name: "ADSBVehicleManagerSettings"
        accessSemantics: "reference"
        prototype: "SettingsGroup"
        exports: ["QGC/ADSBVehicleManagerSettings 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "adsbServerConnectEnabled"
            type: "Fact"
            isPointer: true
            read: "adsbServerConnectEnabled"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "adsbServerHostAddress"
            type: "Fact"
            isPointer: true
            read: "adsbServerHostAddress"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "adsbServerPort"
            type: "Fact"
            isPointer: true
            read: "adsbServerPort"
            index: 2
            isReadonly: true
            isConstant: true
        }
    }
    Component {
        file: "APMAirframeComponentController.h"
        name: "APMAirframeComponentController"
        accessSemantics: "reference"
        prototype: "FactPanelController"
        exports: ["QGC/APMAirframeComponentController 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "frameClassModel"
            type: "QmlObjectListModel"
            isPointer: true
            index: 0
            isConstant: true
        }
        Method {
            name: "_githubJsonDownloadComplete"
            Parameter { name: "remoteFile"; type: "QString" }
            Parameter { name: "localFile"; type: "QString" }
            Parameter { name: "errorMsg"; type: "QString" }
        }
        Method {
            name: "_paramFileDownloadComplete"
            Parameter { name: "remoteFile"; type: "QString" }
            Parameter { name: "localFile"; type: "QString" }
            Parameter { name: "errorMsg"; type: "QString" }
        }
        Method {
            name: "loadParameters"
            Parameter { name: "paramFile"; type: "QString" }
        }
    }
    Component {
        file: "APMFlightModesComponentController.h"
        name: "APMFlightModesComponentController"
        accessSemantics: "reference"
        prototype: "FactPanelController"
        exports: ["QGC/APMFlightModesComponentController 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "SimpleModeValues"
            values: [
                "SimpleModeStandard",
                "SimpleModeSimple",
                "SimpleModeSuperSimple",
                "SimpleModeCustom"
            ]
        }
        Property { name: "modeParamPrefix"; type: "QString"; index: 0; isConstant: true }
        Property { name: "modeChannelParam"; type: "QString"; index: 1; isConstant: true }
        Property {
            name: "activeFlightMode"
            type: "int"
            read: "activeFlightMode"
            notify: "activeFlightModeChanged"
            index: 2
            isReadonly: true
        }
        Property { name: "channelCount"; type: "int"; index: 3; isConstant: true }
        Property {
            name: "channelOptionEnabled"
            type: "QVariantList"
            read: "channelOptionEnabled"
            notify: "channelOptionEnabledChanged"
            index: 4
            isReadonly: true
        }
        Property { name: "simpleModesSupported"; type: "bool"; index: 5; isConstant: true }
        Property { name: "simpleModeNames"; type: "QStringList"; index: 6; isConstant: true }
        Property { name: "simpleMode"; type: "int"; notify: "simpleModeChanged"; index: 7 }
        Property {
            name: "simpleModeEnabled"
            type: "QVariantList"
            notify: "simpleModeEnabledChanged"
            index: 8
        }
        Property {
            name: "superSimpleModeEnabled"
            type: "QVariantList"
            notify: "superSimpleModeEnabledChanged"
            index: 9
        }
        Signal {
            name: "activeFlightModeChanged"
            Parameter { name: "activeFlightMode"; type: "int" }
        }
        Signal { name: "channelOptionEnabledChanged" }
        Signal {
            name: "simpleModeChanged"
            Parameter { name: "simpleMode"; type: "int" }
        }
        Signal { name: "simpleModeEnabledChanged" }
        Signal { name: "superSimpleModeEnabledChanged" }
        Method {
            name: "_rcChannelsChanged"
            Parameter { name: "channelCount"; type: "int" }
            Parameter { name: "pwmValues"; type: "int[QGCMAVLink::maxRcChannels]" }
        }
        Method { name: "_updateSimpleParamsFromSimpleMode" }
        Method { name: "_setupSimpleModeEnabled" }
        Method {
            name: "setSimpleMode"
            Parameter { name: "fltModeIndex"; type: "int" }
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setSuperSimpleMode"
            Parameter { name: "fltModeIndex"; type: "int" }
            Parameter { name: "enabled"; type: "bool" }
        }
    }
    Component {
        file: "APMFollowComponentController.h"
        name: "APMFollowComponentController"
        accessSemantics: "reference"
        prototype: "FactPanelController"
        exports: ["QGC/APMFollowComponentController 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "angle"
            type: "Fact"
            isPointer: true
            read: "angleFact"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "distance"
            type: "Fact"
            isPointer: true
            read: "distanceFact"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "height"
            type: "Fact"
            isPointer: true
            read: "heightFact"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "roverFirmware"
            type: "bool"
            read: "roverFirmware"
            index: 3
            isReadonly: true
            isConstant: true
        }
    }
    Component {
        file: "APMMavlinkStreamRateSettings.h"
        name: "APMMavlinkStreamRateSettings"
        accessSemantics: "reference"
        prototype: "SettingsGroup"
        exports: ["QGC/APMMavlinkStreamRateSettings 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "streamRateRawSensors"
            type: "Fact"
            isPointer: true
            read: "streamRateRawSensors"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "streamRateExtendedStatus"
            type: "Fact"
            isPointer: true
            read: "streamRateExtendedStatus"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "streamRateRCChannels"
            type: "Fact"
            isPointer: true
            read: "streamRateRCChannels"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "streamRatePosition"
            type: "Fact"
            isPointer: true
            read: "streamRatePosition"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "streamRateExtra1"
            type: "Fact"
            isPointer: true
            read: "streamRateExtra1"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "streamRateExtra2"
            type: "Fact"
            isPointer: true
            read: "streamRateExtra2"
            index: 5
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "streamRateExtra3"
            type: "Fact"
            isPointer: true
            read: "streamRateExtra3"
            index: 6
            isReadonly: true
            isConstant: true
        }
        Method {
            name: "_updateStreamRateRawSensors"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "_updateStreamRateExtendedStatus"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "_updateStreamRateRCChannels"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "_updateStreamRatePosition"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "_updateStreamRateExtra1"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "_updateStreamRateExtra2"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "_updateStreamRateExtra3"
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component {
        file: "APMSensorsComponentController.h"
        name: "APMSensorsComponentController"
        accessSemantics: "reference"
        prototype: "FactPanelController"
        exports: ["QGC/APMSensorsComponentController 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "statusLog"; type: "QQuickItem"; isPointer: true; index: 0 }
        Property { name: "progressBar"; type: "QQuickItem"; isPointer: true; index: 1 }
        Property { name: "nextButton"; type: "QQuickItem"; isPointer: true; index: 2 }
        Property { name: "cancelButton"; type: "QQuickItem"; isPointer: true; index: 3 }
        Property { name: "orientationCalAreaHelpText"; type: "QQuickItem"; isPointer: true; index: 4 }
        Property {
            name: "compassSetupNeeded"
            type: "bool"
            read: "compassSetupNeeded"
            notify: "setupNeededChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "accelSetupNeeded"
            type: "bool"
            read: "accelSetupNeeded"
            notify: "setupNeededChanged"
            index: 6
            isReadonly: true
        }
        Property {
            name: "showOrientationCalArea"
            type: "bool"
            notify: "showOrientationCalAreaChanged"
            index: 7
        }
        Property {
            name: "orientationCalDownSideDone"
            type: "bool"
            notify: "orientationCalSidesDoneChanged"
            index: 8
        }
        Property {
            name: "orientationCalUpsideDownSideDone"
            type: "bool"
            notify: "orientationCalSidesDoneChanged"
            index: 9
        }
        Property {
            name: "orientationCalLeftSideDone"
            type: "bool"
            notify: "orientationCalSidesDoneChanged"
            index: 10
        }
        Property {
            name: "orientationCalRightSideDone"
            type: "bool"
            notify: "orientationCalSidesDoneChanged"
            index: 11
        }
        Property {
            name: "orientationCalNoseDownSideDone"
            type: "bool"
            notify: "orientationCalSidesDoneChanged"
            index: 12
        }
        Property {
            name: "orientationCalTailDownSideDone"
            type: "bool"
            notify: "orientationCalSidesDoneChanged"
            index: 13
        }
        Property {
            name: "orientationCalDownSideVisible"
            type: "bool"
            notify: "orientationCalSidesVisibleChanged"
            index: 14
        }
        Property {
            name: "orientationCalUpsideDownSideVisible"
            type: "bool"
            notify: "orientationCalSidesVisibleChanged"
            index: 15
        }
        Property {
            name: "orientationCalLeftSideVisible"
            type: "bool"
            notify: "orientationCalSidesVisibleChanged"
            index: 16
        }
        Property {
            name: "orientationCalRightSideVisible"
            type: "bool"
            notify: "orientationCalSidesVisibleChanged"
            index: 17
        }
        Property {
            name: "orientationCalNoseDownSideVisible"
            type: "bool"
            notify: "orientationCalSidesVisibleChanged"
            index: 18
        }
        Property {
            name: "orientationCalTailDownSideVisible"
            type: "bool"
            notify: "orientationCalSidesVisibleChanged"
            index: 19
        }
        Property {
            name: "orientationCalDownSideInProgress"
            type: "bool"
            notify: "orientationCalSidesInProgressChanged"
            index: 20
        }
        Property {
            name: "orientationCalUpsideDownSideInProgress"
            type: "bool"
            notify: "orientationCalSidesInProgressChanged"
            index: 21
        }
        Property {
            name: "orientationCalLeftSideInProgress"
            type: "bool"
            notify: "orientationCalSidesInProgressChanged"
            index: 22
        }
        Property {
            name: "orientationCalRightSideInProgress"
            type: "bool"
            notify: "orientationCalSidesInProgressChanged"
            index: 23
        }
        Property {
            name: "orientationCalNoseDownSideInProgress"
            type: "bool"
            notify: "orientationCalSidesInProgressChanged"
            index: 24
        }
        Property {
            name: "orientationCalTailDownSideInProgress"
            type: "bool"
            notify: "orientationCalSidesInProgressChanged"
            index: 25
        }
        Property {
            name: "orientationCalDownSideRotate"
            type: "bool"
            notify: "orientationCalSidesRotateChanged"
            index: 26
        }
        Property {
            name: "orientationCalUpsideDownSideRotate"
            type: "bool"
            notify: "orientationCalSidesRotateChanged"
            index: 27
        }
        Property {
            name: "orientationCalLeftSideRotate"
            type: "bool"
            notify: "orientationCalSidesRotateChanged"
            index: 28
        }
        Property {
            name: "orientationCalRightSideRotate"
            type: "bool"
            notify: "orientationCalSidesRotateChanged"
            index: 29
        }
        Property {
            name: "orientationCalNoseDownSideRotate"
            type: "bool"
            notify: "orientationCalSidesRotateChanged"
            index: 30
        }
        Property {
            name: "orientationCalTailDownSideRotate"
            type: "bool"
            notify: "orientationCalSidesRotateChanged"
            index: 31
        }
        Property { name: "waitingForCancel"; type: "bool"; notify: "waitingForCancelChanged"; index: 32 }
        Property {
            name: "compass1CalSucceeded"
            type: "bool"
            read: "compass1CalSucceeded"
            notify: "compass1CalSucceededChanged"
            index: 33
            isReadonly: true
        }
        Property {
            name: "compass2CalSucceeded"
            type: "bool"
            read: "compass2CalSucceeded"
            notify: "compass2CalSucceededChanged"
            index: 34
            isReadonly: true
        }
        Property {
            name: "compass3CalSucceeded"
            type: "bool"
            read: "compass3CalSucceeded"
            notify: "compass3CalSucceededChanged"
            index: 35
            isReadonly: true
        }
        Property {
            name: "compass1CalFitness"
            type: "double"
            read: "compass1CalFitness"
            notify: "compass1CalFitnessChanged"
            index: 36
            isReadonly: true
        }
        Property {
            name: "compass2CalFitness"
            type: "double"
            read: "compass2CalFitness"
            notify: "compass2CalFitnessChanged"
            index: 37
            isReadonly: true
        }
        Property {
            name: "compass3CalFitness"
            type: "double"
            read: "compass3CalFitness"
            notify: "compass3CalFitnessChanged"
            index: 38
            isReadonly: true
        }
        Signal { name: "showGyroCalAreaChanged" }
        Signal { name: "showOrientationCalAreaChanged" }
        Signal { name: "orientationCalSidesDoneChanged" }
        Signal { name: "orientationCalSidesVisibleChanged" }
        Signal { name: "orientationCalSidesInProgressChanged" }
        Signal { name: "orientationCalSidesRotateChanged" }
        Signal { name: "resetStatusTextArea" }
        Signal { name: "waitingForCancelChanged" }
        Signal { name: "setupNeededChanged" }
        Signal {
            name: "calibrationComplete"
            Parameter { name: "calType"; type: "QGCMAVLink::CalibrationType" }
        }
        Signal {
            name: "compass1CalSucceededChanged"
            Parameter { name: "compass1CalSucceeded"; type: "bool" }
        }
        Signal {
            name: "compass2CalSucceededChanged"
            Parameter { name: "compass2CalSucceeded"; type: "bool" }
        }
        Signal {
            name: "compass3CalSucceededChanged"
            Parameter { name: "compass3CalSucceeded"; type: "bool" }
        }
        Signal {
            name: "compass1CalFitnessChanged"
            Parameter { name: "compass1CalFitness"; type: "double" }
        }
        Signal {
            name: "compass2CalFitnessChanged"
            Parameter { name: "compass2CalFitness"; type: "double" }
        }
        Signal {
            name: "compass3CalFitnessChanged"
            Parameter { name: "compass3CalFitness"; type: "double" }
        }
        Signal {
            name: "setAllCalButtonsEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "_handleTextMessage"
            Parameter { name: "sysid"; type: "int" }
            Parameter { name: "componentid"; type: "int" }
            Parameter { name: "severity"; type: "int" }
            Parameter { name: "text"; type: "QString" }
            Parameter { name: "description"; type: "QString" }
        }
        Method {
            name: "_mavlinkMessageReceived"
            Parameter { name: "link"; type: "LinkInterface"; isPointer: true }
            Parameter { name: "message"; type: "mavlink_message_t" }
        }
        Method {
            name: "_mavCommandResult"
            Parameter { name: "vehicleId"; type: "int" }
            Parameter { name: "component"; type: "int" }
            Parameter { name: "command"; type: "int" }
            Parameter { name: "result"; type: "int" }
            Parameter { name: "failureCode"; type: "int" }
        }
        Method { name: "calibrateCompass" }
        Method {
            name: "calibrateAccel"
            Parameter { name: "doSimpleAccelCal"; type: "bool" }
        }
        Method {
            name: "calibrateCompassNorth"
            Parameter { name: "lat"; type: "float" }
            Parameter { name: "lon"; type: "float" }
            Parameter { name: "mask"; type: "int" }
        }
        Method { name: "calibrateGyro" }
        Method { name: "calibrateMotorInterference" }
        Method { name: "levelHorizon" }
        Method { name: "calibratePressure" }
        Method { name: "cancelCalibration" }
        Method { name: "nextClicked" }
        Method { name: "usingUDPLink"; type: "bool" }
    }
    Component {
        file: "APMSubMotorComponentController.h"
        name: "APMSubMotorComponentController"
        accessSemantics: "reference"
        prototype: "FactPanelController"
        exports: ["QGC/APMSubMotorComponentController 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "motorDetectionMessages"
            type: "QString"
            read: "motorDetectionMessages"
            notify: "motorDetectionMessagesChanged"
            index: 0
            isReadonly: true
        }
        Signal { name: "motorDetectionMessagesChanged" }
        Method {
            name: "_handleNewMessages"
            Parameter { name: "sysid"; type: "int" }
            Parameter { name: "componentid"; type: "int" }
            Parameter { name: "severity"; type: "int" }
            Parameter { name: "text"; type: "QString" }
            Parameter { name: "description"; type: "QString" }
        }
    }
    Component {
        file: "AirframeComponentController.h"
        name: "Airframe"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/Airframe 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property { name: "text"; type: "QString"; index: 0; isConstant: true }
        Property { name: "autostartId"; type: "int"; index: 1; isConstant: true }
    }
    Component {
        file: "AirframeComponentController.h"
        name: "AirframeComponentController"
        accessSemantics: "reference"
        prototype: "FactPanelController"
        exports: ["QGC/AirframeComponentController 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "showCustomConfigPanel"
            type: "bool"
            notify: "showCustomConfigPanelChanged"
            index: 0
        }
        Property { name: "airframeTypes"; type: "QVariantList"; index: 1; isConstant: true }
        Property { name: "currentAirframeType"; type: "QString"; index: 2; isConstant: true }
        Property { name: "currentVehicleName"; type: "QString"; index: 3; isConstant: true }
        Property { name: "currentVehicleIndex"; type: "int"; index: 4; isConstant: true }
        Property { name: "autostartId"; type: "int"; notify: "autostartIdChanged"; index: 5 }
        Signal {
            name: "autostartIdChanged"
            Parameter { name: "newAutostartId"; type: "int" }
        }
        Signal {
            name: "showCustomConfigPanelChanged"
            Parameter { name: "show"; type: "bool" }
        }
        Method {
            name: "_waitParamWriteSignal"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method { name: "_rebootAfterStackUnwind" }
        Method { name: "changeAutostart" }
    }
    Component {
        file: "AirframeComponentController.h"
        name: "AirframeType"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/AirframeType 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property { name: "name"; type: "QString"; index: 0; isConstant: true }
        Property { name: "imageResource"; type: "QString"; index: 1; isConstant: true }
        Property { name: "airframes"; type: "QVariantList"; index: 2; isConstant: true }
    }
    Component {
        file: "AppSettings.h"
        name: "AppSettings"
        accessSemantics: "reference"
        prototype: "SettingsGroup"
        exports: ["QGC/AppSettings 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "offlineEditingFirmwareClass"
            type: "Fact"
            isPointer: true
            read: "offlineEditingFirmwareClass"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "offlineEditingVehicleClass"
            type: "Fact"
            isPointer: true
            read: "offlineEditingVehicleClass"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "offlineEditingCruiseSpeed"
            type: "Fact"
            isPointer: true
            read: "offlineEditingCruiseSpeed"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "offlineEditingHoverSpeed"
            type: "Fact"
            isPointer: true
            read: "offlineEditingHoverSpeed"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "offlineEditingAscentSpeed"
            type: "Fact"
            isPointer: true
            read: "offlineEditingAscentSpeed"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "offlineEditingDescentSpeed"
            type: "Fact"
            isPointer: true
            read: "offlineEditingDescentSpeed"
            index: 5
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "batteryPercentRemainingAnnounce"
            type: "Fact"
            isPointer: true
            read: "batteryPercentRemainingAnnounce"
            index: 6
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "defaultMissionItemAltitude"
            type: "Fact"
            isPointer: true
            read: "defaultMissionItemAltitude"
            index: 7
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "audioMuted"
            type: "Fact"
            isPointer: true
            read: "audioMuted"
            index: 8
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "virtualJoystick"
            type: "Fact"
            isPointer: true
            read: "virtualJoystick"
            index: 9
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "virtualJoystickAutoCenterThrottle"
            type: "Fact"
            isPointer: true
            read: "virtualJoystickAutoCenterThrottle"
            index: 10
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "virtualJoystickLeftHandedMode"
            type: "Fact"
            isPointer: true
            read: "virtualJoystickLeftHandedMode"
            index: 11
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "appFontPointSize"
            type: "Fact"
            isPointer: true
            read: "appFontPointSize"
            index: 12
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "indoorPalette"
            type: "Fact"
            isPointer: true
            read: "indoorPalette"
            index: 13
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "savePath"
            type: "Fact"
            isPointer: true
            read: "savePath"
            index: 14
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "androidSaveToSDCard"
            type: "Fact"
            isPointer: true
            read: "androidSaveToSDCard"
            index: 15
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "useChecklist"
            type: "Fact"
            isPointer: true
            read: "useChecklist"
            index: 16
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "enforceChecklist"
            type: "Fact"
            isPointer: true
            read: "enforceChecklist"
            index: 17
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "enableMultiVehiclePanel"
            type: "Fact"
            isPointer: true
            read: "enableMultiVehiclePanel"
            index: 18
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "mapboxToken"
            type: "Fact"
            isPointer: true
            read: "mapboxToken"
            index: 19
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "mapboxAccount"
            type: "Fact"
            isPointer: true
            read: "mapboxAccount"
            index: 20
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "mapboxStyle"
            type: "Fact"
            isPointer: true
            read: "mapboxStyle"
            index: 21
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "esriToken"
            type: "Fact"
            isPointer: true
            read: "esriToken"
            index: 22
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "customURL"
            type: "Fact"
            isPointer: true
            read: "customURL"
            index: 23
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "vworldToken"
            type: "Fact"
            isPointer: true
            read: "vworldToken"
            index: 24
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "gstDebugLevel"
            type: "Fact"
            isPointer: true
            read: "gstDebugLevel"
            index: 25
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "followTarget"
            type: "Fact"
            isPointer: true
            read: "followTarget"
            index: 26
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "qLocaleLanguage"
            type: "Fact"
            isPointer: true
            read: "qLocaleLanguage"
            index: 27
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "disableAllPersistence"
            type: "Fact"
            isPointer: true
            read: "disableAllPersistence"
            index: 28
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "firstRunPromptIdsShown"
            type: "Fact"
            isPointer: true
            read: "firstRunPromptIdsShown"
            index: 29
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "loginAirLink"
            type: "Fact"
            isPointer: true
            read: "loginAirLink"
            index: 30
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "passAirLink"
            type: "Fact"
            isPointer: true
            read: "passAirLink"
            index: 31
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "missionSavePath"
            type: "QString"
            read: "missionSavePath"
            notify: "savePathsChanged"
            index: 32
            isReadonly: true
        }
        Property {
            name: "parameterSavePath"
            type: "QString"
            read: "parameterSavePath"
            notify: "savePathsChanged"
            index: 33
            isReadonly: true
        }
        Property {
            name: "telemetrySavePath"
            type: "QString"
            read: "telemetrySavePath"
            notify: "savePathsChanged"
            index: 34
            isReadonly: true
        }
        Property {
            name: "logSavePath"
            type: "QString"
            read: "logSavePath"
            notify: "savePathsChanged"
            index: 35
            isReadonly: true
        }
        Property {
            name: "videoSavePath"
            type: "QString"
            read: "videoSavePath"
            notify: "savePathsChanged"
            index: 36
            isReadonly: true
        }
        Property {
            name: "photoSavePath"
            type: "QString"
            read: "photoSavePath"
            notify: "savePathsChanged"
            index: 37
            isReadonly: true
        }
        Property {
            name: "crashSavePath"
            type: "QString"
            read: "crashSavePath"
            notify: "savePathsChanged"
            index: 38
            isReadonly: true
        }
        Property {
            name: "mavlinkActionsSavePath"
            type: "QString"
            read: "mavlinkActionsSavePath"
            notify: "savePathsChanged"
            index: 39
            isReadonly: true
        }
        Property { name: "planFileExtension"; type: "QString"; index: 40; isConstant: true }
        Property { name: "missionFileExtension"; type: "QString"; index: 41; isConstant: true }
        Property { name: "waypointsFileExtension"; type: "QString"; index: 42; isConstant: true }
        Property { name: "parameterFileExtension"; type: "QString"; index: 43; isConstant: true }
        Property { name: "telemetryFileExtension"; type: "QString"; index: 44; isConstant: true }
        Property { name: "kmlFileExtension"; type: "QString"; index: 45; isConstant: true }
        Property { name: "shpFileExtension"; type: "QString"; index: 46; isConstant: true }
        Property { name: "logFileExtension"; type: "QString"; index: 47; isConstant: true }
        Property { name: "tilesetFileExtension"; type: "QString"; index: 48; isConstant: true }
        Signal { name: "savePathsChanged" }
        Method { name: "_indoorPaletteChanged" }
        Method { name: "_checkSavePathDirectories" }
        Method { name: "_qLocaleLanguageChanged" }
        Method {
            name: "firstRunPromptIdsMarkIdAsShown"
            Parameter { name: "id"; type: "int" }
        }
    }
    Component {
        file: "AutoConnectSettings.h"
        name: "AutoConnectSettings"
        accessSemantics: "reference"
        prototype: "SettingsGroup"
        exports: ["QGC/AutoConnectSettings 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "autoConnectUDP"
            type: "Fact"
            isPointer: true
            read: "autoConnectUDP"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "autoConnectPixhawk"
            type: "Fact"
            isPointer: true
            read: "autoConnectPixhawk"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "autoConnectSiKRadio"
            type: "Fact"
            isPointer: true
            read: "autoConnectSiKRadio"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "autoConnectRTKGPS"
            type: "Fact"
            isPointer: true
            read: "autoConnectRTKGPS"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "autoConnectLibrePilot"
            type: "Fact"
            isPointer: true
            read: "autoConnectLibrePilot"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "autoConnectNmeaPort"
            type: "Fact"
            isPointer: true
            read: "autoConnectNmeaPort"
            index: 5
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "autoConnectNmeaBaud"
            type: "Fact"
            isPointer: true
            read: "autoConnectNmeaBaud"
            index: 6
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "autoConnectZeroConf"
            type: "Fact"
            isPointer: true
            read: "autoConnectZeroConf"
            index: 7
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "udpListenPort"
            type: "Fact"
            isPointer: true
            read: "udpListenPort"
            index: 8
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "udpTargetHostIP"
            type: "Fact"
            isPointer: true
            read: "udpTargetHostIP"
            index: 9
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "udpTargetHostPort"
            type: "Fact"
            isPointer: true
            read: "udpTargetHostPort"
            index: 10
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "nmeaUdpPort"
            type: "Fact"
            isPointer: true
            read: "nmeaUdpPort"
            index: 11
            isReadonly: true
            isConstant: true
        }
    }
    Component {
        file: "AutoPilotPlugin.h"
        name: "AutoPilotPlugin"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/AutoPilotPlugin 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Enum {
            name: "KnownVehicleComponent"
            values: [
                "KnownRadioVehicleComponent",
                "KnownFlightModesVehicleComponent",
                "KnownSensorsVehicleComponent",
                "KnownSafetyVehicleComponent",
                "KnownPowerVehicleComponent",
                "UnknownVehicleComponent"
            ]
        }
        Property {
            name: "vehicleComponents"
            type: "QVariantList"
            read: "vehicleComponents"
            notify: "vehicleComponentsChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "setupComplete"
            type: "bool"
            read: "setupComplete"
            notify: "setupCompleteChanged"
            index: 1
            isReadonly: true
        }
        Signal { name: "setupCompleteChanged" }
        Signal { name: "vehicleComponentsChanged" }
        Method { name: "_recalcSetupComplete" }
        Method {
            name: "prerequisiteSetup"
            type: "QString"
            Parameter { name: "component"; type: "VehicleComponent"; isPointer: true }
        }
        Method {
            name: "knownVehicleComponentAvailable"
            type: "bool"
            Parameter { name: "knownVehicleComponent"; type: "KnownVehicleComponent" }
        }
        Method {
            name: "findKnownVehicleComponent"
            type: "VehicleComponent"
            isPointer: true
            Parameter { name: "knownVehicleComponent"; type: "KnownVehicleComponent" }
        }
    }
    Component {
        file: "Autotune.h"
        name: "Autotune"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/Autotune 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "autotuneInProgress"
            type: "bool"
            read: "autotuneInProgress"
            notify: "autotuneChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "autotuneProgress"
            type: "float"
            read: "autotuneProgress"
            notify: "autotuneChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "autotuneStatus"
            type: "QString"
            read: "autotuneStatus"
            notify: "autotuneChanged"
            index: 2
            isReadonly: true
        }
        Signal { name: "autotuneChanged" }
        Method { name: "sendMavlinkRequest" }
        Method { name: "autotuneRequest" }
    }
    Component {
        file: "BatteryIndicatorSettings.h"
        name: "BatteryIndicatorSettings"
        accessSemantics: "reference"
        prototype: "SettingsGroup"
        exports: ["QGC/BatteryIndicatorSettings 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "valueDisplay"
            type: "Fact"
            isPointer: true
            read: "valueDisplay"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "threshold1"
            type: "Fact"
            isPointer: true
            read: "threshold1"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "threshold2"
            type: "Fact"
            isPointer: true
            read: "threshold2"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Method {
            name: "setThreshold1"
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "setThreshold2"
            Parameter { name: "value"; type: "int" }
        }
    }
    Component {
        file: "BrandImageSettings.h"
        name: "BrandImageSettings"
        accessSemantics: "reference"
        prototype: "SettingsGroup"
        exports: ["QGC/BrandImageSettings 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "userBrandImageIndoor"
            type: "Fact"
            isPointer: true
            read: "userBrandImageIndoor"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "userBrandImageOutdoor"
            type: "Fact"
            isPointer: true
            read: "userBrandImageOutdoor"
            index: 1
            isReadonly: true
            isConstant: true
        }
    }
    Component {
        file: "CameraCalc.h"
        name: "CameraCalc"
        accessSemantics: "reference"
        prototype: "CameraSpec"
        exports: ["QGC/CameraCalc 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "xlatCustomCameraName"
            type: "QString"
            read: "xlatCustomCameraName"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "xlatManualCameraName"
            type: "QString"
            read: "xlatManualCameraName"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "isManualCamera"
            type: "bool"
            read: "isManualCamera"
            notify: "isManualCameraChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "isCustomCamera"
            type: "bool"
            read: "isCustomCamera"
            notify: "isCustomCameraChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "cameraBrand"
            type: "QString"
            write: "setCameraBrand"
            notify: "cameraBrandChanged"
            index: 4
        }
        Property {
            name: "cameraModel"
            type: "QString"
            write: "setCameraModel"
            notify: "cameraModelChanged"
            index: 5
        }
        Property { name: "cameraBrandList"; type: "QStringList"; index: 6; isConstant: true }
        Property {
            name: "cameraModelList"
            type: "QStringList"
            notify: "cameraModelListChanged"
            index: 7
        }
        Property {
            name: "valueSetIsDistance"
            type: "Fact"
            isPointer: true
            read: "valueSetIsDistance"
            index: 8
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "distanceToSurface"
            type: "Fact"
            isPointer: true
            read: "distanceToSurface"
            index: 9
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "imageDensity"
            type: "Fact"
            isPointer: true
            read: "imageDensity"
            index: 10
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "frontalOverlap"
            type: "Fact"
            isPointer: true
            read: "frontalOverlap"
            index: 11
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "sideOverlap"
            type: "Fact"
            isPointer: true
            read: "sideOverlap"
            index: 12
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "adjustedFootprintSide"
            type: "Fact"
            isPointer: true
            read: "adjustedFootprintSide"
            index: 13
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "adjustedFootprintFrontal"
            type: "Fact"
            isPointer: true
            read: "adjustedFootprintFrontal"
            index: 14
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "distanceMode"
            type: "QGroundControlQmlGlobal::AltMode"
            read: "distanceMode"
            write: "setDistanceMode"
            notify: "distanceModeChanged"
            index: 15
        }
        Property {
            name: "imageFootprintSide"
            type: "double"
            read: "imageFootprintSide"
            notify: "imageFootprintSideChanged"
            index: 16
            isReadonly: true
        }
        Property {
            name: "imageFootprintFrontal"
            type: "double"
            read: "imageFootprintFrontal"
            notify: "imageFootprintFrontalChanged"
            index: 17
            isReadonly: true
        }
        Signal {
            name: "imageFootprintSideChanged"
            Parameter { name: "imageFootprintSide"; type: "double" }
        }
        Signal {
            name: "imageFootprintFrontalChanged"
            Parameter { name: "imageFootprintFrontal"; type: "double" }
        }
        Signal {
            name: "distanceModeChanged"
            Parameter { name: "altMode"; type: "int" }
        }
        Signal { name: "isManualCameraChanged" }
        Signal { name: "isCustomCameraChanged" }
        Signal { name: "cameraBrandChanged" }
        Signal { name: "cameraModelChanged" }
        Signal { name: "cameraModelListChanged" }
        Signal { name: "updateCameraStats" }
        Method { name: "_recalcTriggerDistance" }
        Method { name: "_setDirty" }
        Method { name: "_cameraNameChanged" }
    }
    Component {
        file: "CameraSpec.h"
        name: "CameraSpec"
        accessSemantics: "reference"
        prototype: "QObject"
        Property {
            name: "sensorWidth"
            type: "Fact"
            isPointer: true
            read: "sensorWidth"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "sensorHeight"
            type: "Fact"
            isPointer: true
            read: "sensorHeight"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "imageWidth"
            type: "Fact"
            isPointer: true
            read: "imageWidth"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "imageHeight"
            type: "Fact"
            isPointer: true
            read: "imageHeight"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "focalLength"
            type: "Fact"
            isPointer: true
            read: "focalLength"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "landscape"
            type: "Fact"
            isPointer: true
            read: "landscape"
            index: 5
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "fixedOrientation"
            type: "Fact"
            isPointer: true
            read: "fixedOrientation"
            index: 6
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "minTriggerInterval"
            type: "Fact"
            isPointer: true
            read: "minTriggerInterval"
            index: 7
            isReadonly: true
            isConstant: true
        }
        Signal {
            name: "dirtyChanged"
            Parameter { name: "dirty"; type: "bool" }
        }
    }
    Component {
        file: "CityMapGeometry.h"
        name: "CityMapGeometry"
        accessSemantics: "reference"
        prototype: "QQuick3DGeometry"
        exports: ["QGC/CityMapGeometry 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "modelName"
            type: "QString"
            read: "modelName"
            write: "setModelName"
            notify: "modelNameChanged"
            index: 0
        }
        Property {
            name: "osmParser"
            type: "OsmParser"
            isPointer: true
            read: "osmParser"
            write: "setOsmParser"
            notify: "osmParserChanged"
            index: 1
        }
        Signal { name: "modelNameChanged" }
        Signal { name: "osmFilePathChanged" }
        Signal { name: "osmParserChanged" }
        Method {
            name: "setOsmFilePath"
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component {
        file: "ESP8266ComponentController.h"
        name: "ESP8266ComponentController"
        accessSemantics: "reference"
        prototype: "FactPanelController"
        exports: ["QGC/ESP8266ComponentController 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "componentID"
            type: "int"
            read: "componentID"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "version"
            type: "QString"
            read: "version"
            notify: "versionChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "wifiIPAddress"
            type: "QString"
            read: "wifiIPAddress"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "wifiSSID"
            type: "QString"
            read: "wifiSSID"
            write: "setWifiSSID"
            notify: "wifiSSIDChanged"
            index: 3
        }
        Property {
            name: "wifiPassword"
            type: "QString"
            read: "wifiPassword"
            write: "setWifiPassword"
            notify: "wifiPasswordChanged"
            index: 4
        }
        Property {
            name: "wifiSSIDSta"
            type: "QString"
            read: "wifiSSIDSta"
            write: "setWifiSSIDSta"
            notify: "wifiSSIDStaChanged"
            index: 5
        }
        Property {
            name: "wifiPasswordSta"
            type: "QString"
            read: "wifiPasswordSta"
            write: "setWifiPasswordSta"
            notify: "wifiPasswordStaChanged"
            index: 6
        }
        Property {
            name: "wifiChannels"
            type: "QStringList"
            read: "wifiChannels"
            index: 7
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "baudRates"
            type: "QStringList"
            read: "baudRates"
            index: 8
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "baudIndex"
            type: "int"
            read: "baudIndex"
            write: "setBaudIndex"
            notify: "baudIndexChanged"
            index: 9
        }
        Property {
            name: "busy"
            type: "bool"
            read: "busy"
            notify: "busyChanged"
            index: 10
            isReadonly: true
        }
        Property {
            name: "vehicle"
            type: "Vehicle"
            isPointer: true
            read: "vehicle"
            index: 11
            isReadonly: true
            isConstant: true
        }
        Signal { name: "versionChanged" }
        Signal { name: "wifiSSIDChanged" }
        Signal { name: "wifiPasswordChanged" }
        Signal { name: "wifiSSIDStaChanged" }
        Signal { name: "wifiPasswordStaChanged" }
        Signal { name: "baudIndexChanged" }
        Signal { name: "busyChanged" }
        Method {
            name: "_mavCommandResult"
            Parameter { name: "vehicleId"; type: "int" }
            Parameter { name: "component"; type: "int" }
            Parameter { name: "command"; type: "int" }
            Parameter { name: "result"; type: "int" }
            Parameter { name: "failureCode"; type: "int" }
        }
        Method {
            name: "_ssidChanged"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "_passwordChanged"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "_baudChanged"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "_versionChanged"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method { name: "restoreDefaults" }
        Method { name: "reboot" }
    }
    Component {
        file: "EditPositionDialogController.h"
        name: "EditPositionDialogController"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/EditPositionDialogController 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "coordinate"
            type: "QGeoCoordinate"
            read: "coordinate"
            write: "setCoordinate"
            notify: "coordinateChanged"
            index: 0
        }
        Property {
            name: "latitude"
            type: "Fact"
            isPointer: true
            read: "latitude"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "longitude"
            type: "Fact"
            isPointer: true
            read: "longitude"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "zone"
            type: "Fact"
            isPointer: true
            read: "zone"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "hemisphere"
            type: "Fact"
            isPointer: true
            read: "hemisphere"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "easting"
            type: "Fact"
            isPointer: true
            read: "easting"
            index: 5
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "northing"
            type: "Fact"
            isPointer: true
            read: "northing"
            index: 6
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "mgrs"
            type: "Fact"
            isPointer: true
            read: "mgrs"
            index: 7
            isReadonly: true
            isConstant: true
        }
        Signal {
            name: "coordinateChanged"
            Parameter { name: "coordinate"; type: "QGeoCoordinate" }
        }
        Method { name: "initValues" }
        Method { name: "setFromGeo" }
        Method { name: "setFromUTM" }
        Method { name: "setFromMGRS" }
        Method { name: "setFromVehicle" }
    }
    Component {
        file: "Fact.h"
        name: "Fact"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/Fact 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "componentId"
            type: "int"
            read: "componentId"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "bitmaskStrings"
            type: "QStringList"
            read: "bitmaskStrings"
            notify: "bitmaskStringsChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "bitmaskValues"
            type: "QVariantList"
            read: "bitmaskValues"
            notify: "bitmaskValuesChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "selectedBitmaskStrings"
            type: "QStringList"
            read: "selectedBitmaskStrings"
            notify: "valueChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "decimalPlaces"
            type: "int"
            read: "decimalPlaces"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "defaultValue"
            type: "QVariant"
            read: "cookedDefaultValue"
            index: 5
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "defaultValueString"
            type: "QString"
            read: "cookedDefaultValueString"
            index: 6
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "defaultValueAvailable"
            type: "bool"
            read: "defaultValueAvailable"
            index: 7
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "enumIndex"
            type: "int"
            read: "enumIndex"
            write: "setEnumIndex"
            notify: "valueChanged"
            index: 8
        }
        Property {
            name: "enumStrings"
            type: "QStringList"
            read: "enumStrings"
            notify: "enumsChanged"
            index: 9
            isReadonly: true
        }
        Property {
            name: "enumStringValue"
            type: "QString"
            read: "enumStringValue"
            write: "setEnumStringValue"
            notify: "valueChanged"
            index: 10
        }
        Property {
            name: "enumValues"
            type: "QVariantList"
            read: "enumValues"
            notify: "enumsChanged"
            index: 11
            isReadonly: true
        }
        Property {
            name: "category"
            type: "QString"
            read: "category"
            index: 12
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "group"
            type: "QString"
            read: "group"
            index: 13
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "longDescription"
            type: "QString"
            read: "longDescription"
            index: 14
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "max"
            type: "QVariant"
            read: "cookedMax"
            index: 15
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "maxString"
            type: "QString"
            read: "cookedMaxString"
            index: 16
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "maxIsDefaultForType"
            type: "bool"
            read: "maxIsDefaultForType"
            index: 17
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "min"
            type: "QVariant"
            read: "cookedMin"
            index: 18
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "minString"
            type: "QString"
            read: "cookedMinString"
            index: 19
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "minIsDefaultForType"
            type: "bool"
            read: "minIsDefaultForType"
            index: 20
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "name"
            type: "QString"
            read: "name"
            index: 21
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "vehicleRebootRequired"
            type: "bool"
            read: "vehicleRebootRequired"
            index: 22
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "qgcRebootRequired"
            type: "bool"
            read: "qgcRebootRequired"
            index: 23
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "shortDescription"
            type: "QString"
            read: "shortDescription"
            index: 24
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "units"
            type: "QString"
            read: "cookedUnits"
            index: 25
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "value"
            type: "QVariant"
            read: "cookedValue"
            write: "setCookedValue"
            notify: "valueChanged"
            index: 26
        }
        Property {
            name: "rawValue"
            type: "QVariant"
            read: "rawValue"
            write: "setRawValue"
            notify: "rawValueChanged"
            index: 27
        }
        Property {
            name: "valueEqualsDefault"
            type: "bool"
            read: "valueEqualsDefault"
            notify: "valueChanged"
            index: 28
            isReadonly: true
        }
        Property {
            name: "valueString"
            type: "QString"
            read: "cookedValueString"
            notify: "valueChanged"
            index: 29
            isReadonly: true
        }
        Property {
            name: "enumOrValueString"
            type: "QString"
            read: "enumOrValueString"
            notify: "valueChanged"
            index: 30
            isReadonly: true
        }
        Property {
            name: "increment"
            type: "double"
            read: "cookedIncrement"
            index: 31
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "typeIsString"
            type: "bool"
            read: "typeIsString"
            index: 32
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "typeIsBool"
            type: "bool"
            read: "typeIsBool"
            index: 33
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "hasControl"
            type: "bool"
            read: "hasControl"
            index: 34
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "readOnly"
            type: "bool"
            read: "readOnly"
            index: 35
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "writeOnly"
            type: "bool"
            read: "writeOnly"
            index: 36
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "volatileValue"
            type: "bool"
            read: "volatileValue"
            index: 37
            isReadonly: true
            isConstant: true
        }
        Signal { name: "bitmaskStringsChanged" }
        Signal { name: "bitmaskValuesChanged" }
        Signal { name: "enumsChanged" }
        Signal {
            name: "sendValueChangedSignalsChanged"
            Parameter { name: "sendValueChangedSignals"; type: "bool" }
        }
        Signal {
            name: "valueChanged"
            Parameter { name: "value"; type: "QVariant" }
        }
        Signal {
            name: "rawValueChanged"
            Parameter { name: "value"; type: "QVariant" }
        }
        Signal {
            name: "vehicleUpdated"
            Parameter { name: "value"; type: "QVariant" }
        }
        Signal {
            name: "containerRawValueChanged"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method { name: "_checkForRebootMessaging" }
        Method {
            name: "validate"
            type: "QString"
            Parameter { name: "cookedValue"; type: "QString" }
            Parameter { name: "convertOnly"; type: "bool" }
        }
        Method {
            name: "clamp"
            type: "QVariant"
            Parameter { name: "cookedValue"; type: "QString" }
        }
        Method { name: "valueSliderModel"; type: "FactValueSliderListModel"; isPointer: true }
    }
    Component {
        file: "FactGroup.h"
        name: "FactGroup"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/FactGroup 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "factNames"
            type: "QStringList"
            read: "factNames"
            notify: "factNamesChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "factGroupNames"
            type: "QStringList"
            read: "factGroupNames"
            notify: "factGroupNamesChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "telemetryAvailable"
            type: "bool"
            read: "telemetryAvailable"
            notify: "telemetryAvailableChanged"
            index: 2
            isReadonly: true
        }
        Signal { name: "factNamesChanged" }
        Signal { name: "factGroupNamesChanged" }
        Signal {
            name: "telemetryAvailableChanged"
            Parameter { name: "telemetryAvailable"; type: "bool" }
        }
        Method { name: "_updateAllValues" }
        Method {
            name: "factExists"
            type: "bool"
            Parameter { name: "name"; type: "QString" }
        }
        Method {
            name: "getFact"
            type: "Fact"
            isPointer: true
            Parameter { name: "name"; type: "QString" }
        }
        Method {
            name: "getFactGroup"
            type: "FactGroup"
            isPointer: true
            Parameter { name: "name"; type: "QString" }
        }
        Method {
            name: "setLiveUpdates"
            Parameter { name: "liveUpdates"; type: "bool" }
        }
    }
    Component {
        file: "FactMetaData.h"
        name: "FactMetaData"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/FactMetaData 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "ValueType_t"
            values: [
                "valueTypeUint8",
                "valueTypeInt8",
                "valueTypeUint16",
                "valueTypeInt16",
                "valueTypeUint32",
                "valueTypeInt32",
                "valueTypeUint64",
                "valueTypeInt64",
                "valueTypeFloat",
                "valueTypeDouble",
                "valueTypeString",
                "valueTypeBool",
                "valueTypeElapsedTimeInSeconds",
                "valueTypeCustom"
            ]
        }
    }
    Component {
        file: "FactPanelController.h"
        name: "FactPanelController"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/FactPanelController 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "vehicle"; type: "Vehicle"; isPointer: true; index: 0; isConstant: true }
        Signal { name: "missingParametersAvailable" }
        Method { name: "_checkForMissingParameters" }
        Method {
            name: "getParameterFact"
            type: "Fact"
            isPointer: true
            Parameter { name: "componentId"; type: "int" }
            Parameter { name: "name"; type: "QString" }
            Parameter { name: "reportMissing"; type: "bool" }
        }
        Method {
            name: "getParameterFact"
            type: "Fact"
            isPointer: true
            isCloned: true
            Parameter { name: "componentId"; type: "int" }
            Parameter { name: "name"; type: "QString" }
        }
        Method {
            name: "parameterExists"
            type: "bool"
            Parameter { name: "componentId"; type: "int" }
            Parameter { name: "name"; type: "QString" }
        }
        Method {
            name: "getMissingParameters"
            Parameter { name: "rgNames"; type: "QStringList" }
        }
    }
    Component {
        file: "FactValueGrid.h"
        name: "FactValueGrid"
        accessSemantics: "reference"
        defaultProperty: "data"
        parentProperty: "parent"
        prototype: "QQuickItem"
        exports: ["QGC/FactValueGrid 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Enum {
            name: "FontSize"
            values: [
                "DefaultFontSize",
                "SmallFontSize",
                "MediumFontSize",
                "LargeFontSize"
            ]
        }
        Property {
            name: "columns"
            type: "QmlObjectListModel"
            isPointer: true
            notify: "columnsChanged"
            index: 0
        }
        Property { name: "rowCount"; type: "int"; notify: "rowCountChanged"; index: 1 }
        Property {
            name: "iconNames"
            type: "QStringList"
            read: "iconNames"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "fontSize"
            type: "FontSize"
            read: "fontSize"
            write: "setFontSize"
            notify: "fontSizeChanged"
            index: 3
        }
        Property { name: "fontSizeNames"; type: "QStringList"; index: 4; isConstant: true }
        Property {
            name: "settingsGroup"
            type: "QString"
            notify: "settingsGroupChanged"
            index: 5
            isRequired: true
        }
        Property {
            name: "specificVehicleForCard"
            type: "Vehicle"
            isPointer: true
            notify: "specificVehicleForCardChanged"
            index: 6
            isRequired: true
        }
        Signal {
            name: "fontSizeChanged"
            Parameter { name: "fontSize"; type: "FontSize" }
        }
        Signal {
            name: "columnsChanged"
            Parameter { name: "model"; type: "QmlObjectListModel"; isPointer: true }
        }
        Signal {
            name: "rowCountChanged"
            Parameter { name: "rowCount"; type: "int" }
        }
        Signal {
            name: "settingsGroupChanged"
            Parameter { name: "settingsGroup"; type: "QString" }
        }
        Signal {
            name: "specificVehicleForCardChanged"
            Parameter { name: "vehicle"; type: "Vehicle"; isPointer: true }
        }
        Method {
            name: "_activeVehicleChanged"
            Parameter { name: "activeVehicle"; type: "Vehicle"; isPointer: true }
        }
        Method { name: "_resetFromSettings" }
        Method { name: "resetToDefaults" }
        Method { name: "appendColumn"; type: "QmlObjectListModel"; isPointer: true }
        Method { name: "deleteLastColumn" }
        Method { name: "appendRow" }
        Method { name: "deleteLastRow" }
    }
    Component {
        file: "FactValueSliderListModel.h"
        name: "FactValueSliderListModel"
        accessSemantics: "reference"
        prototype: "QAbstractListModel"
        exports: ["QGC/FactValueSliderListModel 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "initialValueAtPrecision"
            type: "double"
            read: "initialValueAtPrecision"
            notify: "initialValueAtPrecisionChanged"
            index: 0
            isReadonly: true
        }
        Signal { name: "initialValueAtPrecisionChanged" }
        Method { name: "resetInitialValue"; type: "int" }
        Method {
            name: "valueAtModelIndex"
            type: "double"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "valueIndexAtModelIndex"
            type: "int"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        file: "FirmwareUpgradeController.h"
        name: "FirmwareUpgradeController"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/FirmwareUpgradeController 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "AutoPilotStackType_t"
            values: [
                "AutoPilotStackPX4",
                "AutoPilotStackAPM",
                "SiKRadio",
                "SingleFirmwareMode"
            ]
        }
        Enum {
            name: "FirmwareBuildType_t"
            values: [
                "StableFirmware",
                "BetaFirmware",
                "DeveloperFirmware",
                "CustomFirmware"
            ]
        }
        Enum {
            name: "FirmwareVehicleType_t"
            values: [
                "CopterFirmware",
                "HeliFirmware",
                "PlaneFirmware",
                "RoverFirmware",
                "SubFirmware",
                "DefaultVehicleFirmware"
            ]
        }
        Property {
            name: "downloadingFirmwareList"
            type: "bool"
            notify: "downloadingFirmwareListChanged"
            index: 0
        }
        Property {
            name: "boardPort"
            type: "QString"
            read: "boardPort"
            notify: "boardFound"
            index: 1
            isReadonly: true
        }
        Property {
            name: "boardDescription"
            type: "QString"
            read: "boardDescription"
            notify: "boardFound"
            index: 2
            isReadonly: true
        }
        Property { name: "boardType"; type: "QString"; notify: "boardFound"; index: 3 }
        Property {
            name: "pixhawkBoard"
            type: "bool"
            read: "pixhawkBoard"
            notify: "boardFound"
            index: 4
            isReadonly: true
        }
        Property {
            name: "selectedFirmwareBuildType"
            type: "FirmwareBuildType_t"
            read: "selectedFirmwareBuildType"
            write: "setSelectedFirmwareBuildType"
            notify: "selectedFirmwareBuildTypeChanged"
            index: 5
        }
        Property {
            name: "apmFirmwareNames"
            type: "QStringList"
            notify: "apmFirmwareNamesChanged"
            index: 6
        }
        Property {
            name: "apmFirmwareNamesBestIndex"
            type: "int"
            notify: "apmFirmwareNamesChanged"
            index: 7
        }
        Property {
            name: "apmFirmwareUrls"
            type: "QStringList"
            notify: "apmFirmwareNamesChanged"
            index: 8
        }
        Property {
            name: "px4StableVersion"
            type: "QString"
            read: "px4StableVersion"
            notify: "px4StableVersionChanged"
            index: 9
            isReadonly: true
        }
        Property {
            name: "px4BetaVersion"
            type: "QString"
            read: "px4BetaVersion"
            notify: "px4BetaVersionChanged"
            index: 10
            isReadonly: true
        }
        Property {
            name: "statusLog"
            type: "QQuickItem"
            isPointer: true
            read: "statusLog"
            write: "setStatusLog"
            index: 11
        }
        Property {
            name: "progressBar"
            type: "QQuickItem"
            isPointer: true
            read: "progressBar"
            write: "setProgressBar"
            index: 12
        }
        Signal { name: "boardFound" }
        Signal { name: "showFirmwareSelectDlg" }
        Signal { name: "noBoardFound" }
        Signal { name: "boardGone" }
        Signal { name: "flashComplete" }
        Signal { name: "flashCancelled" }
        Signal { name: "error" }
        Signal {
            name: "selectedFirmwareBuildTypeChanged"
            Parameter { name: "firmwareType"; type: "FirmwareBuildType_t" }
        }
        Signal { name: "apmFirmwareNamesChanged" }
        Signal {
            name: "px4StableVersionChanged"
            Parameter { name: "px4StableVersion"; type: "QString" }
        }
        Signal {
            name: "px4BetaVersionChanged"
            Parameter { name: "px4BetaVersion"; type: "QString" }
        }
        Signal {
            name: "downloadingFirmwareListChanged"
            Parameter { name: "downloadingFirmwareList"; type: "bool" }
        }
        Method {
            name: "_firmwareDownloadProgress"
            Parameter { name: "curr"; type: "qlonglong" }
            Parameter { name: "total"; type: "qlonglong" }
        }
        Method {
            name: "_firmwareDownloadComplete"
            Parameter { name: "remoteFile"; type: "QString" }
            Parameter { name: "localFile"; type: "QString" }
            Parameter { name: "errorMsg"; type: "QString" }
        }
        Method {
            name: "_foundBoard"
            Parameter { name: "firstAttempt"; type: "bool" }
            Parameter { name: "portInfo"; type: "QSerialPortInfo" }
            Parameter { name: "boardType"; type: "int" }
            Parameter { name: "boardName"; type: "QString" }
        }
        Method { name: "_noBoardFound" }
        Method { name: "_boardGone" }
        Method {
            name: "_foundBoardInfo"
            Parameter { name: "bootloaderVersion"; type: "int" }
            Parameter { name: "boardID"; type: "int" }
            Parameter { name: "flashSize"; type: "int" }
        }
        Method {
            name: "_error"
            Parameter { name: "errorString"; type: "QString" }
        }
        Method {
            name: "_status"
            Parameter { name: "statusString"; type: "QString" }
        }
        Method { name: "_bootloaderSyncFailed" }
        Method { name: "_flashComplete" }
        Method {
            name: "_updateProgress"
            Parameter { name: "curr"; type: "int" }
            Parameter { name: "total"; type: "int" }
        }
        Method { name: "_eraseStarted" }
        Method { name: "_eraseComplete" }
        Method { name: "_eraseProgressTick" }
        Method {
            name: "_px4ReleasesGithubDownloadComplete"
            Parameter { name: "remoteFile"; type: "QString" }
            Parameter { name: "localFile"; type: "QString" }
            Parameter { name: "errorMsg"; type: "QString" }
        }
        Method {
            name: "_ardupilotManifestDownloadComplete"
            Parameter { name: "remoteFile"; type: "QString" }
            Parameter { name: "localFile"; type: "QString" }
            Parameter { name: "errorMsg"; type: "QString" }
        }
        Method { name: "_buildAPMFirmwareNames" }
        Method { name: "startBoardSearch" }
        Method { name: "cancel" }
        Method {
            name: "flash"
            Parameter { name: "stackType"; type: "AutoPilotStackType_t" }
            Parameter { name: "firmwareType"; type: "FirmwareBuildType_t" }
            Parameter { name: "vehicleType"; type: "FirmwareVehicleType_t" }
        }
        Method {
            name: "flash"
            isCloned: true
            Parameter { name: "stackType"; type: "AutoPilotStackType_t" }
            Parameter { name: "firmwareType"; type: "FirmwareBuildType_t" }
        }
        Method {
            name: "flash"
            isCloned: true
            Parameter { name: "stackType"; type: "AutoPilotStackType_t" }
        }
        Method {
            name: "flashFirmwareUrl"
            Parameter { name: "firmwareUrl"; type: "QString" }
        }
        Method {
            name: "flashSingleFirmwareMode"
            Parameter { name: "firmwareType"; type: "FirmwareBuildType_t" }
        }
        Method {
            name: "vehicleTypeFromFirmwareSelectionIndex"
            type: "FirmwareVehicleType_t"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "availableBoardsName"; type: "QStringList" }
    }
    Component {
        file: "FirmwareUpgradeSettings.h"
        name: "FirmwareUpgradeSettings"
        accessSemantics: "reference"
        prototype: "SettingsGroup"
        exports: ["QGC/FirmwareUpgradeSettings 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "defaultFirmwareType"
            type: "Fact"
            isPointer: true
            read: "defaultFirmwareType"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "apmChibiOS"
            type: "Fact"
            isPointer: true
            read: "apmChibiOS"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "apmVehicleType"
            type: "Fact"
            isPointer: true
            read: "apmVehicleType"
            index: 2
            isReadonly: true
            isConstant: true
        }
    }
    Component {
        file: "FlightMapSettings.h"
        name: "FlightMapSettings"
        accessSemantics: "reference"
        prototype: "SettingsGroup"
        exports: ["QGC/FlightMapSettings 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "mapProvider"
            type: "Fact"
            isPointer: true
            read: "mapProvider"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "mapType"
            type: "Fact"
            isPointer: true
            read: "mapType"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "elevationMapProvider"
            type: "Fact"
            isPointer: true
            read: "elevationMapProvider"
            index: 2
            isReadonly: true
            isConstant: true
        }
    }
    Component {
        file: "FlightModeSettings.h"
        name: "FlightModeSettings"
        accessSemantics: "reference"
        prototype: "SettingsGroup"
        exports: ["QGC/FlightModeSettings 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "px4HiddenFlightModesMultiRotor"
            type: "Fact"
            isPointer: true
            read: "px4HiddenFlightModesMultiRotor"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "px4HiddenFlightModesFixedWing"
            type: "Fact"
            isPointer: true
            read: "px4HiddenFlightModesFixedWing"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "px4HiddenFlightModesVTOL"
            type: "Fact"
            isPointer: true
            read: "px4HiddenFlightModesVTOL"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "px4HiddenFlightModesRoverBoat"
            type: "Fact"
            isPointer: true
            read: "px4HiddenFlightModesRoverBoat"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "px4HiddenFlightModesSub"
            type: "Fact"
            isPointer: true
            read: "px4HiddenFlightModesSub"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "px4HiddenFlightModesAirship"
            type: "Fact"
            isPointer: true
            read: "px4HiddenFlightModesAirship"
            index: 5
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "apmHiddenFlightModesMultiRotor"
            type: "Fact"
            isPointer: true
            read: "apmHiddenFlightModesMultiRotor"
            index: 6
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "apmHiddenFlightModesFixedWing"
            type: "Fact"
            isPointer: true
            read: "apmHiddenFlightModesFixedWing"
            index: 7
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "apmHiddenFlightModesVTOL"
            type: "Fact"
            isPointer: true
            read: "apmHiddenFlightModesVTOL"
            index: 8
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "apmHiddenFlightModesRoverBoat"
            type: "Fact"
            isPointer: true
            read: "apmHiddenFlightModesRoverBoat"
            index: 9
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "apmHiddenFlightModesSub"
            type: "Fact"
            isPointer: true
            read: "apmHiddenFlightModesSub"
            index: 10
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "apmHiddenFlightModesAirship"
            type: "Fact"
            isPointer: true
            read: "apmHiddenFlightModesAirship"
            index: 11
            isReadonly: true
            isConstant: true
        }
    }
    Component {
        file: "FlightPathSegment.h"
        name: "FlightPathSegment"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/FlightPathSegment 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Enum {
            name: "SegmentType"
            values: [
                "SegmentTypeTakeoff",
                "SegmentTypeGeneric",
                "SegmentTypeLand",
                "SegmentTypeTerrainFrame"
            ]
        }
        Property { name: "coordinate1"; type: "QGeoCoordinate"; notify: "coordinate1Changed"; index: 0 }
        Property { name: "coordinate2"; type: "QGeoCoordinate"; notify: "coordinate2Changed"; index: 1 }
        Property { name: "coord1AMSLAlt"; type: "double"; notify: "coord1AMSLAltChanged"; index: 2 }
        Property { name: "coord2AMSLAlt"; type: "double"; notify: "coord2AMSLAltChanged"; index: 3 }
        Property {
            name: "specialVisual"
            type: "bool"
            read: "specialVisual"
            write: "setSpecialVisual"
            notify: "specialVisualChanged"
            index: 4
        }
        Property {
            name: "amslTerrainHeights"
            type: "QVariantList"
            notify: "amslTerrainHeightsChanged"
            index: 5
        }
        Property { name: "distanceBetween"; type: "double"; notify: "distanceBetweenChanged"; index: 6 }
        Property {
            name: "finalDistanceBetween"
            type: "double"
            notify: "finalDistanceBetweenChanged"
            index: 7
        }
        Property { name: "totalDistance"; type: "double"; notify: "totalDistanceChanged"; index: 8 }
        Property { name: "terrainCollision"; type: "bool"; notify: "terrainCollisionChanged"; index: 9 }
        Property { name: "segmentType"; type: "SegmentType"; index: 10; isConstant: true }
        Signal {
            name: "coordinate1Changed"
            Parameter { name: "coordinate"; type: "QGeoCoordinate" }
        }
        Signal {
            name: "coordinate2Changed"
            Parameter { name: "coordinate"; type: "QGeoCoordinate" }
        }
        Signal { name: "coord1AMSLAltChanged" }
        Signal { name: "coord2AMSLAltChanged" }
        Signal {
            name: "specialVisualChanged"
            Parameter { name: "specialVisual"; type: "bool" }
        }
        Signal { name: "amslTerrainHeightsChanged" }
        Signal {
            name: "distanceBetweenChanged"
            Parameter { name: "distanceBetween"; type: "double" }
        }
        Signal {
            name: "finalDistanceBetweenChanged"
            Parameter { name: "finalDistanceBetween"; type: "double" }
        }
        Signal {
            name: "totalDistanceChanged"
            Parameter { name: "totalDistance"; type: "double" }
        }
        Signal {
            name: "terrainCollisionChanged"
            Parameter { name: "terrainCollision"; type: "bool" }
        }
        Method {
            name: "setCoordinate1"
            Parameter { name: "coordinate"; type: "QGeoCoordinate" }
        }
        Method {
            name: "setCoordinate2"
            Parameter { name: "coordinate"; type: "QGeoCoordinate" }
        }
        Method {
            name: "setCoord1AMSLAlt"
            Parameter { name: "alt"; type: "double" }
        }
        Method {
            name: "setCoord2AMSLAlt"
            Parameter { name: "alt"; type: "double" }
        }
        Method { name: "_sendTerrainPathQuery" }
        Method {
            name: "_terrainDataReceived"
            Parameter { name: "success"; type: "bool" }
            Parameter { name: "pathHeightInfo"; type: "TerrainPathQuery::PathHeightInfo_t" }
        }
        Method { name: "_updateTotalDistance" }
        Method { name: "_updateTerrainCollision" }
    }
    Component {
        file: "FlyViewSettings.h"
        name: "FlyViewSettings"
        accessSemantics: "reference"
        prototype: "SettingsGroup"
        exports: ["QGC/FlyViewSettings 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "guidedMinimumAltitude"
            type: "Fact"
            isPointer: true
            read: "guidedMinimumAltitude"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "guidedMaximumAltitude"
            type: "Fact"
            isPointer: true
            read: "guidedMaximumAltitude"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "showLogReplayStatusBar"
            type: "Fact"
            isPointer: true
            read: "showLogReplayStatusBar"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "showAdditionalIndicatorsCompass"
            type: "Fact"
            isPointer: true
            read: "showAdditionalIndicatorsCompass"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "lockNoseUpCompass"
            type: "Fact"
            isPointer: true
            read: "lockNoseUpCompass"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "maxGoToLocationDistance"
            type: "Fact"
            isPointer: true
            read: "maxGoToLocationDistance"
            index: 5
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "forwardFlightGoToLocationLoiterRad"
            type: "Fact"
            isPointer: true
            read: "forwardFlightGoToLocationLoiterRad"
            index: 6
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "goToLocationRequiresConfirmInGuided"
            type: "Fact"
            isPointer: true
            read: "goToLocationRequiresConfirmInGuided"
            index: 7
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "keepMapCenteredOnVehicle"
            type: "Fact"
            isPointer: true
            read: "keepMapCenteredOnVehicle"
            index: 8
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "showSimpleCameraControl"
            type: "Fact"
            isPointer: true
            read: "showSimpleCameraControl"
            index: 9
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "showObstacleDistanceOverlay"
            type: "Fact"
            isPointer: true
            read: "showObstacleDistanceOverlay"
            index: 10
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "updateHomePosition"
            type: "Fact"
            isPointer: true
            read: "updateHomePosition"
            index: 11
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "instrumentQmlFile2"
            type: "Fact"
            isPointer: true
            read: "instrumentQmlFile2"
            index: 12
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "requestControlAllowTakeover"
            type: "Fact"
            isPointer: true
            read: "requestControlAllowTakeover"
            index: 13
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "requestControlTimeout"
            type: "Fact"
            isPointer: true
            read: "requestControlTimeout"
            index: 14
            isReadonly: true
            isConstant: true
        }
    }
    Component {
        file: "Viewer3DQmlVariableTypes.h"
        name: "GeoCoordinateType"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/GeoCoordinateType 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "gpsRef"
            type: "QGeoCoordinate"
            read: "gpsRef"
            write: "setGpsRef"
            notify: "gpsRefChanged"
            index: 0
        }
        Property {
            name: "coordinate"
            type: "QGeoCoordinate"
            read: "coordinate"
            write: "setCoordinate"
            notify: "coordinateChanged"
            index: 1
        }
        Property {
            name: "localCoordinate"
            type: "QVector3D"
            read: "localCoordinate"
            notify: "localCoordinateChanged"
            index: 2
            isReadonly: true
        }
        Signal { name: "gpsRefChanged" }
        Signal { name: "coordinateChanged" }
        Signal { name: "localCoordinateChanged" }
        Method { name: "gpsRefChangedEvent" }
        Method { name: "coordinateChangedEvent" }
    }
    Component {
        file: "GeoFenceController.h"
        name: "GeoFenceController"
        accessSemantics: "reference"
        prototype: "PlanElementController"
        exports: ["QGC/GeoFenceController 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "polygons"
            type: "QmlObjectListModel"
            isPointer: true
            read: "polygons"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "circles"
            type: "QmlObjectListModel"
            isPointer: true
            read: "circles"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "breachReturnPoint"
            type: "QGeoCoordinate"
            read: "breachReturnPoint"
            write: "setBreachReturnPoint"
            notify: "breachReturnPointChanged"
            index: 2
        }
        Property {
            name: "breachReturnAltitude"
            type: "Fact"
            isPointer: true
            read: "breachReturnAltitude"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "paramCircularFence"
            type: "double"
            read: "paramCircularFence"
            notify: "paramCircularFenceChanged"
            index: 4
            isReadonly: true
        }
        Signal {
            name: "breachReturnPointChanged"
            Parameter { name: "breachReturnPoint"; type: "QGeoCoordinate" }
        }
        Signal {
            name: "editorQmlChanged"
            Parameter { name: "editorQml"; type: "QString" }
        }
        Signal { name: "loadComplete" }
        Signal { name: "paramCircularFenceChanged" }
        Method {
            name: "_polygonDirtyChanged"
            Parameter { name: "dirty"; type: "bool" }
        }
        Method { name: "_setDirty" }
        Method {
            name: "_setFenceFromManager"
            Parameter { name: "polygons"; type: "QGCFencePolygon"; isList: true }
            Parameter { name: "circles"; type: "QGCFenceCircle"; isList: true }
        }
        Method {
            name: "_setReturnPointFromManager"
            Parameter { name: "breachReturnPoint"; type: "QGeoCoordinate" }
        }
        Method { name: "_managerLoadComplete" }
        Method { name: "_updateContainsItems" }
        Method {
            name: "_managerSendComplete"
            Parameter { name: "error"; type: "bool" }
        }
        Method {
            name: "_managerRemoveAllComplete"
            Parameter { name: "error"; type: "bool" }
        }
        Method { name: "_parametersReady" }
        Method {
            name: "_managerVehicleChanged"
            Parameter { name: "managerVehicle"; type: "Vehicle"; isPointer: true }
        }
        Method {
            name: "addInclusionPolygon"
            Parameter { name: "topLeft"; type: "QGeoCoordinate" }
            Parameter { name: "bottomRight"; type: "QGeoCoordinate" }
        }
        Method {
            name: "addInclusionCircle"
            Parameter { name: "topLeft"; type: "QGeoCoordinate" }
            Parameter { name: "bottomRight"; type: "QGeoCoordinate" }
        }
        Method {
            name: "deletePolygon"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "deleteCircle"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "clearAllInteractive" }
    }
    Component {
        file: "GeoTagController.h"
        name: "GeoTagController"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/GeoTagController 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "logFile"
            type: "QString"
            read: "logFile"
            write: "setLogFile"
            notify: "logFileChanged"
            index: 0
        }
        Property {
            name: "imageDirectory"
            type: "QString"
            read: "imageDirectory"
            write: "setImageDirectory"
            notify: "imageDirectoryChanged"
            index: 1
        }
        Property {
            name: "saveDirectory"
            type: "QString"
            read: "saveDirectory"
            write: "setSaveDirectory"
            notify: "saveDirectoryChanged"
            index: 2
        }
        Property {
            name: "errorMessage"
            type: "QString"
            read: "errorMessage"
            notify: "errorMessageChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "progress"
            type: "double"
            read: "progress"
            notify: "progressChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "inProgress"
            type: "bool"
            read: "inProgress"
            notify: "inProgressChanged"
            index: 5
            isReadonly: true
        }
        Signal {
            name: "logFileChanged"
            Parameter { name: "logFile"; type: "QString" }
        }
        Signal {
            name: "imageDirectoryChanged"
            Parameter { name: "imageDirectory"; type: "QString" }
        }
        Signal {
            name: "saveDirectoryChanged"
            Parameter { name: "saveDirectory"; type: "QString" }
        }
        Signal {
            name: "progressChanged"
            Parameter { name: "progress"; type: "double" }
        }
        Signal { name: "inProgressChanged" }
        Signal {
            name: "errorMessageChanged"
            Parameter { name: "errorMessage"; type: "QString" }
        }
        Method {
            name: "_workerProgressChanged"
            Parameter { name: "progress"; type: "double" }
        }
        Method {
            name: "_setErrorMessage"
            Parameter { name: "errorMsg"; type: "QString" }
        }
        Method {
            name: "_workerError"
            Parameter { name: "errorMsg"; type: "QString" }
        }
        Method { name: "startTagging" }
        Method { name: "cancelTagging" }
    }
    Component {
        file: "GimbalController.h"
        name: "GimbalController"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/GimbalController 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "activeGimbal"
            type: "Gimbal"
            isPointer: true
            read: "activeGimbal"
            write: "setActiveGimbal"
            notify: "activeGimbalChanged"
            index: 0
        }
        Property {
            name: "gimbals"
            type: "QmlObjectListModel"
            isPointer: true
            read: "gimbals"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Signal { name: "activeGimbalChanged" }
        Signal { name: "showAcquireGimbalControlPopup" }
        Method {
            name: "gimbalYawLock"
            Parameter { name: "yawLock"; type: "bool" }
        }
        Method { name: "centerGimbal" }
        Method {
            name: "gimbalPitchStart"
            Parameter { name: "direction"; type: "int" }
        }
        Method {
            name: "gimbalYawStart"
            Parameter { name: "direction"; type: "int" }
        }
        Method { name: "gimbalPitchStop" }
        Method { name: "gimbalYawStop" }
        Method {
            name: "_mavlinkMessageReceived"
            Parameter { name: "message"; type: "mavlink_message_t" }
        }
        Method { name: "_rateSenderTimeout" }
        Method {
            name: "gimbalOnScreenControl"
            Parameter { name: "panpct"; type: "float" }
            Parameter { name: "tiltpct"; type: "float" }
            Parameter { name: "clickAndPoint"; type: "bool" }
            Parameter { name: "clickAndDrag"; type: "bool" }
            Parameter { name: "rateControl"; type: "bool" }
            Parameter { name: "retract"; type: "bool" }
            Parameter { name: "neutral"; type: "bool" }
            Parameter { name: "yawlock"; type: "bool" }
        }
        Method {
            name: "gimbalOnScreenControl"
            isCloned: true
            Parameter { name: "panpct"; type: "float" }
            Parameter { name: "tiltpct"; type: "float" }
            Parameter { name: "clickAndPoint"; type: "bool" }
            Parameter { name: "clickAndDrag"; type: "bool" }
            Parameter { name: "rateControl"; type: "bool" }
            Parameter { name: "retract"; type: "bool" }
            Parameter { name: "neutral"; type: "bool" }
        }
        Method {
            name: "gimbalOnScreenControl"
            isCloned: true
            Parameter { name: "panpct"; type: "float" }
            Parameter { name: "tiltpct"; type: "float" }
            Parameter { name: "clickAndPoint"; type: "bool" }
            Parameter { name: "clickAndDrag"; type: "bool" }
            Parameter { name: "rateControl"; type: "bool" }
            Parameter { name: "retract"; type: "bool" }
        }
        Method {
            name: "gimbalOnScreenControl"
            isCloned: true
            Parameter { name: "panpct"; type: "float" }
            Parameter { name: "tiltpct"; type: "float" }
            Parameter { name: "clickAndPoint"; type: "bool" }
            Parameter { name: "clickAndDrag"; type: "bool" }
            Parameter { name: "rateControl"; type: "bool" }
        }
        Method {
            name: "sendPitchBodyYaw"
            Parameter { name: "pitch"; type: "float" }
            Parameter { name: "yaw"; type: "float" }
            Parameter { name: "showError"; type: "bool" }
        }
        Method {
            name: "sendPitchBodyYaw"
            isCloned: true
            Parameter { name: "pitch"; type: "float" }
            Parameter { name: "yaw"; type: "float" }
        }
        Method {
            name: "sendPitchAbsoluteYaw"
            Parameter { name: "pitch"; type: "float" }
            Parameter { name: "yaw"; type: "float" }
            Parameter { name: "showError"; type: "bool" }
        }
        Method {
            name: "sendPitchAbsoluteYaw"
            isCloned: true
            Parameter { name: "pitch"; type: "float" }
            Parameter { name: "yaw"; type: "float" }
        }
        Method {
            name: "toggleGimbalRetracted"
            Parameter { name: "set"; type: "bool" }
        }
        Method { name: "toggleGimbalRetracted"; isCloned: true }
        Method {
            name: "toggleGimbalYawLock"
            Parameter { name: "set"; type: "bool" }
        }
        Method { name: "toggleGimbalYawLock"; isCloned: true }
        Method { name: "acquireGimbalControl" }
        Method { name: "releaseGimbalControl" }
        Method { name: "sendRate" }
    }
    Component {
        file: "GimbalControllerSettings.h"
        name: "GimbalControllerSettings"
        accessSemantics: "reference"
        prototype: "SettingsGroup"
        exports: ["QGC/GimbalControllerSettings 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "EnableOnScreenControl"
            type: "Fact"
            isPointer: true
            read: "EnableOnScreenControl"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "ControlType"
            type: "Fact"
            isPointer: true
            read: "ControlType"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "CameraVFov"
            type: "Fact"
            isPointer: true
            read: "CameraVFov"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "CameraHFov"
            type: "Fact"
            isPointer: true
            read: "CameraHFov"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "CameraSlideSpeed"
            type: "Fact"
            isPointer: true
            read: "CameraSlideSpeed"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "showAzimuthIndicatorOnMap"
            type: "Fact"
            isPointer: true
            read: "showAzimuthIndicatorOnMap"
            index: 5
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "toolbarIndicatorShowAzimuth"
            type: "Fact"
            isPointer: true
            read: "toolbarIndicatorShowAzimuth"
            index: 6
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "toolbarIndicatorShowAcquireReleaseControl"
            type: "Fact"
            isPointer: true
            read: "toolbarIndicatorShowAcquireReleaseControl"
            index: 7
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "joystickButtonsSpeed"
            type: "Fact"
            isPointer: true
            read: "joystickButtonsSpeed"
            index: 8
            isReadonly: true
            isConstant: true
        }
    }
    Component {
        file: "HorizontalFactValueGrid.h"
        name: "HorizontalFactValueGrid"
        accessSemantics: "reference"
        prototype: "FactValueGrid"
        exports: ["QGC/HorizontalFactValueGridTemplate 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "telemetryBarSettingsGroup"; type: "QString"; index: 0; isConstant: true }
        Property { name: "vehicleCardSettingsGroup"; type: "QString"; index: 1; isConstant: true }
    }
    Component {
        file: "InstrumentValueData.h"
        name: "InstrumentValueData"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/InstrumentValueData 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Enum {
            name: "RangeType"
            values: [
                "NoRangeInfo",
                "ColorRange",
                "OpacityRange",
                "IconSelectRange"
            ]
        }
        Property {
            name: "factValueGrid"
            type: "FactValueGrid"
            isPointer: true
            index: 0
            isConstant: true
        }
        Property {
            name: "factGroupNames"
            type: "QStringList"
            read: "factGroupNames"
            notify: "factGroupNamesChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "factValueNames"
            type: "QStringList"
            read: "factValueNames"
            notify: "factValueNamesChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "factGroupName"
            type: "QString"
            read: "factGroupName"
            notify: "factGroupNameChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "factName"
            type: "QString"
            read: "factName"
            notify: "factNameChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "fact"
            type: "Fact"
            isPointer: true
            read: "fact"
            notify: "factChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "text"
            type: "QString"
            read: "text"
            write: "setText"
            notify: "textChanged"
            index: 6
        }
        Property {
            name: "icon"
            type: "QString"
            read: "icon"
            write: "setIcon"
            notify: "iconChanged"
            index: 7
        }
        Property {
            name: "showUnits"
            type: "bool"
            read: "showUnits"
            write: "setShowUnits"
            notify: "showUnitsChanged"
            index: 8
        }
        Property { name: "rangeTypeNames"; type: "QStringList"; index: 9; isConstant: true }
        Property {
            name: "rangeType"
            type: "RangeType"
            read: "rangeType"
            write: "setRangeType"
            notify: "rangeTypeChanged"
            index: 10
        }
        Property {
            name: "rangeValues"
            type: "QVariantList"
            read: "rangeValues"
            write: "setRangeValues"
            notify: "rangeValuesChanged"
            index: 11
        }
        Property {
            name: "rangeColors"
            type: "QVariantList"
            read: "rangeColors"
            write: "setRangeColors"
            notify: "rangeColorsChanged"
            index: 12
        }
        Property {
            name: "rangeIcons"
            type: "QVariantList"
            read: "rangeIcons"
            write: "setRangeIcons"
            notify: "rangeIconsChanged"
            index: 13
        }
        Property {
            name: "rangeOpacities"
            type: "QVariantList"
            read: "rangeOpacities"
            write: "setRangeOpacities"
            notify: "rangeOpacitiesChanged"
            index: 14
        }
        Property { name: "currentColor"; type: "QColor"; notify: "currentColorChanged"; index: 15 }
        Property { name: "currentOpacity"; type: "double"; notify: "currentOpacityChanged"; index: 16 }
        Property { name: "currentIcon"; type: "QString"; notify: "currentIconChanged"; index: 17 }
        Signal {
            name: "factChanged"
            Parameter { name: "fact"; type: "Fact"; isPointer: true }
        }
        Signal {
            name: "factNameChanged"
            Parameter { name: "factName"; type: "QString" }
        }
        Signal {
            name: "factGroupNameChanged"
            Parameter { name: "factGroup"; type: "QString" }
        }
        Signal {
            name: "textChanged"
            Parameter { name: "text"; type: "QString" }
        }
        Signal {
            name: "showUnitsChanged"
            Parameter { name: "showUnits"; type: "bool" }
        }
        Signal {
            name: "iconChanged"
            Parameter { name: "icon"; type: "QString" }
        }
        Signal { name: "factGroupNamesChanged" }
        Signal { name: "factValueNamesChanged" }
        Signal {
            name: "rangeTypeChanged"
            Parameter { name: "rangeType"; type: "RangeType" }
        }
        Signal {
            name: "rangeValuesChanged"
            Parameter { name: "rangeValues"; type: "QVariantList" }
        }
        Signal {
            name: "rangeColorsChanged"
            Parameter { name: "rangeColors"; type: "QVariantList" }
        }
        Signal {
            name: "rangeIconsChanged"
            Parameter { name: "rangeIcons"; type: "QVariantList" }
        }
        Signal {
            name: "rangeOpacitiesChanged"
            Parameter { name: "rangeOpacities"; type: "QVariantList" }
        }
        Signal {
            name: "currentColorChanged"
            Parameter { name: "currentColor"; type: "QColor" }
        }
        Signal {
            name: "currentOpacityChanged"
            Parameter { name: "currentOpacity"; type: "double" }
        }
        Signal {
            name: "currentIconChanged"
            Parameter { name: "currentIcon"; type: "QString" }
        }
        Method { name: "_resetRangeInfo" }
        Method { name: "_updateRanges" }
        Method { name: "_lookForMissingFact" }
        Method {
            name: "setFact"
            Parameter { name: "factGroupName"; type: "QString" }
            Parameter { name: "factName"; type: "QString" }
        }
        Method { name: "clearFact" }
        Method {
            name: "isValidColor"
            type: "bool"
            Parameter { name: "color"; type: "QColor" }
        }
        Method { name: "invalidColor"; type: "QColor" }
        Method { name: "addRangeValue" }
        Method {
            name: "removeRangeValue"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        file: "Joystick.h"
        name: "Joystick"
        accessSemantics: "reference"
        prototype: "QThread"
        exports: ["QGC/Joystick 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "accumulator"
            type: "bool"
            read: "accumulator"
            write: "setAccumulator"
            notify: "accumulatorChanged"
            index: 0
        }
        Property { name: "calibrated"; type: "bool"; notify: "calibratedChanged"; index: 1 }
        Property {
            name: "circleCorrection"
            type: "bool"
            read: "circleCorrection"
            write: "setCircleCorrection"
            notify: "circleCorrectionChanged"
            index: 2
        }
        Property {
            name: "negativeThrust"
            type: "bool"
            read: "negativeThrust"
            write: "setNegativeThrust"
            notify: "negativeThrustChanged"
            index: 3
        }
        Property {
            name: "requiresCalibration"
            type: "bool"
            read: "requiresCalibration"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "axisFrequencyHz"
            type: "float"
            read: "axisFrequencyHz"
            write: "setAxisFrequency"
            notify: "axisFrequencyHzChanged"
            index: 5
        }
        Property {
            name: "buttonFrequencyHz"
            type: "float"
            read: "buttonFrequencyHz"
            write: "setButtonFrequency"
            notify: "buttonFrequencyHzChanged"
            index: 6
        }
        Property {
            name: "exponential"
            type: "float"
            read: "exponential"
            write: "setExponential"
            notify: "exponentialChanged"
            index: 7
        }
        Property { name: "maxAxisFrequencyHz"; type: "float"; index: 8; isConstant: true }
        Property { name: "maxButtonFrequencyHz"; type: "float"; index: 9; isConstant: true }
        Property { name: "minAxisFrequencyHz"; type: "float"; index: 10; isConstant: true }
        Property { name: "minButtonFrequencyHz"; type: "float"; index: 11; isConstant: true }
        Property {
            name: "axisCount"
            type: "int"
            read: "axisCount"
            index: 12
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "throttleMode"
            type: "int"
            read: "throttleMode"
            write: "setThrottleMode"
            notify: "throttleModeChanged"
            index: 13
        }
        Property {
            name: "totalButtonCount"
            type: "int"
            read: "totalButtonCount"
            index: 14
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "assignableActions"
            type: "QmlObjectListModel"
            isPointer: true
            isConstant: true
            read: "assignableActions"
            notify: "assignableActionsChanged"
            index: 15
            isReadonly: true
        }
        Property {
            name: "disabledActionName"
            type: "QString"
            read: "disabledActionName"
            index: 16
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "name"
            type: "QString"
            read: "name"
            index: 17
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "assignableActionTitles"
            type: "QStringList"
            read: "assignableActionTitles"
            notify: "assignableActionsChanged"
            index: 18
            isReadonly: true
        }
        Property {
            name: "buttonActions"
            type: "QStringList"
            read: "buttonActions"
            notify: "buttonActionsChanged"
            index: 19
            isReadonly: true
        }
        Signal {
            name: "rawAxisValueChanged"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "value"; type: "int" }
        }
        Signal {
            name: "rawButtonPressedChanged"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "pressed"; type: "int" }
        }
        Signal {
            name: "calibratedChanged"
            Parameter { name: "calibrated"; type: "bool" }
        }
        Signal { name: "buttonActionsChanged" }
        Signal { name: "assignableActionsChanged" }
        Signal {
            name: "throttleModeChanged"
            Parameter { name: "mode"; type: "int" }
        }
        Signal {
            name: "negativeThrustChanged"
            Parameter { name: "allowNegative"; type: "bool" }
        }
        Signal {
            name: "exponentialChanged"
            Parameter { name: "exponential"; type: "float" }
        }
        Signal {
            name: "accumulatorChanged"
            Parameter { name: "accumulator"; type: "bool" }
        }
        Signal {
            name: "enabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "circleCorrectionChanged"
            Parameter { name: "circleCorrection"; type: "bool" }
        }
        Signal {
            name: "axisValues"
            Parameter { name: "roll"; type: "float" }
            Parameter { name: "pitch"; type: "float" }
            Parameter { name: "yaw"; type: "float" }
            Parameter { name: "throttle"; type: "float" }
        }
        Signal { name: "axisFrequencyHzChanged" }
        Signal { name: "buttonFrequencyHzChanged" }
        Signal {
            name: "startContinuousZoom"
            Parameter { name: "direction"; type: "int" }
        }
        Signal { name: "stopContinuousZoom" }
        Signal {
            name: "stepZoom"
            Parameter { name: "direction"; type: "int" }
        }
        Signal {
            name: "stepCamera"
            Parameter { name: "direction"; type: "int" }
        }
        Signal {
            name: "stepStream"
            Parameter { name: "direction"; type: "int" }
        }
        Signal { name: "triggerCamera" }
        Signal { name: "startVideoRecord" }
        Signal { name: "stopVideoRecord" }
        Signal { name: "toggleVideoRecord" }
        Signal {
            name: "gimbalPitchStart"
            Parameter { name: "direction"; type: "int" }
        }
        Signal {
            name: "gimbalYawStart"
            Parameter { name: "direction"; type: "int" }
        }
        Signal { name: "gimbalPitchStop" }
        Signal { name: "gimbalYawStop" }
        Signal { name: "centerGimbal" }
        Signal {
            name: "gimbalYawLock"
            Parameter { name: "lock"; type: "bool" }
        }
        Signal {
            name: "setArmed"
            Parameter { name: "arm"; type: "bool" }
        }
        Signal {
            name: "setVtolInFwdFlight"
            Parameter { name: "set"; type: "bool" }
        }
        Signal {
            name: "setFlightMode"
            Parameter { name: "flightMode"; type: "QString" }
        }
        Signal { name: "emergencyStop" }
        Signal {
            name: "gripperAction"
            Parameter { name: "gripperAction"; type: "GRIPPER_ACTIONS" }
        }
        Signal { name: "landingGearDeploy" }
        Signal { name: "landingGearRetract" }
        Signal {
            name: "motorInterlock"
            Parameter { name: "enable"; type: "bool" }
        }
        Signal {
            name: "unknownAction"
            Parameter { name: "action"; type: "QString" }
        }
        Method {
            name: "_activeVehicleChanged"
            Parameter { name: "activeVehicle"; type: "Vehicle"; isPointer: true }
        }
        Method {
            name: "_vehicleCountChanged"
            Parameter { name: "count"; type: "int" }
        }
        Method { name: "_flightModesChanged" }
        Method {
            name: "setButtonRepeat"
            Parameter { name: "button"; type: "int" }
            Parameter { name: "repeat"; type: "bool" }
        }
        Method {
            name: "getButtonRepeat"
            type: "bool"
            Parameter { name: "button"; type: "int" }
        }
        Method {
            name: "setButtonAction"
            Parameter { name: "button"; type: "int" }
            Parameter { name: "action"; type: "QString" }
        }
        Method {
            name: "getButtonAction"
            type: "QString"
            Parameter { name: "button"; type: "int" }
        }
    }
    Component {
        file: "JoystickConfigController.h"
        name: "JoystickConfigController"
        accessSemantics: "reference"
        prototype: "FactPanelController"
        exports: ["QGC/JoystickConfigController 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "statusText"
            type: "QString"
            read: "statusText"
            notify: "statusTextChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "rollAxisMapped"
            type: "bool"
            read: "rollAxisMapped"
            notify: "rollAxisMappedChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "pitchAxisMapped"
            type: "bool"
            read: "pitchAxisMapped"
            notify: "pitchAxisMappedChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "yawAxisMapped"
            type: "bool"
            read: "yawAxisMapped"
            notify: "yawAxisMappedChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "throttleAxisMapped"
            type: "bool"
            read: "throttleAxisMapped"
            notify: "throttleAxisMappedChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "rollAxisReversed"
            type: "int"
            read: "rollAxisReversed"
            notify: "rollAxisReversedChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "pitchAxisReversed"
            type: "int"
            read: "pitchAxisReversed"
            notify: "pitchAxisReversedChanged"
            index: 6
            isReadonly: true
        }
        Property {
            name: "yawAxisReversed"
            type: "int"
            read: "yawAxisReversed"
            notify: "yawAxisReversedChanged"
            index: 7
            isReadonly: true
        }
        Property {
            name: "throttleAxisReversed"
            type: "int"
            read: "throttleAxisReversed"
            notify: "throttleAxisReversedChanged"
            index: 8
            isReadonly: true
        }
        Property {
            name: "deadbandToggle"
            type: "bool"
            read: "getDeadbandToggle"
            write: "setDeadbandToggle"
            notify: "deadbandToggled"
            index: 9
        }
        Property {
            name: "transmitterMode"
            type: "int"
            read: "transmitterMode"
            write: "setTransmitterMode"
            notify: "transmitterModeChanged"
            index: 10
        }
        Property {
            name: "calibrating"
            type: "bool"
            read: "calibrating"
            notify: "calibratingChanged"
            index: 11
            isReadonly: true
        }
        Property {
            name: "nextEnabled"
            type: "bool"
            read: "nextEnabled"
            notify: "nextEnabledChanged"
            index: 12
            isReadonly: true
        }
        Property {
            name: "skipEnabled"
            type: "bool"
            read: "skipEnabled"
            notify: "skipEnabledChanged"
            index: 13
            isReadonly: true
        }
        Property {
            name: "stickPositions"
            type: "double"
            isList: true
            read: "stickPositions"
            notify: "stickPositionsChanged"
            index: 14
            isReadonly: true
        }
        Signal {
            name: "axisValueChanged"
            Parameter { name: "axis"; type: "int" }
            Parameter { name: "value"; type: "int" }
        }
        Signal {
            name: "axisDeadbandChanged"
            Parameter { name: "axis"; type: "int" }
            Parameter { name: "value"; type: "int" }
        }
        Signal {
            name: "rollAxisMappedChanged"
            Parameter { name: "mapped"; type: "bool" }
        }
        Signal {
            name: "pitchAxisMappedChanged"
            Parameter { name: "mapped"; type: "bool" }
        }
        Signal {
            name: "yawAxisMappedChanged"
            Parameter { name: "mapped"; type: "bool" }
        }
        Signal {
            name: "throttleAxisMappedChanged"
            Parameter { name: "mapped"; type: "bool" }
        }
        Signal {
            name: "rollAxisReversedChanged"
            Parameter { name: "reversed"; type: "bool" }
        }
        Signal {
            name: "pitchAxisReversedChanged"
            Parameter { name: "reversed"; type: "bool" }
        }
        Signal {
            name: "yawAxisReversedChanged"
            Parameter { name: "reversed"; type: "bool" }
        }
        Signal {
            name: "throttleAxisReversedChanged"
            Parameter { name: "reversed"; type: "bool" }
        }
        Signal {
            name: "deadbandToggled"
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "transmitterModeChanged"
            Parameter { name: "mode"; type: "int" }
        }
        Signal { name: "calibratingChanged" }
        Signal { name: "nextEnabledChanged" }
        Signal { name: "skipEnabledChanged" }
        Signal { name: "stickPositionsChanged" }
        Signal { name: "statusTextChanged" }
        Signal { name: "nextButtonMessageBoxDisplayed" }
        Method {
            name: "_activeJoystickChanged"
            Parameter { name: "joystick"; type: "Joystick"; isPointer: true }
        }
        Method {
            name: "_axisValueChanged"
            Parameter { name: "axis"; type: "int" }
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "_axisDeadbandChanged"
            Parameter { name: "axis"; type: "int" }
            Parameter { name: "value"; type: "int" }
        }
        Method { name: "cancelButtonClicked" }
        Method { name: "skipButtonClicked" }
        Method { name: "nextButtonClicked" }
        Method { name: "start" }
        Method {
            name: "setDeadbandValue"
            Parameter { name: "axis"; type: "int" }
            Parameter { name: "value"; type: "int" }
        }
    }
    Component {
        file: "JoystickManager.h"
        name: "JoystickManager"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/JoystickManager 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "joysticks"
            type: "QVariantList"
            read: "joysticks"
            notify: "availableJoysticksChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "joystickNames"
            type: "QStringList"
            read: "joystickNames"
            notify: "availableJoysticksChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "activeJoystick"
            type: "Joystick"
            isPointer: true
            read: "activeJoystick"
            write: "setActiveJoystick"
            notify: "activeJoystickChanged"
            index: 2
        }
        Property {
            name: "activeJoystickName"
            type: "QString"
            read: "activeJoystickName"
            write: "setActiveJoystickName"
            notify: "activeJoystickNameChanged"
            index: 3
        }
        Signal {
            name: "activeJoystickChanged"
            Parameter { name: "joystick"; type: "Joystick"; isPointer: true }
        }
        Signal {
            name: "activeJoystickNameChanged"
            Parameter { name: "name"; type: "QString" }
        }
        Signal { name: "availableJoysticksChanged" }
        Signal { name: "updateAvailableJoysticksSignal" }
        Method { name: "init" }
        Method { name: "_updateAvailableJoysticks" }
    }
    Component {
        file: "LinkConfiguration.h"
        name: "LinkConfiguration"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/LinkConfiguration 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Enum {
            name: "LinkType"
            values: [
                "TypeSerial",
                "TypeUdp",
                "TypeTcp",
                "TypeBluetooth",
                "TypeLogReplay",
                "TypeLast"
            ]
        }
        Property {
            name: "name"
            type: "QString"
            read: "name"
            write: "setName"
            notify: "nameChanged"
            index: 0
        }
        Property {
            name: "link"
            type: "LinkInterface"
            isPointer: true
            read: "link"
            notify: "linkChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "linkType"
            type: "LinkType"
            read: "type"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "dynamic"
            type: "bool"
            read: "isDynamic"
            write: "setDynamic"
            notify: "dynamicChanged"
            index: 3
        }
        Property {
            name: "autoConnect"
            type: "bool"
            read: "isAutoConnect"
            write: "setAutoConnect"
            notify: "autoConnectChanged"
            index: 4
        }
        Property {
            name: "settingsURL"
            type: "QString"
            read: "settingsURL"
            index: 5
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "settingsTitle"
            type: "QString"
            read: "settingsTitle"
            index: 6
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "highLatency"
            type: "bool"
            read: "isHighLatency"
            write: "setHighLatency"
            notify: "highLatencyChanged"
            index: 7
        }
        Signal {
            name: "nameChanged"
            Parameter { name: "name"; type: "QString" }
        }
        Signal { name: "linkChanged" }
        Signal { name: "dynamicChanged" }
        Signal { name: "autoConnectChanged" }
        Signal { name: "highLatencyChanged" }
    }
    Component {
        file: "LinkInterface.h"
        name: "LinkInterface"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/LinkInterface 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Signal {
            name: "bytesReceived"
            Parameter { name: "link"; type: "LinkInterface"; isPointer: true }
            Parameter { name: "data"; type: "QByteArray" }
        }
        Signal {
            name: "bytesSent"
            Parameter { name: "link"; type: "LinkInterface"; isPointer: true }
            Parameter { name: "data"; type: "QByteArray" }
        }
        Signal { name: "connected" }
        Signal { name: "disconnected" }
        Signal {
            name: "communicationError"
            Parameter { name: "title"; type: "QString" }
            Parameter { name: "error"; type: "QString" }
        }
        Method {
            name: "_writeBytes"
            Parameter { name: "bytes"; type: "QByteArray" }
        }
        Method { name: "disconnect" }
    }
    Component {
        file: "LinkManager.h"
        name: "LinkManager"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/LinkManager 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "isBluetoothAvailable"
            type: "bool"
            read: "isBluetoothAvailable"
            notify: "isBluetoothAvailableChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "linkConfigurations"
            type: "QmlObjectListModel"
            isPointer: true
            read: "_qmlLinkConfigurations"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "linkTypeStrings"
            type: "QStringList"
            read: "linkTypeStrings"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "mavlinkSupportForwardingEnabled"
            type: "bool"
            read: "mavlinkSupportForwardingEnabled"
            notify: "mavlinkSupportForwardingEnabledChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "serialBaudRates"
            type: "QStringList"
            read: "serialBaudRates"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "serialPortStrings"
            type: "QStringList"
            read: "serialPortStrings"
            notify: "commPortStringsChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "serialPorts"
            type: "QStringList"
            read: "serialPorts"
            notify: "commPortsChanged"
            index: 6
            isReadonly: true
        }
        Signal { name: "mavlinkSupportForwardingEnabledChanged" }
        Signal { name: "isBluetoothAvailableChanged" }
        Signal { name: "commPortStringsChanged" }
        Signal { name: "commPortsChanged" }
        Method { name: "_linkDisconnected" }
        Method {
            name: "_communicationError"
            Parameter { name: "title"; type: "QString" }
            Parameter { name: "error"; type: "QString" }
        }
        Method {
            name: "createConfiguration"
            type: "LinkConfiguration"
            isPointer: true
            Parameter { name: "type"; type: "int" }
            Parameter { name: "name"; type: "QString" }
        }
        Method {
            name: "startConfigurationEditing"
            type: "LinkConfiguration"
            isPointer: true
            Parameter { name: "config"; type: "LinkConfiguration"; isPointer: true }
        }
        Method {
            name: "cancelConfigurationEditing"
            Parameter { name: "config"; type: "LinkConfiguration"; isPointer: true }
        }
        Method {
            name: "endConfigurationEditing"
            Parameter { name: "config"; type: "LinkConfiguration"; isPointer: true }
            Parameter { name: "editedConfig"; type: "LinkConfiguration"; isPointer: true }
        }
        Method {
            name: "endCreateConfiguration"
            Parameter { name: "config"; type: "LinkConfiguration"; isPointer: true }
        }
        Method {
            name: "removeConfiguration"
            Parameter { name: "config"; type: "LinkConfiguration"; isPointer: true }
        }
        Method {
            name: "createConnectedLink"
            Parameter { name: "config"; type: "LinkConfiguration"; isPointer: true; isConstant: true }
        }
        Method { name: "createMavlinkForwardingSupportLink" }
        Method { name: "shutdown" }
        Method {
            name: "startLogReplay"
            type: "LogReplayLink"
            isPointer: true
            Parameter { name: "logFile"; type: "QString" }
        }
    }
    Component {
        file: "LogDownloadController.h"
        name: "LogDownloadController"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/LogDownloadController 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Property {
            name: "model"
            type: "QmlObjectListModel"
            isPointer: true
            read: "_getModel"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "requestingList"
            type: "bool"
            read: "_getRequestingList"
            notify: "requestingListChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "downloadingLogs"
            type: "bool"
            read: "_getDownloadingLogs"
            notify: "downloadingLogsChanged"
            index: 2
            isReadonly: true
        }
        Signal { name: "requestingListChanged" }
        Signal { name: "downloadingLogsChanged" }
        Signal { name: "selectionChanged" }
        Method {
            name: "_setActiveVehicle"
            Parameter { name: "vehicle"; type: "Vehicle"; isPointer: true }
        }
        Method {
            name: "_logEntry"
            Parameter { name: "time_utc"; type: "uint" }
            Parameter { name: "size"; type: "uint" }
            Parameter { name: "id"; type: "ushort" }
            Parameter { name: "num_logs"; type: "ushort" }
            Parameter { name: "last_log_num"; type: "ushort" }
        }
        Method {
            name: "_logData"
            Parameter { name: "ofs"; type: "uint" }
            Parameter { name: "id"; type: "ushort" }
            Parameter { name: "count"; type: "quint8" }
            Parameter { name: "data"; type: "quint8"; isPointer: true; isConstant: true }
        }
        Method { name: "_processDownload" }
        Method { name: "refresh" }
        Method {
            name: "download"
            Parameter { name: "path"; type: "QString" }
        }
        Method { name: "download"; isCloned: true }
        Method { name: "eraseAll" }
        Method { name: "cancel" }
    }
    Component {
        file: "LogReplayLink.h"
        name: "LogReplayConfiguration"
        accessSemantics: "reference"
        prototype: "LinkConfiguration"
        exports: ["QGC/LogReplayConfiguration 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "filename"
            type: "QString"
            read: "logFilename"
            write: "setLogFilename"
            notify: "filenameChanged"
            index: 0
        }
        Signal { name: "filenameChanged" }
    }
    Component {
        file: "LogReplayLinkController.h"
        name: "LogReplayLinkController"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/LogReplayLinkController 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "link"
            type: "LogReplayLink"
            isPointer: true
            read: "link"
            write: "setLink"
            notify: "linkChanged"
            index: 0
        }
        Property {
            name: "isPlaying"
            type: "bool"
            read: "isPlaying"
            write: "setIsPlaying"
            notify: "isPlayingChanged"
            index: 1
        }
        Property {
            name: "percentComplete"
            type: "double"
            read: "percentComplete"
            write: "setPercentComplete"
            notify: "percentCompleteChanged"
            index: 2
        }
        Property { name: "totalTime"; type: "QString"; notify: "totalTimeChanged"; index: 3 }
        Property { name: "playheadTime"; type: "QString"; notify: "playheadTimeChanged"; index: 4 }
        Property { name: "playbackSpeed"; type: "double"; notify: "playbackSpeedChanged"; index: 5 }
        Signal {
            name: "isPlayingChanged"
            Parameter { name: "isPlaying"; type: "bool" }
        }
        Signal {
            name: "linkChanged"
            Parameter { name: "link"; type: "LogReplayLink"; isPointer: true }
        }
        Signal {
            name: "percentCompleteChanged"
            Parameter { name: "percentComplete"; type: "double" }
        }
        Signal {
            name: "playbackSpeedChanged"
            Parameter { name: "playbackSpeed"; type: "double" }
        }
        Signal {
            name: "playheadTimeChanged"
            Parameter { name: "playheadTime"; type: "QString" }
        }
        Signal {
            name: "totalTimeChanged"
            Parameter { name: "totalTime"; type: "QString" }
        }
        Method {
            name: "_currentLogTimeSecs"
            Parameter { name: "secs"; type: "uint" }
        }
        Method { name: "_linkDisconnected" }
        Method {
            name: "_logFileStats"
            Parameter { name: "logDurationSecs"; type: "uint" }
        }
        Method { name: "_playbackAtEnd" }
        Method { name: "_playbackPaused" }
        Method {
            name: "_playbackPercentCompleteChanged"
            Parameter { name: "percentComplete"; type: "double" }
        }
        Method { name: "_playbackStarted" }
    }
    Component {
        file: "MAVLinkChartController.h"
        name: "MAVLinkChartController"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/MAVLinkChartController 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "chartFields"
            type: "QVariantList"
            read: "chartFields"
            notify: "chartFieldsChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "rangeXMin"
            type: "QDateTime"
            read: "rangeXMin"
            notify: "rangeXMinChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "rangeXMax"
            type: "QDateTime"
            read: "rangeXMax"
            notify: "rangeXMaxChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "rangeYMin"
            type: "double"
            read: "rangeYMin"
            notify: "rangeYMinChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "rangeYMax"
            type: "double"
            read: "rangeYMax"
            notify: "rangeYMaxChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "chartIndex"
            type: "int"
            read: "chartIndex"
            index: 5
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "rangeYIndex"
            type: "uint"
            read: "rangeYIndex"
            write: "setRangeYIndex"
            notify: "rangeYIndexChanged"
            index: 6
        }
        Property {
            name: "rangeXIndex"
            type: "uint"
            read: "rangeXIndex"
            write: "setRangeXIndex"
            notify: "rangeXIndexChanged"
            index: 7
        }
        Signal { name: "chartFieldsChanged" }
        Signal { name: "rangeXMinChanged" }
        Signal { name: "rangeXMaxChanged" }
        Signal { name: "rangeYMinChanged" }
        Signal { name: "rangeYMaxChanged" }
        Signal { name: "rangeYIndexChanged" }
        Signal { name: "rangeXIndexChanged" }
        Method { name: "_refreshSeries" }
        Method {
            name: "addSeries"
            Parameter { name: "field"; type: "QGCMAVLinkMessageField"; isPointer: true }
            Parameter { name: "series"; type: "QAbstractSeries"; isPointer: true }
        }
        Method {
            name: "delSeries"
            Parameter { name: "field"; type: "QGCMAVLinkMessageField"; isPointer: true }
        }
        Method { name: "controller"; type: "MAVLinkInspectorController"; isPointer: true }
    }
    Component {
        file: "MAVLinkConsoleController.h"
        name: "MAVLinkConsoleController"
        accessSemantics: "reference"
        prototype: "QStringListModel"
        exports: ["QGC/MAVLinkConsoleController 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "text"
            type: "QString"
            read: "_getText"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Method {
            name: "_setActiveVehicle"
            Parameter { name: "vehicle"; type: "Vehicle"; isPointer: true }
        }
        Method {
            name: "_receiveData"
            Parameter { name: "device"; type: "quint8" }
            Parameter { name: "flags"; type: "quint8" }
            Parameter { name: "timeout"; type: "ushort" }
            Parameter { name: "baudrate"; type: "uint" }
            Parameter { name: "data"; type: "QByteArray" }
        }
        Method {
            name: "sendCommand"
            Parameter { name: "command"; type: "QString" }
        }
        Method {
            name: "historyUp"
            type: "QString"
            Parameter { name: "current"; type: "QString" }
        }
        Method {
            name: "historyDown"
            type: "QString"
            Parameter { name: "current"; type: "QString" }
        }
        Method {
            name: "handleClipboard"
            type: "QString"
            Parameter { name: "command_pre"; type: "QString" }
        }
    }
    Component {
        file: "MAVLinkInspectorController.h"
        name: "MAVLinkInspectorController"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/MAVLinkInspectorController 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "systems"
            type: "QmlObjectListModel"
            isPointer: true
            read: "systems"
            notify: "systemsChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "charts"
            type: "QmlObjectListModel"
            isPointer: true
            read: "charts"
            notify: "chartsChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "activeSystem"
            type: "QGCMAVLinkSystem"
            isPointer: true
            read: "activeSystem"
            notify: "activeSystemChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "timeScales"
            type: "QStringList"
            read: "timeScales"
            notify: "timeScalesChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "rangeList"
            type: "QStringList"
            read: "rangeList"
            notify: "rangeListChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "systemNames"
            type: "QStringList"
            read: "systemNames"
            notify: "systemsChanged"
            index: 5
            isReadonly: true
        }
        Signal { name: "activeSystemChanged" }
        Signal { name: "chartsChanged" }
        Signal { name: "rangeListChanged" }
        Signal { name: "systemsChanged" }
        Signal { name: "timeScalesChanged" }
        Method {
            name: "_receiveMessage"
            Parameter { name: "link"; type: "LinkInterface"; isPointer: true }
            Parameter { name: "message"; type: "mavlink_message_t" }
        }
        Method { name: "_refreshFrequency" }
        Method {
            name: "_setActiveVehicle"
            Parameter { name: "vehicle"; type: "Vehicle"; isPointer: true }
        }
        Method {
            name: "_vehicleAdded"
            Parameter { name: "vehicle"; type: "Vehicle"; isPointer: true }
        }
        Method {
            name: "_vehicleRemoved"
            Parameter { name: "vehicle"; type: "Vehicle"; isPointer: true; isConstant: true }
        }
        Method { name: "createChart"; type: "MAVLinkChartController"; isPointer: true }
        Method {
            name: "deleteChart"
            Parameter { name: "chart"; type: "MAVLinkChartController"; isPointer: true }
        }
        Method {
            name: "setActiveSystem"
            Parameter { name: "systemId"; type: "int" }
        }
        Method {
            name: "setMessageInterval"
            Parameter { name: "rate"; type: "int" }
        }
    }
    Component {
        file: "MAVLinkLogManager.h"
        name: "MAVLinkLogManager"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/MAVLinkLogManager 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "emailAddress"
            type: "QString"
            read: "emailAddress"
            write: "setEmailAddress"
            notify: "emailAddressChanged"
            index: 0
        }
        Property {
            name: "description"
            type: "QString"
            read: "description"
            write: "setDescription"
            notify: "descriptionChanged"
            index: 1
        }
        Property {
            name: "uploadURL"
            type: "QString"
            read: "uploadURL"
            write: "setUploadURL"
            notify: "uploadURLChanged"
            index: 2
        }
        Property {
            name: "feedback"
            type: "QString"
            read: "feedback"
            write: "setFeedback"
            notify: "feedbackChanged"
            index: 3
        }
        Property {
            name: "videoURL"
            type: "QString"
            read: "videoURL"
            write: "setVideoURL"
            notify: "videoURLChanged"
            index: 4
        }
        Property {
            name: "enableAutoUpload"
            type: "bool"
            read: "enableAutoUpload"
            write: "setEnableAutoUpload"
            notify: "enableAutoUploadChanged"
            index: 5
        }
        Property {
            name: "enableAutoStart"
            type: "bool"
            read: "enableAutoStart"
            write: "setEnableAutoStart"
            notify: "enableAutoStartChanged"
            index: 6
        }
        Property {
            name: "deleteAfterUpload"
            type: "bool"
            read: "deleteAfterUpload"
            write: "setDeleteAfterUpload"
            notify: "deleteAfterUploadChanged"
            index: 7
        }
        Property {
            name: "publicLog"
            type: "bool"
            read: "publicLog"
            write: "setPublicLog"
            notify: "publicLogChanged"
            index: 8
        }
        Property {
            name: "uploading"
            type: "bool"
            read: "uploading"
            notify: "uploadingChanged"
            index: 9
            isReadonly: true
        }
        Property {
            name: "logRunning"
            type: "bool"
            read: "logRunning"
            notify: "logRunningChanged"
            index: 10
            isReadonly: true
        }
        Property {
            name: "canStartLog"
            type: "bool"
            read: "canStartLog"
            notify: "canStartLogChanged"
            index: 11
            isReadonly: true
        }
        Property {
            name: "logFiles"
            type: "QmlObjectListModel"
            isPointer: true
            read: "logFiles"
            notify: "logFilesChanged"
            index: 12
            isReadonly: true
        }
        Property {
            name: "windSpeed"
            type: "int"
            read: "windSpeed"
            write: "setWindSpeed"
            notify: "windSpeedChanged"
            index: 13
        }
        Property {
            name: "rating"
            type: "QString"
            read: "rating"
            write: "setRating"
            notify: "ratingChanged"
            index: 14
        }
        Signal { name: "abortUpload" }
        Signal { name: "canStartLogChanged" }
        Signal { name: "deleteAfterUploadChanged" }
        Signal { name: "descriptionChanged" }
        Signal { name: "emailAddressChanged" }
        Signal { name: "enableAutoStartChanged" }
        Signal { name: "enableAutoUploadChanged" }
        Signal { name: "failed" }
        Signal { name: "feedbackChanged" }
        Signal { name: "logFilesChanged" }
        Signal { name: "logRunningChanged" }
        Signal { name: "publicLogChanged" }
        Signal { name: "ratingChanged" }
        Signal {
            name: "readyRead"
            Parameter { name: "data"; type: "QByteArray" }
        }
        Signal { name: "selectedCountChanged" }
        Signal { name: "succeed" }
        Signal { name: "uploadingChanged" }
        Signal { name: "uploadURLChanged" }
        Signal { name: "videoURLChanged" }
        Signal { name: "windSpeedChanged" }
        Method { name: "_uploadFinished" }
        Method { name: "_dataAvailable" }
        Method {
            name: "_uploadProgress"
            Parameter { name: "bytesSent"; type: "qlonglong" }
            Parameter { name: "bytesTotal"; type: "qlonglong" }
        }
        Method {
            name: "_mavlinkLogData"
            Parameter { name: "vehicle"; type: "Vehicle"; isPointer: true }
            Parameter { name: "target_system"; type: "quint8" }
            Parameter { name: "target_component"; type: "quint8" }
            Parameter { name: "sequence"; type: "ushort" }
            Parameter { name: "first_message"; type: "quint8" }
            Parameter { name: "data"; type: "QByteArray" }
            Parameter { name: "acked"; type: "bool" }
        }
        Method {
            name: "_armedChanged"
            Parameter { name: "armed"; type: "bool" }
        }
        Method {
            name: "_mavCommandResult"
            Parameter { name: "vehicleId"; type: "int" }
            Parameter { name: "component"; type: "int" }
            Parameter { name: "command"; type: "int" }
            Parameter { name: "result"; type: "int" }
            Parameter { name: "failureCode"; type: "int" }
        }
        Method { name: "cancelUpload" }
        Method { name: "deleteLog" }
        Method { name: "startLogging" }
        Method { name: "stopLogging" }
        Method { name: "uploadLog" }
    }
    Component {
        file: "MapsSettings.h"
        name: "MapsSettings"
        accessSemantics: "reference"
        prototype: "SettingsGroup"
        exports: ["QGC/MapsSettings 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "maxCacheDiskSize"
            type: "Fact"
            isPointer: true
            read: "maxCacheDiskSize"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "maxCacheMemorySize"
            type: "Fact"
            isPointer: true
            read: "maxCacheMemorySize"
            index: 1
            isReadonly: true
            isConstant: true
        }
    }
    Component {
        file: "MavlinkAction.h"
        name: "MavlinkAction"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/MavlinkAction 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "label"
            type: "QString"
            read: "label"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "description"
            type: "QString"
            read: "description"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Method {
            name: "sendTo"
            Parameter { name: "vehicle"; type: "Vehicle"; isPointer: true }
        }
    }
    Component {
        file: "MavlinkActionManager.h"
        name: "MavlinkActionManager"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/MavlinkActionManager 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "actionFileNameFact"
            type: "Fact"
            isPointer: true
            read: "actionFileNameFact"
            write: "setActionFileNameFact"
            notify: "actionFileNameFactChanged"
            index: 0
        }
        Property {
            name: "actions"
            type: "QmlObjectListModel"
            isPointer: true
            read: "actions"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Signal { name: "actionFileNameFactChanged" }
        Method { name: "_loadActionsFile" }
    }
    Component {
        file: "MavlinkActionsSettings.h"
        name: "MavlinkActionsSettings"
        accessSemantics: "reference"
        prototype: "SettingsGroup"
        exports: ["QGC/MavlinkActionsSettings 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "flyViewActionsFile"
            type: "Fact"
            isPointer: true
            read: "flyViewActionsFile"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "joystickActionsFile"
            type: "Fact"
            isPointer: true
            read: "joystickActionsFile"
            index: 1
            isReadonly: true
            isConstant: true
        }
    }
    Component {
        file: "MavlinkCameraControl.h"
        name: "MavlinkCameraControl"
        accessSemantics: "reference"
        prototype: "FactGroup"
        exports: ["QGC/MavlinkCameraControl 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Enum {
            name: "CameraMode"
            values: [
                "CAM_MODE_UNDEFINED",
                "CAM_MODE_PHOTO",
                "CAM_MODE_VIDEO",
                "CAM_MODE_SURVEY"
            ]
        }
        Enum {
            name: "VideoCaptureStatus"
            values: [
                "VIDEO_CAPTURE_STATUS_STOPPED",
                "VIDEO_CAPTURE_STATUS_RUNNING",
                "VIDEO_CAPTURE_STATUS_LAST",
                "VIDEO_CAPTURE_STATUS_UNDEFINED"
            ]
        }
        Enum {
            name: "PhotoCaptureStatus"
            values: [
                "PHOTO_CAPTURE_IDLE",
                "PHOTO_CAPTURE_IN_PROGRESS",
                "PHOTO_CAPTURE_INTERVAL_IDLE",
                "PHOTO_CAPTURE_INTERVAL_IN_PROGRESS",
                "PHOTO_CAPTURE_LAST",
                "PHOTO_CAPTURE_STATUS_UNDEFINED"
            ]
        }
        Enum {
            name: "PhotoCaptureMode"
            values: ["PHOTO_CAPTURE_SINGLE", "PHOTO_CAPTURE_TIMELAPSE"]
        }
        Enum {
            name: "StorageStatus"
            values: [
                "STORAGE_EMPTY",
                "STORAGE_UNFORMATTED",
                "STORAGE_READY",
                "STORAGE_NOT_SUPPORTED"
            ]
        }
        Enum {
            name: "ThermalViewMode"
            values: [
                "THERMAL_OFF",
                "THERMAL_BLEND",
                "THERMAL_FULL",
                "THERMAL_PIP"
            ]
        }
        Enum {
            name: "TrackingStatus"
            values: [
                "TRACKING_UNKNOWN",
                "TRACKING_SUPPORTED",
                "TRACKING_ENABLED",
                "TRACKING_RECTANGLE",
                "TRACKING_POINT"
            ]
        }
        Property {
            name: "exposureMode"
            type: "Fact"
            isPointer: true
            read: "exposureMode"
            notify: "parametersReady"
            index: 0
            isReadonly: true
        }
        Property {
            name: "ev"
            type: "Fact"
            isPointer: true
            read: "ev"
            notify: "parametersReady"
            index: 1
            isReadonly: true
        }
        Property {
            name: "iso"
            type: "Fact"
            isPointer: true
            read: "iso"
            notify: "parametersReady"
            index: 2
            isReadonly: true
        }
        Property {
            name: "shutterSpeed"
            type: "Fact"
            isPointer: true
            read: "shutterSpeed"
            notify: "parametersReady"
            index: 3
            isReadonly: true
        }
        Property {
            name: "aperture"
            type: "Fact"
            isPointer: true
            read: "aperture"
            notify: "parametersReady"
            index: 4
            isReadonly: true
        }
        Property {
            name: "wb"
            type: "Fact"
            isPointer: true
            read: "wb"
            notify: "parametersReady"
            index: 5
            isReadonly: true
        }
        Property {
            name: "mode"
            type: "Fact"
            isPointer: true
            read: "mode"
            notify: "parametersReady"
            index: 6
            isReadonly: true
        }
        Property {
            name: "version"
            type: "int"
            read: "version"
            notify: "infoChanged"
            index: 7
            isReadonly: true
        }
        Property {
            name: "modelName"
            type: "QString"
            read: "modelName"
            notify: "infoChanged"
            index: 8
            isReadonly: true
        }
        Property {
            name: "vendor"
            type: "QString"
            read: "vendor"
            notify: "infoChanged"
            index: 9
            isReadonly: true
        }
        Property {
            name: "firmwareVersion"
            type: "QString"
            read: "firmwareVersion"
            notify: "infoChanged"
            index: 10
            isReadonly: true
        }
        Property {
            name: "focalLength"
            type: "double"
            read: "focalLength"
            notify: "infoChanged"
            index: 11
            isReadonly: true
        }
        Property {
            name: "sensorSize"
            type: "QSizeF"
            read: "sensorSize"
            notify: "infoChanged"
            index: 12
            isReadonly: true
        }
        Property {
            name: "resolution"
            type: "QSize"
            read: "resolution"
            notify: "infoChanged"
            index: 13
            isReadonly: true
        }
        Property {
            name: "capturesVideo"
            type: "bool"
            read: "capturesVideo"
            notify: "infoChanged"
            index: 14
            isReadonly: true
        }
        Property {
            name: "capturesPhotos"
            type: "bool"
            read: "capturesPhotos"
            notify: "infoChanged"
            index: 15
            isReadonly: true
        }
        Property {
            name: "hasModes"
            type: "bool"
            read: "hasModes"
            notify: "infoChanged"
            index: 16
            isReadonly: true
        }
        Property {
            name: "hasZoom"
            type: "bool"
            read: "hasZoom"
            notify: "infoChanged"
            index: 17
            isReadonly: true
        }
        Property {
            name: "hasFocus"
            type: "bool"
            read: "hasFocus"
            notify: "infoChanged"
            index: 18
            isReadonly: true
        }
        Property {
            name: "hasVideoStream"
            type: "bool"
            read: "hasVideoStream"
            notify: "infoChanged"
            index: 19
            isReadonly: true
        }
        Property {
            name: "hasTracking"
            type: "bool"
            read: "hasTracking"
            notify: "infoChanged"
            index: 20
            isReadonly: true
        }
        Property {
            name: "photosInVideoMode"
            type: "bool"
            read: "photosInVideoMode"
            notify: "infoChanged"
            index: 21
            isReadonly: true
        }
        Property {
            name: "videoInPhotoMode"
            type: "bool"
            read: "videoInPhotoMode"
            notify: "infoChanged"
            index: 22
            isReadonly: true
        }
        Property {
            name: "isBasic"
            type: "bool"
            read: "isBasic"
            notify: "infoChanged"
            index: 23
            isReadonly: true
        }
        Property {
            name: "storageFree"
            type: "uint"
            read: "storageFree"
            notify: "storageFreeChanged"
            index: 24
            isReadonly: true
        }
        Property {
            name: "storageFreeStr"
            type: "QString"
            read: "storageFreeStr"
            notify: "storageFreeChanged"
            index: 25
            isReadonly: true
        }
        Property {
            name: "storageTotal"
            type: "uint"
            read: "storageTotal"
            notify: "storageTotalChanged"
            index: 26
            isReadonly: true
        }
        Property {
            name: "batteryRemaining"
            type: "int"
            read: "batteryRemaining"
            notify: "batteryRemainingChanged"
            index: 27
            isReadonly: true
        }
        Property {
            name: "batteryRemainingStr"
            type: "QString"
            read: "batteryRemainingStr"
            notify: "batteryRemainingChanged"
            index: 28
            isReadonly: true
        }
        Property {
            name: "paramComplete"
            type: "bool"
            read: "paramComplete"
            notify: "parametersReady"
            index: 29
            isReadonly: true
        }
        Property {
            name: "zoomLevel"
            type: "double"
            read: "zoomLevel"
            write: "setZoomLevel"
            notify: "zoomLevelChanged"
            index: 30
        }
        Property {
            name: "focusLevel"
            type: "double"
            read: "focusLevel"
            write: "setFocusLevel"
            notify: "focusLevelChanged"
            index: 31
        }
        Property {
            name: "activeSettings"
            type: "QStringList"
            read: "activeSettings"
            notify: "activeSettingsChanged"
            index: 32
            isReadonly: true
        }
        Property {
            name: "videoCaptureStatus"
            type: "VideoCaptureStatus"
            read: "videoCaptureStatus"
            notify: "videoCaptureStatusChanged"
            index: 33
            isReadonly: true
        }
        Property {
            name: "photoCaptureStatus"
            type: "PhotoCaptureStatus"
            read: "photoCaptureStatus"
            notify: "photoCaptureStatusChanged"
            index: 34
            isReadonly: true
        }
        Property {
            name: "cameraMode"
            type: "CameraMode"
            read: "cameraMode"
            write: "setCameraMode"
            notify: "cameraModeChanged"
            index: 35
        }
        Property {
            name: "storageStatus"
            type: "StorageStatus"
            read: "storageStatus"
            notify: "storageStatusChanged"
            index: 36
            isReadonly: true
        }
        Property {
            name: "photoLapse"
            type: "double"
            read: "photoLapse"
            write: "setPhotoLapse"
            notify: "photoLapseChanged"
            index: 37
        }
        Property {
            name: "photoLapseCount"
            type: "int"
            read: "photoLapseCount"
            write: "setPhotoLapseCount"
            notify: "photoLapseCountChanged"
            index: 38
        }
        Property {
            name: "photoCaptureMode"
            type: "PhotoCaptureMode"
            read: "photoCaptureMode"
            write: "setPhotoCaptureMode"
            notify: "photoCaptureModeChanged"
            index: 39
        }
        Property {
            name: "currentStream"
            type: "int"
            read: "currentStream"
            write: "setCurrentStream"
            notify: "currentStreamChanged"
            index: 40
        }
        Property {
            name: "autoStream"
            type: "bool"
            read: "autoStream"
            notify: "autoStreamChanged"
            index: 41
            isReadonly: true
        }
        Property {
            name: "streams"
            type: "QmlObjectListModel"
            isPointer: true
            read: "streams"
            notify: "streamsChanged"
            index: 42
            isReadonly: true
        }
        Property {
            name: "currentStreamInstance"
            type: "QGCVideoStreamInfo"
            isPointer: true
            read: "currentStreamInstance"
            notify: "currentStreamChanged"
            index: 43
            isReadonly: true
        }
        Property {
            name: "thermalStreamInstance"
            type: "QGCVideoStreamInfo"
            isPointer: true
            read: "thermalStreamInstance"
            notify: "thermalStreamChanged"
            index: 44
            isReadonly: true
        }
        Property {
            name: "recordTime"
            type: "uint"
            read: "recordTime"
            notify: "recordTimeChanged"
            index: 45
            isReadonly: true
        }
        Property {
            name: "recordTimeStr"
            type: "QString"
            read: "recordTimeStr"
            notify: "recordTimeChanged"
            index: 46
            isReadonly: true
        }
        Property {
            name: "streamLabels"
            type: "QStringList"
            read: "streamLabels"
            notify: "streamLabelsChanged"
            index: 47
            isReadonly: true
        }
        Property {
            name: "thermalMode"
            type: "ThermalViewMode"
            read: "thermalMode"
            write: "setThermalMode"
            notify: "thermalModeChanged"
            index: 48
        }
        Property {
            name: "thermalOpacity"
            type: "double"
            read: "thermalOpacity"
            write: "setThermalOpacity"
            notify: "thermalOpacityChanged"
            index: 49
        }
        Property {
            name: "trackingEnabled"
            type: "bool"
            read: "trackingEnabled"
            write: "setTrackingEnabled"
            notify: "trackingEnabledChanged"
            index: 50
        }
        Property {
            name: "trackingStatus"
            type: "TrackingStatus"
            read: "trackingStatus"
            index: 51
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "trackingImageStatus"
            type: "bool"
            read: "trackingImageStatus"
            notify: "trackingImageStatusChanged"
            index: 52
            isReadonly: true
        }
        Property {
            name: "trackingImageRect"
            type: "QRectF"
            read: "trackingImageRect"
            notify: "trackingImageStatusChanged"
            index: 53
            isReadonly: true
        }
        Signal { name: "infoChanged" }
        Signal { name: "videoCaptureStatusChanged" }
        Signal { name: "photoCaptureStatusChanged" }
        Signal { name: "photoCaptureModeChanged" }
        Signal { name: "photoLapseChanged" }
        Signal { name: "photoLapseCountChanged" }
        Signal { name: "cameraModeChanged" }
        Signal { name: "activeSettingsChanged" }
        Signal { name: "storageFreeChanged" }
        Signal { name: "storageTotalChanged" }
        Signal { name: "batteryRemainingChanged" }
        Signal {
            name: "dataReady"
            Parameter { name: "data"; type: "QByteArray" }
        }
        Signal { name: "parametersReady" }
        Signal { name: "zoomLevelChanged" }
        Signal { name: "focusLevelChanged" }
        Signal { name: "streamsChanged" }
        Signal { name: "currentStreamChanged" }
        Signal { name: "thermalStreamChanged" }
        Signal { name: "autoStreamChanged" }
        Signal { name: "recordTimeChanged" }
        Signal { name: "streamLabelsChanged" }
        Signal { name: "trackingEnabledChanged" }
        Signal { name: "trackingImageStatusChanged" }
        Signal { name: "thermalModeChanged" }
        Signal { name: "thermalOpacityChanged" }
        Signal { name: "storageStatusChanged" }
        Method { name: "_paramDone" }
        Method { name: "setCameraModeVideo" }
        Method { name: "setCameraModePhoto" }
        Method { name: "toggleCameraMode" }
        Method { name: "takePhoto"; type: "bool" }
        Method { name: "stopTakePhoto"; type: "bool" }
        Method { name: "startVideoRecording"; type: "bool" }
        Method { name: "stopVideoRecording"; type: "bool" }
        Method { name: "toggleVideoRecording"; type: "bool" }
        Method { name: "resetSettings" }
        Method {
            name: "formatCard"
            Parameter { name: "id"; type: "int" }
        }
        Method { name: "formatCard"; isCloned: true }
        Method {
            name: "stepZoom"
            Parameter { name: "direction"; type: "int" }
        }
        Method {
            name: "startZoom"
            Parameter { name: "direction"; type: "int" }
        }
        Method { name: "stopZoom" }
        Method { name: "stopStream" }
        Method { name: "resumeStream" }
        Method {
            name: "startTracking"
            Parameter { name: "rec"; type: "QRectF" }
        }
        Method {
            name: "startTracking"
            Parameter { name: "point"; type: "QPointF" }
            Parameter { name: "radius"; type: "double" }
        }
        Method { name: "stopTracking" }
    }
    Component {
        file: "MavlinkSettings.h"
        name: "MavlinkSettings"
        accessSemantics: "reference"
        prototype: "SettingsGroup"
        exports: ["QGC/MavlinkSettings 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "telemetrySave"
            type: "Fact"
            isPointer: true
            read: "telemetrySave"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "telemetrySaveNotArmed"
            type: "Fact"
            isPointer: true
            read: "telemetrySaveNotArmed"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "saveCsvTelemetry"
            type: "Fact"
            isPointer: true
            read: "saveCsvTelemetry"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "forwardMavlink"
            type: "Fact"
            isPointer: true
            read: "forwardMavlink"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "forwardMavlinkHostName"
            type: "Fact"
            isPointer: true
            read: "forwardMavlinkHostName"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "forwardMavlinkAPMSupportHostName"
            type: "Fact"
            isPointer: true
            read: "forwardMavlinkAPMSupportHostName"
            index: 5
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "mavlink2SigningKey"
            type: "Fact"
            isPointer: true
            read: "mavlink2SigningKey"
            index: 6
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "sendGCSHeartbeat"
            type: "Fact"
            isPointer: true
            read: "sendGCSHeartbeat"
            index: 7
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "gcsMavlinkSystemID"
            type: "Fact"
            isPointer: true
            read: "gcsMavlinkSystemID"
            index: 8
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "requireMatchingMavlinkVersions"
            type: "Fact"
            isPointer: true
            read: "requireMatchingMavlinkVersions"
            index: 9
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "apmStartMavlinkStreams"
            type: "Fact"
            isPointer: true
            read: "apmStartMavlinkStreams"
            index: 10
            isReadonly: true
            isConstant: true
        }
        Method { name: "_mavlink2SigningKeyChanged" }
    }
    Component {
        file: "MissionCommandTree.h"
        name: "MissionCommandTree"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/MissionCommandTree 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Method {
            name: "categoriesForVehicle"
            type: "QStringList"
            Parameter { name: "vehicle"; type: "Vehicle"; isPointer: true }
        }
        Method {
            name: "getCommandsForCategory"
            type: "QVariantList"
            Parameter { name: "vehicle"; type: "Vehicle"; isPointer: true }
            Parameter { name: "category"; type: "QString" }
            Parameter { name: "showFlyThroughCommands"; type: "bool" }
        }
    }
    Component {
        file: "MissionController.h"
        name: "MissionController"
        accessSemantics: "reference"
        prototype: "PlanElementController"
        exports: ["QGC/MissionController 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Enum {
            name: "SendToVehiclePreCheckState"
            values: [
                "SendToVehiclePreCheckStateOk",
                "SendToVehiclePreCheckStateNoActiveVehicle",
                "SendToVehiclePreCheckStateFirwmareVehicleMismatch",
                "SendToVehiclePreCheckStateActiveMission"
            ]
        }
        Property {
            name: "visualItems"
            type: "QmlObjectListModel"
            isPointer: true
            read: "visualItems"
            notify: "visualItemsChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "simpleFlightPathSegments"
            type: "QmlObjectListModel"
            isPointer: true
            read: "simpleFlightPathSegments"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "directionArrows"
            type: "QmlObjectListModel"
            isPointer: true
            read: "directionArrows"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "incompleteComplexItemLines"
            type: "QmlObjectListModel"
            isPointer: true
            read: "incompleteComplexItemLines"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "complexMissionItemNames"
            type: "QStringList"
            read: "complexMissionItemNames"
            notify: "complexMissionItemNamesChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "plannedHomePosition"
            type: "QGeoCoordinate"
            read: "plannedHomePosition"
            notify: "plannedHomePositionChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "previousCoordinate"
            type: "QGeoCoordinate"
            notify: "previousCoordinateChanged"
            index: 6
        }
        Property {
            name: "splitSegment"
            type: "FlightPathSegment"
            isPointer: true
            notify: "splitSegmentChanged"
            index: 7
        }
        Property {
            name: "progressPct"
            type: "double"
            read: "progressPct"
            notify: "progressPctChanged"
            index: 8
            isReadonly: true
        }
        Property {
            name: "missionItemCount"
            type: "int"
            read: "missionItemCount"
            notify: "missionItemCountChanged"
            index: 9
            isReadonly: true
        }
        Property {
            name: "currentMissionIndex"
            type: "int"
            read: "currentMissionIndex"
            notify: "currentMissionIndexChanged"
            index: 10
            isReadonly: true
        }
        Property {
            name: "resumeMissionIndex"
            type: "int"
            read: "resumeMissionIndex"
            notify: "resumeMissionIndexChanged"
            index: 11
            isReadonly: true
        }
        Property {
            name: "currentPlanViewSeqNum"
            type: "int"
            read: "currentPlanViewSeqNum"
            notify: "currentPlanViewSeqNumChanged"
            index: 12
            isReadonly: true
        }
        Property {
            name: "currentPlanViewVIIndex"
            type: "int"
            read: "currentPlanViewVIIndex"
            notify: "currentPlanViewVIIndexChanged"
            index: 13
            isReadonly: true
        }
        Property {
            name: "currentPlanViewItem"
            type: "VisualMissionItem"
            isPointer: true
            read: "currentPlanViewItem"
            notify: "currentPlanViewItemChanged"
            index: 14
            isReadonly: true
        }
        Property {
            name: "takeoffMissionItem"
            type: "TakeoffMissionItem"
            isPointer: true
            read: "takeoffMissionItem"
            notify: "takeoffMissionItemChanged"
            index: 15
            isReadonly: true
        }
        Property {
            name: "missionTotalDistance"
            type: "double"
            read: "missionTotalDistance"
            notify: "missionTotalDistanceChanged"
            index: 16
            isReadonly: true
        }
        Property {
            name: "missionPlannedDistance"
            type: "double"
            read: "missionPlannedDistance"
            notify: "missionPlannedDistanceChanged"
            index: 17
            isReadonly: true
        }
        Property {
            name: "missionTime"
            type: "double"
            read: "missionTime"
            notify: "missionTimeChanged"
            index: 18
            isReadonly: true
        }
        Property {
            name: "missionHoverDistance"
            type: "double"
            read: "missionHoverDistance"
            notify: "missionHoverDistanceChanged"
            index: 19
            isReadonly: true
        }
        Property {
            name: "missionCruiseDistance"
            type: "double"
            read: "missionCruiseDistance"
            notify: "missionCruiseDistanceChanged"
            index: 20
            isReadonly: true
        }
        Property {
            name: "missionHoverTime"
            type: "double"
            read: "missionHoverTime"
            notify: "missionHoverTimeChanged"
            index: 21
            isReadonly: true
        }
        Property {
            name: "missionCruiseTime"
            type: "double"
            read: "missionCruiseTime"
            notify: "missionCruiseTimeChanged"
            index: 22
            isReadonly: true
        }
        Property {
            name: "missionMaxTelemetry"
            type: "double"
            read: "missionMaxTelemetry"
            notify: "missionMaxTelemetryChanged"
            index: 23
            isReadonly: true
        }
        Property {
            name: "batteryChangePoint"
            type: "int"
            read: "batteryChangePoint"
            notify: "batteryChangePointChanged"
            index: 24
            isReadonly: true
        }
        Property {
            name: "batteriesRequired"
            type: "int"
            read: "batteriesRequired"
            notify: "batteriesRequiredChanged"
            index: 25
            isReadonly: true
        }
        Property {
            name: "travelBoundingCube"
            type: "QGCGeoBoundingCube"
            isPointer: true
            read: "travelBoundingCube"
            notify: "missionBoundingCubeChanged"
            index: 26
            isReadonly: true
        }
        Property {
            name: "surveyComplexItemName"
            type: "QString"
            read: "surveyComplexItemName"
            index: 27
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "corridorScanComplexItemName"
            type: "QString"
            read: "corridorScanComplexItemName"
            index: 28
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "structureScanComplexItemName"
            type: "QString"
            read: "structureScanComplexItemName"
            index: 29
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "onlyInsertTakeoffValid"
            type: "bool"
            notify: "onlyInsertTakeoffValidChanged"
            index: 30
        }
        Property {
            name: "isInsertTakeoffValid"
            type: "bool"
            notify: "isInsertTakeoffValidChanged"
            index: 31
        }
        Property {
            name: "isInsertLandValid"
            type: "bool"
            notify: "isInsertLandValidChanged"
            index: 32
        }
        Property { name: "hasLandItem"; type: "bool"; notify: "hasLandItemChanged"; index: 33 }
        Property {
            name: "multipleLandPatternsAllowed"
            type: "bool"
            read: "multipleLandPatternsAllowed"
            notify: "multipleLandPatternsAllowedChanged"
            index: 34
            isReadonly: true
        }
        Property { name: "isROIActive"; type: "bool"; notify: "isROIActiveChanged"; index: 35 }
        Property {
            name: "isROIBeginCurrentItem"
            type: "bool"
            notify: "isROIBeginCurrentItemChanged"
            index: 36
        }
        Property {
            name: "flyThroughCommandsAllowed"
            type: "bool"
            notify: "flyThroughCommandsAllowedChanged"
            index: 37
        }
        Property { name: "minAMSLAltitude"; type: "double"; notify: "minAMSLAltitudeChanged"; index: 38 }
        Property { name: "maxAMSLAltitude"; type: "double"; notify: "maxAMSLAltitudeChanged"; index: 39 }
        Property {
            name: "globalAltitudeMode"
            type: "QGroundControlQmlGlobal::AltMode"
            read: "globalAltitudeMode"
            write: "setGlobalAltitudeMode"
            notify: "globalAltitudeModeChanged"
            index: 40
        }
        Property {
            name: "globalAltitudeModeDefault"
            type: "QGroundControlQmlGlobal::AltMode"
            read: "globalAltitudeModeDefault"
            notify: "globalAltitudeModeChanged"
            index: 41
            isReadonly: true
        }
        Signal { name: "visualItemsChanged" }
        Signal { name: "splitSegmentChanged" }
        Signal { name: "newItemsFromVehicle" }
        Signal {
            name: "missionTotalDistanceChanged"
            Parameter { name: "missionTotalDistance"; type: "double" }
        }
        Signal {
            name: "missionPlannedDistanceChanged"
            Parameter { name: "missionPlannedDistance"; type: "double" }
        }
        Signal { name: "missionTimeChanged" }
        Signal {
            name: "missionHoverDistanceChanged"
            Parameter { name: "missionHoverDistance"; type: "double" }
        }
        Signal { name: "missionHoverTimeChanged" }
        Signal {
            name: "missionCruiseDistanceChanged"
            Parameter { name: "missionCruiseDistance"; type: "double" }
        }
        Signal { name: "missionCruiseTimeChanged" }
        Signal {
            name: "missionMaxTelemetryChanged"
            Parameter { name: "missionMaxTelemetry"; type: "double" }
        }
        Signal { name: "complexMissionItemNamesChanged" }
        Signal { name: "resumeMissionIndexChanged" }
        Signal { name: "resumeMissionReady" }
        Signal { name: "resumeMissionUploadFail" }
        Signal {
            name: "batteryChangePointChanged"
            Parameter { name: "batteryChangePoint"; type: "int" }
        }
        Signal {
            name: "batteriesRequiredChanged"
            Parameter { name: "batteriesRequired"; type: "int" }
        }
        Signal {
            name: "plannedHomePositionChanged"
            Parameter { name: "plannedHomePosition"; type: "QGeoCoordinate" }
        }
        Signal {
            name: "progressPctChanged"
            Parameter { name: "progressPct"; type: "double" }
        }
        Signal {
            name: "currentMissionIndexChanged"
            Parameter { name: "currentMissionIndex"; type: "int" }
        }
        Signal { name: "currentPlanViewSeqNumChanged" }
        Signal { name: "currentPlanViewVIIndexChanged" }
        Signal { name: "currentPlanViewItemChanged" }
        Signal { name: "takeoffMissionItemChanged" }
        Signal { name: "missionBoundingCubeChanged" }
        Signal {
            name: "missionItemCountChanged"
            Parameter { name: "missionItemCount"; type: "int" }
        }
        Signal { name: "onlyInsertTakeoffValidChanged" }
        Signal { name: "isInsertTakeoffValidChanged" }
        Signal { name: "isInsertLandValidChanged" }
        Signal { name: "hasLandItemChanged" }
        Signal { name: "multipleLandPatternsAllowedChanged" }
        Signal { name: "isROIActiveChanged" }
        Signal { name: "isROIBeginCurrentItemChanged" }
        Signal { name: "flyThroughCommandsAllowedChanged" }
        Signal { name: "previousCoordinateChanged" }
        Signal {
            name: "minAMSLAltitudeChanged"
            Parameter { name: "minAMSLAltitude"; type: "double" }
        }
        Signal {
            name: "maxAMSLAltitudeChanged"
            Parameter { name: "maxAMSLAltitude"; type: "double" }
        }
        Signal { name: "recalcTerrainProfile" }
        Signal { name: "_recalcMissionFlightStatusSignal" }
        Signal { name: "_recalcFlightPathSegmentsSignal" }
        Signal { name: "globalAltitudeModeChanged" }
        Method {
            name: "_newMissionItemsAvailableFromVehicle"
            Parameter { name: "removeAllRequested"; type: "bool" }
        }
        Method { name: "_itemCommandChanged" }
        Method {
            name: "_inProgressChanged"
            Parameter { name: "inProgress"; type: "bool" }
        }
        Method {
            name: "_currentMissionIndexChanged"
            Parameter { name: "sequenceNumber"; type: "int" }
        }
        Method { name: "_recalcFlightPathSegments" }
        Method { name: "_recalcMissionFlightStatus" }
        Method { name: "_updateContainsItems" }
        Method {
            name: "_progressPctChanged"
            Parameter { name: "progressPct"; type: "double" }
        }
        Method {
            name: "_visualItemsDirtyChanged"
            Parameter { name: "dirty"; type: "bool" }
        }
        Method {
            name: "_managerSendComplete"
            Parameter { name: "error"; type: "bool" }
        }
        Method {
            name: "_managerRemoveAllComplete"
            Parameter { name: "error"; type: "bool" }
        }
        Method { name: "_updateTimeout" }
        Method { name: "_complexBoundingBoxChanged" }
        Method { name: "_recalcAll" }
        Method {
            name: "_managerVehicleChanged"
            Parameter { name: "managerVehicle"; type: "Vehicle"; isPointer: true }
        }
        Method { name: "_forceRecalcOfAllowedBits" }
        Method {
            name: "removeVisualItem"
            Parameter { name: "viIndex"; type: "int" }
        }
        Method {
            name: "insertSimpleMissionItem"
            type: "VisualMissionItem"
            isPointer: true
            Parameter { name: "coordinate"; type: "QGeoCoordinate" }
            Parameter { name: "visualItemIndex"; type: "int" }
            Parameter { name: "makeCurrentItem"; type: "bool" }
        }
        Method {
            name: "insertSimpleMissionItem"
            type: "VisualMissionItem"
            isPointer: true
            isCloned: true
            Parameter { name: "coordinate"; type: "QGeoCoordinate" }
            Parameter { name: "visualItemIndex"; type: "int" }
        }
        Method {
            name: "insertTakeoffItem"
            type: "VisualMissionItem"
            isPointer: true
            Parameter { name: "coordinate"; type: "QGeoCoordinate" }
            Parameter { name: "visualItemIndex"; type: "int" }
            Parameter { name: "makeCurrentItem"; type: "bool" }
        }
        Method {
            name: "insertTakeoffItem"
            type: "VisualMissionItem"
            isPointer: true
            isCloned: true
            Parameter { name: "coordinate"; type: "QGeoCoordinate" }
            Parameter { name: "visualItemIndex"; type: "int" }
        }
        Method {
            name: "insertLandItem"
            type: "VisualMissionItem"
            isPointer: true
            Parameter { name: "coordinate"; type: "QGeoCoordinate" }
            Parameter { name: "visualItemIndex"; type: "int" }
            Parameter { name: "makeCurrentItem"; type: "bool" }
        }
        Method {
            name: "insertLandItem"
            type: "VisualMissionItem"
            isPointer: true
            isCloned: true
            Parameter { name: "coordinate"; type: "QGeoCoordinate" }
            Parameter { name: "visualItemIndex"; type: "int" }
        }
        Method {
            name: "insertROIMissionItem"
            type: "VisualMissionItem"
            isPointer: true
            Parameter { name: "coordinate"; type: "QGeoCoordinate" }
            Parameter { name: "visualItemIndex"; type: "int" }
            Parameter { name: "makeCurrentItem"; type: "bool" }
        }
        Method {
            name: "insertROIMissionItem"
            type: "VisualMissionItem"
            isPointer: true
            isCloned: true
            Parameter { name: "coordinate"; type: "QGeoCoordinate" }
            Parameter { name: "visualItemIndex"; type: "int" }
        }
        Method {
            name: "insertCancelROIMissionItem"
            type: "VisualMissionItem"
            isPointer: true
            Parameter { name: "visualItemIndex"; type: "int" }
            Parameter { name: "makeCurrentItem"; type: "bool" }
        }
        Method {
            name: "insertCancelROIMissionItem"
            type: "VisualMissionItem"
            isPointer: true
            isCloned: true
            Parameter { name: "visualItemIndex"; type: "int" }
        }
        Method {
            name: "insertComplexMissionItem"
            type: "VisualMissionItem"
            isPointer: true
            Parameter { name: "itemName"; type: "QString" }
            Parameter { name: "mapCenterCoordinate"; type: "QGeoCoordinate" }
            Parameter { name: "visualItemIndex"; type: "int" }
            Parameter { name: "makeCurrentItem"; type: "bool" }
        }
        Method {
            name: "insertComplexMissionItem"
            type: "VisualMissionItem"
            isPointer: true
            isCloned: true
            Parameter { name: "itemName"; type: "QString" }
            Parameter { name: "mapCenterCoordinate"; type: "QGeoCoordinate" }
            Parameter { name: "visualItemIndex"; type: "int" }
        }
        Method {
            name: "insertComplexMissionItemFromKMLOrSHP"
            type: "VisualMissionItem"
            isPointer: true
            Parameter { name: "itemName"; type: "QString" }
            Parameter { name: "file"; type: "QString" }
            Parameter { name: "visualItemIndex"; type: "int" }
            Parameter { name: "makeCurrentItem"; type: "bool" }
        }
        Method {
            name: "insertComplexMissionItemFromKMLOrSHP"
            type: "VisualMissionItem"
            isPointer: true
            isCloned: true
            Parameter { name: "itemName"; type: "QString" }
            Parameter { name: "file"; type: "QString" }
            Parameter { name: "visualItemIndex"; type: "int" }
        }
        Method {
            name: "resumeMission"
            Parameter { name: "resumeIndex"; type: "int" }
        }
        Method { name: "applyDefaultMissionAltitude" }
        Method {
            name: "setCurrentPlanViewSeqNum"
            Parameter { name: "sequenceNumber"; type: "int" }
            Parameter { name: "force"; type: "bool" }
        }
        Method { name: "sendToVehiclePreCheck"; type: "SendToVehiclePreCheckState" }
    }
    Component {
        file: "MissionItem.h"
        name: "MissionItem"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/MissionItem 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Signal {
            name: "isCurrentItemChanged"
            Parameter { name: "isCurrentItem"; type: "bool" }
        }
        Signal {
            name: "sequenceNumberChanged"
            Parameter { name: "sequenceNumber"; type: "int" }
        }
        Signal {
            name: "specifiedFlightSpeedChanged"
            Parameter { name: "flightSpeed"; type: "double" }
        }
        Signal {
            name: "specifiedGimbalYawChanged"
            Parameter { name: "gimbalYaw"; type: "double" }
        }
        Signal {
            name: "specifiedGimbalPitchChanged"
            Parameter { name: "gimbalPitch"; type: "double" }
        }
        Method {
            name: "_param1Changed"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "_param2Changed"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "_param3Changed"
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component {
        file: "MissionManager.h"
        name: "MissionManager"
        accessSemantics: "reference"
        prototype: "PlanManager"
        exports: ["QGC/MissionManager 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Method {
            name: "_mavlinkMessageReceived"
            Parameter { name: "message"; type: "mavlink_message_t" }
        }
    }
    Component {
        file: "MultiVehicleManager.h"
        name: "MultiVehicleManager"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/MultiVehicleManager 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "activeVehicleAvailable"
            type: "bool"
            read: "_getActiveVehicleAvailable"
            notify: "activeVehicleAvailableChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "parameterReadyVehicleAvailable"
            type: "bool"
            read: "_getParameterReadyVehicleAvailable"
            notify: "parameterReadyVehicleAvailableChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "activeVehicle"
            type: "Vehicle"
            isPointer: true
            read: "activeVehicle"
            write: "setActiveVehicle"
            notify: "activeVehicleChanged"
            index: 2
        }
        Property {
            name: "vehicles"
            type: "QmlObjectListModel"
            isPointer: true
            read: "vehicles"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "selectedVehicles"
            type: "QmlObjectListModel"
            isPointer: true
            read: "selectedVehicles"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "offlineEditingVehicle"
            type: "Vehicle"
            isPointer: true
            read: "offlineEditingVehicle"
            index: 5
            isReadonly: true
            isConstant: true
        }
        Signal {
            name: "vehicleAdded"
            Parameter { name: "vehicle"; type: "Vehicle"; isPointer: true }
        }
        Signal {
            name: "vehicleRemoved"
            Parameter { name: "vehicle"; type: "Vehicle"; isPointer: true }
        }
        Signal {
            name: "activeVehicleAvailableChanged"
            Parameter { name: "activeVehicleAvailable"; type: "bool" }
        }
        Signal {
            name: "parameterReadyVehicleAvailableChanged"
            Parameter { name: "parameterReadyVehicleAvailable"; type: "bool" }
        }
        Signal {
            name: "activeVehicleChanged"
            Parameter { name: "activeVehicle"; type: "Vehicle"; isPointer: true }
        }
        Method {
            name: "_deleteVehiclePhase1"
            Parameter { name: "vehicle"; type: "Vehicle"; isPointer: true }
        }
        Method {
            name: "_deleteVehiclePhase2"
            Parameter { name: "vehicle"; type: "Vehicle"; isPointer: true }
        }
        Method {
            name: "_setActiveVehiclePhase2"
            Parameter { name: "vehicle"; type: "Vehicle"; isPointer: true }
        }
        Method {
            name: "_vehicleParametersReadyChanged"
            Parameter { name: "parametersReady"; type: "bool" }
        }
        Method { name: "_sendGCSHeartbeat" }
        Method {
            name: "_vehicleHeartbeatInfo"
            Parameter { name: "link"; type: "LinkInterface"; isPointer: true }
            Parameter { name: "vehicleId"; type: "int" }
            Parameter { name: "componentId"; type: "int" }
            Parameter { name: "vehicleFirmwareType"; type: "int" }
            Parameter { name: "vehicleType"; type: "int" }
        }
        Method {
            name: "_requestProtocolVersion"
            Parameter { name: "version"; type: "uint" }
        }
        Method {
            name: "getVehicleById"
            type: "Vehicle"
            isPointer: true
            Parameter { name: "vehicleId"; type: "int" }
        }
        Method {
            name: "selectVehicle"
            Parameter { name: "vehicleId"; type: "int" }
        }
        Method {
            name: "deselectVehicle"
            Parameter { name: "vehicleId"; type: "int" }
        }
        Method { name: "deselectAllVehicles" }
    }
    Component {
        file: "OfflineMapsSettings.h"
        name: "OfflineMapsSettings"
        accessSemantics: "reference"
        prototype: "SettingsGroup"
        exports: ["QGC/OfflineMapsSettings 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "minZoomLevelDownload"
            type: "Fact"
            isPointer: true
            read: "minZoomLevelDownload"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "maxZoomLevelDownload"
            type: "Fact"
            isPointer: true
            read: "maxZoomLevelDownload"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "maxTilesForDownload"
            type: "Fact"
            isPointer: true
            read: "maxTilesForDownload"
            index: 2
            isReadonly: true
            isConstant: true
        }
    }
    Component {
        file: "OsmParser.h"
        name: "OsmParser"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/OsmParser 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Signal {
            name: "gpsRefChanged"
            Parameter { name: "newGpsRef"; type: "QGeoCoordinate" }
            Parameter { name: "isRefSet"; type: "bool" }
        }
        Signal { name: "mapChanged" }
        Signal { name: "buildingLevelHeightChanged" }
        Method {
            name: "setBuildingLevelHeight"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "osmParserFinished"
            Parameter { name: "isValid"; type: "bool" }
        }
    }
    Component {
        file: "PX4SimpleFlightModesController.h"
        name: "PX4SimpleFlightModesController"
        accessSemantics: "reference"
        prototype: "FactPanelController"
        exports: ["QGC/PX4SimpleFlightModesController 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "activeFlightMode"
            type: "int"
            read: "activeFlightMode"
            notify: "activeFlightModeChanged"
            index: 0
            isReadonly: true
        }
        Property { name: "channelCount"; type: "int"; index: 1; isConstant: true }
        Property {
            name: "rcChannelValues"
            type: "QVariantList"
            notify: "rcChannelValuesChanged"
            index: 2
        }
        Signal {
            name: "activeFlightModeChanged"
            Parameter { name: "activeFlightMode"; type: "int" }
        }
        Signal { name: "channelOptionEnabledChanged" }
        Signal { name: "rcChannelValuesChanged" }
        Method {
            name: "_rcChannelsChanged"
            Parameter { name: "channelCount"; type: "int" }
            Parameter { name: "pwmValues"; type: "int[QGCMAVLink::maxRcChannels]" }
        }
    }
    Component {
        file: "ParameterEditorController.h"
        name: "ParameterEditorController"
        accessSemantics: "reference"
        prototype: "FactPanelController"
        exports: ["QGC/ParameterEditorController 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "searchText"; type: "QString"; notify: "searchTextChanged"; index: 0 }
        Property {
            name: "categories"
            type: "QmlObjectListModel"
            isPointer: true
            read: "categories"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "currentCategory"
            type: "QObject"
            isPointer: true
            read: "currentCategory"
            write: "setCurrentCategory"
            notify: "currentCategoryChanged"
            index: 2
        }
        Property {
            name: "currentGroup"
            type: "QObject"
            isPointer: true
            read: "currentGroup"
            write: "setCurrentGroup"
            notify: "currentGroupChanged"
            index: 3
        }
        Property {
            name: "parameters"
            type: "QAbstractTableModel"
            isPointer: true
            notify: "parametersChanged"
            index: 4
        }
        Property { name: "showModifiedOnly"; type: "bool"; notify: "showModifiedOnlyChanged"; index: 5 }
        Property { name: "diffOtherVehicle"; type: "bool"; notify: "diffOtherVehicleChanged"; index: 6 }
        Property {
            name: "diffMultipleComponents"
            type: "bool"
            notify: "diffMultipleComponentsChanged"
            index: 7
        }
        Property {
            name: "diffList"
            type: "QmlObjectListModel"
            isPointer: true
            read: "diffList"
            index: 8
            isReadonly: true
            isConstant: true
        }
        Signal {
            name: "searchTextChanged"
            Parameter { name: "searchText"; type: "QString" }
        }
        Signal { name: "currentCategoryChanged" }
        Signal { name: "currentGroupChanged" }
        Signal { name: "showModifiedOnlyChanged" }
        Signal {
            name: "diffOtherVehicleChanged"
            Parameter { name: "diffOtherVehicle"; type: "bool" }
        }
        Signal {
            name: "diffMultipleComponentsChanged"
            Parameter { name: "diffMultipleComponents"; type: "bool" }
        }
        Signal { name: "parametersChanged" }
        Method { name: "_currentCategoryChanged" }
        Method { name: "_currentGroupChanged" }
        Method { name: "_searchTextChanged" }
        Method { name: "_buildLists" }
        Method {
            name: "_buildListsForComponent"
            Parameter { name: "compId"; type: "int" }
        }
        Method {
            name: "_factAdded"
            Parameter { name: "compId"; type: "int" }
            Parameter { name: "fact"; type: "Fact"; isPointer: true }
        }
        Method {
            name: "saveToFile"
            Parameter { name: "filename"; type: "QString" }
        }
        Method {
            name: "buildDiffFromFile"
            type: "bool"
            Parameter { name: "filename"; type: "QString" }
        }
        Method { name: "clearDiff" }
        Method { name: "sendDiff" }
        Method { name: "refresh" }
        Method { name: "resetAllToDefaults" }
        Method { name: "resetAllToVehicleConfiguration" }
    }
    Component {
        file: "ParameterManager.h"
        name: "ParameterManager"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/ParameterManager 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "parametersReady"
            type: "bool"
            read: "parametersReady"
            notify: "parametersReadyChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "missingParameters"
            type: "bool"
            read: "missingParameters"
            notify: "missingParametersChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "loadProgress"
            type: "double"
            read: "loadProgress"
            notify: "loadProgressChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "pendingWrites"
            type: "bool"
            read: "pendingWrites"
            notify: "pendingWritesChanged"
            index: 3
            isReadonly: true
        }
        Signal {
            name: "parametersReadyChanged"
            Parameter { name: "parametersReady"; type: "bool" }
        }
        Signal {
            name: "missingParametersChanged"
            Parameter { name: "missingParameters"; type: "bool" }
        }
        Signal {
            name: "loadProgressChanged"
            Parameter { name: "value"; type: "float" }
        }
        Signal {
            name: "pendingWritesChanged"
            Parameter { name: "pendingWrites"; type: "bool" }
        }
        Signal {
            name: "factAdded"
            Parameter { name: "componentId"; type: "int" }
            Parameter { name: "fact"; type: "Fact"; isPointer: true }
        }
        Method {
            name: "_factRawValueUpdated"
            Parameter { name: "rawValue"; type: "QVariant" }
        }
    }
    Component {
        file: "PlanElementController.h"
        name: "PlanElementController"
        accessSemantics: "reference"
        prototype: "QObject"
        Property {
            name: "masterController"
            type: "PlanMasterController"
            isPointer: true
            read: "masterController"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "supported"
            type: "bool"
            read: "supported"
            notify: "supportedChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "containsItems"
            type: "bool"
            read: "containsItems"
            notify: "containsItemsChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "syncInProgress"
            type: "bool"
            read: "syncInProgress"
            notify: "syncInProgressChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "dirty"
            type: "bool"
            read: "dirty"
            write: "setDirty"
            notify: "dirtyChanged"
            index: 4
        }
        Signal {
            name: "supportedChanged"
            Parameter { name: "supported"; type: "bool" }
        }
        Signal {
            name: "containsItemsChanged"
            Parameter { name: "containsItems"; type: "bool" }
        }
        Signal {
            name: "syncInProgressChanged"
            Parameter { name: "syncInProgress"; type: "bool" }
        }
        Signal {
            name: "dirtyChanged"
            Parameter { name: "dirty"; type: "bool" }
        }
        Signal { name: "sendComplete" }
        Signal { name: "removeAllComplete" }
    }
    Component {
        file: "PlanManager.h"
        name: "PlanManager"
        accessSemantics: "reference"
        prototype: "QObject"
        Signal {
            name: "newMissionItemsAvailable"
            Parameter { name: "removeAllRequested"; type: "bool" }
        }
        Signal {
            name: "inProgressChanged"
            Parameter { name: "inProgress"; type: "bool" }
        }
        Signal {
            name: "error"
            Parameter { name: "errorCode"; type: "int" }
            Parameter { name: "errorMsg"; type: "QString" }
        }
        Signal {
            name: "currentIndexChanged"
            Parameter { name: "currentIndex"; type: "int" }
        }
        Signal {
            name: "lastCurrentIndexChanged"
            Parameter { name: "lastCurrentIndex"; type: "int" }
        }
        Signal {
            name: "progressPctChanged"
            Parameter { name: "progressPercentPct"; type: "double" }
        }
        Signal {
            name: "removeAllComplete"
            Parameter { name: "error"; type: "bool" }
        }
        Signal {
            name: "sendComplete"
            Parameter { name: "error"; type: "bool" }
        }
        Signal { name: "resumeMissionReady" }
        Signal { name: "resumeMissionUploadFail" }
        Method {
            name: "_mavlinkMessageReceived"
            Parameter { name: "message"; type: "mavlink_message_t" }
        }
        Method { name: "_ackTimeout" }
    }
    Component {
        file: "PlanMasterController.h"
        name: "PlanMasterController"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/PlanMasterController 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "flyView"; type: "bool"; index: 0 }
        Property {
            name: "controllerVehicle"
            type: "Vehicle"
            isPointer: true
            read: "controllerVehicle"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "managerVehicle"
            type: "Vehicle"
            isPointer: true
            read: "managerVehicle"
            notify: "managerVehicleChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "missionController"
            type: "MissionController"
            isPointer: true
            read: "missionController"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "geoFenceController"
            type: "GeoFenceController"
            isPointer: true
            read: "geoFenceController"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "rallyPointController"
            type: "RallyPointController"
            isPointer: true
            read: "rallyPointController"
            index: 5
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "offline"
            type: "bool"
            read: "offline"
            notify: "offlineChanged"
            index: 6
            isReadonly: true
        }
        Property {
            name: "containsItems"
            type: "bool"
            read: "containsItems"
            notify: "containsItemsChanged"
            index: 7
            isReadonly: true
        }
        Property {
            name: "syncInProgress"
            type: "bool"
            read: "syncInProgress"
            notify: "syncInProgressChanged"
            index: 8
            isReadonly: true
        }
        Property {
            name: "dirty"
            type: "bool"
            read: "dirty"
            write: "setDirty"
            notify: "dirtyChanged"
            index: 9
        }
        Property {
            name: "fileExtension"
            type: "QString"
            read: "fileExtension"
            index: 10
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "kmlFileExtension"
            type: "QString"
            read: "kmlFileExtension"
            index: 11
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "currentPlanFile"
            type: "QString"
            read: "currentPlanFile"
            notify: "currentPlanFileChanged"
            index: 12
            isReadonly: true
        }
        Property {
            name: "loadNameFilters"
            type: "QStringList"
            read: "loadNameFilters"
            index: 13
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "saveNameFilters"
            type: "QStringList"
            read: "saveNameFilters"
            index: 14
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "planCreators"
            type: "QmlObjectListModel"
            isPointer: true
            notify: "planCreatorsChanged"
            index: 15
        }
        Signal {
            name: "containsItemsChanged"
            Parameter { name: "containsItems"; type: "bool" }
        }
        Signal { name: "syncInProgressChanged" }
        Signal {
            name: "dirtyChanged"
            Parameter { name: "dirty"; type: "bool" }
        }
        Signal {
            name: "offlineChanged"
            Parameter { name: "offlineEditing"; type: "bool" }
        }
        Signal { name: "currentPlanFileChanged" }
        Signal {
            name: "planCreatorsChanged"
            Parameter { name: "planCreators"; type: "QmlObjectListModel"; isPointer: true }
        }
        Signal {
            name: "managerVehicleChanged"
            Parameter { name: "managerVehicle"; type: "Vehicle"; isPointer: true }
        }
        Signal { name: "promptForPlanUsageOnVehicleChange" }
        Method {
            name: "_activeVehicleChanged"
            Parameter { name: "activeVehicle"; type: "Vehicle"; isPointer: true }
        }
        Method { name: "_loadMissionComplete" }
        Method { name: "_loadGeoFenceComplete" }
        Method { name: "_loadRallyPointsComplete" }
        Method { name: "_sendMissionComplete" }
        Method { name: "_sendGeoFenceComplete" }
        Method { name: "_sendRallyPointsComplete" }
        Method { name: "_updateOverallDirty" }
        Method { name: "_updatePlanCreatorsList" }
        Method { name: "start" }
        Method {
            name: "startStaticActiveVehicle"
            Parameter { name: "vehicle"; type: "Vehicle"; isPointer: true }
            Parameter { name: "deleteWhenSendCompleted"; type: "bool" }
        }
        Method {
            name: "startStaticActiveVehicle"
            isCloned: true
            Parameter { name: "vehicle"; type: "Vehicle"; isPointer: true }
        }
        Method { name: "readyForSaveState"; type: "int" }
        Method { name: "showPlanFromManagerVehicle" }
        Method { name: "loadFromVehicle" }
        Method { name: "sendToVehicle" }
        Method {
            name: "loadFromFile"
            Parameter { name: "filename"; type: "QString" }
        }
        Method { name: "saveToCurrent" }
        Method {
            name: "saveToFile"
            Parameter { name: "filename"; type: "QString" }
        }
        Method {
            name: "saveToKml"
            Parameter { name: "filename"; type: "QString" }
        }
        Method { name: "removeAll" }
        Method { name: "removeAllFromVehicle" }
    }
    Component {
        file: "PlanViewSettings.h"
        name: "PlanViewSettings"
        accessSemantics: "reference"
        prototype: "SettingsGroup"
        exports: ["QGC/PlanViewSettings 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "displayPresetsTabFirst"
            type: "Fact"
            isPointer: true
            read: "displayPresetsTabFirst"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "showMissionItemStatus"
            type: "Fact"
            isPointer: true
            read: "showMissionItemStatus"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "useConditionGate"
            type: "Fact"
            isPointer: true
            read: "useConditionGate"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "takeoffItemNotRequired"
            type: "Fact"
            isPointer: true
            read: "takeoffItemNotRequired"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "allowMultipleLandingPatterns"
            type: "Fact"
            isPointer: true
            read: "allowMultipleLandingPatterns"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "showGimbalOnlyWhenSet"
            type: "Fact"
            isPointer: true
            read: "showGimbalOnlyWhenSet"
            index: 5
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "vtolTransitionDistance"
            type: "Fact"
            isPointer: true
            read: "vtolTransitionDistance"
            index: 6
            isReadonly: true
            isConstant: true
        }
    }
    Component {
        file: "PowerComponentController.h"
        name: "PowerComponentController"
        accessSemantics: "reference"
        prototype: "FactPanelController"
        exports: ["QGC/PowerComponentController 1.0"]
        exportMetaObjectRevisions: [256]
        Signal { name: "oldFirmware" }
        Signal { name: "newerFirmware" }
        Signal { name: "incorrectFirmwareRevReporting" }
        Signal { name: "connectBattery" }
        Signal { name: "disconnectBattery" }
        Signal { name: "batteryConnected" }
        Signal {
            name: "calibrationFailed"
            Parameter { name: "errorMessage"; type: "QString" }
        }
        Signal {
            name: "calibrationSuccess"
            Parameter { name: "warningMessages"; type: "QStringList" }
        }
        Method {
            name: "_handleVehicleTextMessage"
            Parameter { name: "vehicleId"; type: "int" }
            Parameter { name: "compId"; type: "int" }
            Parameter { name: "severity"; type: "int" }
            Parameter { name: "text"; type: "QString" }
            Parameter { name: "description"; type: "QString" }
        }
        Method { name: "calibrateEsc" }
        Method { name: "startBusConfigureActuators" }
        Method { name: "stopBusConfigureActuators" }
    }
    Component {
        file: "QGCCameraManager.h"
        name: "QGCCameraManager"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/QGCCameraManager 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "cameras"
            type: "QmlObjectListModel"
            isPointer: true
            read: "cameras"
            notify: "camerasChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "cameraLabels"
            type: "QStringList"
            read: "cameraLabels"
            notify: "cameraLabelsChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "currentCameraInstance"
            type: "MavlinkCameraControl"
            isPointer: true
            read: "currentCameraInstance"
            notify: "currentCameraChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "currentCamera"
            type: "int"
            read: "currentCamera"
            write: "setCurrentCamera"
            notify: "currentCameraChanged"
            index: 3
        }
        Signal { name: "camerasChanged" }
        Signal { name: "cameraLabelsChanged" }
        Signal { name: "currentCameraChanged" }
        Signal { name: "streamChanged" }
        Method {
            name: "_vehicleReady"
            Parameter { name: "ready"; type: "bool" }
        }
        Method {
            name: "_mavlinkMessageReceived"
            Parameter { name: "message"; type: "mavlink_message_t" }
        }
        Method {
            name: "_activeJoystickChanged"
            Parameter { name: "joystick"; type: "Joystick"; isPointer: true }
        }
        Method {
            name: "_stepZoom"
            Parameter { name: "direction"; type: "int" }
        }
        Method {
            name: "_startZoom"
            Parameter { name: "direction"; type: "int" }
        }
        Method { name: "_stopZoom" }
        Method {
            name: "_stepCamera"
            Parameter { name: "direction"; type: "int" }
        }
        Method {
            name: "_stepStream"
            Parameter { name: "direction"; type: "int" }
        }
        Method { name: "_checkForLostCameras" }
        Method { name: "_triggerCamera" }
        Method { name: "_startVideoRecording" }
        Method { name: "_stopVideoRecording" }
        Method { name: "_toggleVideoRecording" }
    }
    Component {
        file: "QGCFileDialogController.h"
        name: "QGCFileDialogController"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/QGCFileDialogController 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Method {
            name: "getFiles"
            type: "QStringList"
            Parameter { name: "directoryPath"; type: "QString" }
            Parameter { name: "nameFilters"; type: "QStringList" }
        }
        Method {
            name: "fullyQualifiedFilename"
            type: "QString"
            Parameter { name: "directoryPath"; type: "QString" }
            Parameter { name: "filename"; type: "QString" }
            Parameter { name: "nameFilters"; type: "QStringList" }
        }
        Method {
            name: "fullyQualifiedFilename"
            type: "QString"
            isCloned: true
            Parameter { name: "directoryPath"; type: "QString" }
            Parameter { name: "filename"; type: "QString" }
        }
        Method {
            name: "fileExists"
            type: "bool"
            Parameter { name: "filename"; type: "QString" }
        }
        Method {
            name: "deleteFile"
            Parameter { name: "filename"; type: "QString" }
        }
        Method {
            name: "urlToLocalFile"
            type: "QString"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "fullFolderPathToShortMobilePath"
            type: "QString"
            Parameter { name: "fullFolderPath"; type: "QString" }
        }
    }
    Component {
        file: "QGCOptions.h"
        name: "QGCFlyViewOptions"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/QGCFlyViewOptions 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "showMultiVehicleList"
            type: "bool"
            read: "showMultiVehicleList"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "showInstrumentPanel"
            type: "bool"
            read: "showInstrumentPanel"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "showMapScale"
            type: "bool"
            read: "showMapScale"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "guidedBarShowEmergencyStop"
            type: "bool"
            read: "guidedBarShowEmergencyStop"
            notify: "guidedBarShowEmergencyStopChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "guidedBarShowOrbit"
            type: "bool"
            read: "guidedBarShowOrbit"
            notify: "guidedBarShowOrbitChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "guidedBarShowROI"
            type: "bool"
            read: "guidedBarShowROI"
            notify: "guidedBarShowROIChanged"
            index: 5
            isReadonly: true
        }
        Signal {
            name: "guidedBarShowEmergencyStopChanged"
            Parameter { name: "show"; type: "bool" }
        }
        Signal {
            name: "guidedBarShowOrbitChanged"
            Parameter { name: "show"; type: "bool" }
        }
        Signal {
            name: "guidedBarShowROIChanged"
            Parameter { name: "show"; type: "bool" }
        }
    }
    Component {
        file: "QGCGeoBoundingCube.h"
        name: "QGCGeoBoundingCube"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/QGCGeoBoundingCube 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property { name: "pointNW"; type: "QGeoCoordinate"; index: 0; isConstant: true }
        Property { name: "pointSE"; type: "QGeoCoordinate"; index: 1; isConstant: true }
        Method { name: "reset" }
        Method { name: "isValid"; type: "bool" }
        Method { name: "center"; type: "QGeoCoordinate" }
        Method {
            name: "polygon2D"
            type: "QGeoCoordinate"
            isList: true
            Parameter { name: "clipTo"; type: "double" }
        }
        Method { name: "polygon2D"; type: "QGeoCoordinate"; isList: true; isCloned: true }
        Method { name: "width"; type: "double" }
        Method { name: "height"; type: "double" }
        Method { name: "area"; type: "double" }
        Method { name: "radius"; type: "double" }
    }
    Component {
        file: "QGCMAVLink.h"
        name: "QGCMAVLink"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/MAVLink 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Enum {
            name: "MAV_BATTERY_FUNCTION"
            values: [
                "MAV_BATTERY_FUNCTION_UNKNOWN",
                "MAV_BATTERY_FUNCTION_ALL",
                "MAV_BATTERY_FUNCTION_PROPULSION",
                "MAV_BATTERY_FUNCTION_AVIONICS",
                "MAV_BATTERY_TYPE_PAYLOAD"
            ]
        }
        Enum {
            name: "MAV_BATTERY_CHARGE_STATE"
            values: [
                "MAV_BATTERY_CHARGE_STATE_UNDEFINED",
                "MAV_BATTERY_CHARGE_STATE_OK",
                "MAV_BATTERY_CHARGE_STATE_LOW",
                "MAV_BATTERY_CHARGE_STATE_CRITICAL",
                "MAV_BATTERY_CHARGE_STATE_EMERGENCY",
                "MAV_BATTERY_CHARGE_STATE_FAILED",
                "MAV_BATTERY_CHARGE_STATE_UNHEALTHY",
                "MAV_BATTERY_CHARGE_STATE_CHARGING"
            ]
        }
        Enum {
            name: "MavlinkSysStatus"
            values: [
                "SysStatusSensor3dGyro",
                "SysStatusSensor3dAccel",
                "SysStatusSensor3dMag",
                "SysStatusSensorAbsolutePressure",
                "SysStatusSensorDifferentialPressure",
                "SysStatusSensorGPS",
                "SysStatusSensorOpticalFlow",
                "SysStatusSensorVisionPosition",
                "SysStatusSensorLaserPosition",
                "SysStatusSensorExternalGroundTruth",
                "SysStatusSensorAngularRateControl",
                "SysStatusSensorAttitudeStabilization",
                "SysStatusSensorYawPosition",
                "SysStatusSensorZAltitudeControl",
                "SysStatusSensorXYPositionControl",
                "SysStatusSensorMotorOutputs",
                "SysStatusSensorRCReceiver",
                "SysStatusSensor3dGyro2",
                "SysStatusSensor3dAccel2",
                "SysStatusSensor3dMag2",
                "SysStatusSensorGeoFence",
                "SysStatusSensorAHRS",
                "SysStatusSensorTerrain",
                "SysStatusSensorReverseMotor",
                "SysStatusSensorLogging",
                "SysStatusSensorBattery"
            ]
        }
        Enum {
            name: "GRIPPER_OPTIONS"
            values: ["Gripper_release", "Gripper_grab", "Invalid_option"]
        }
        Enum {
            name: "CalibrationType"
            values: [
                "CalibrationNone",
                "CalibrationRadio",
                "CalibrationGyro",
                "CalibrationMag",
                "CalibrationAccel",
                "CalibrationLevel",
                "CalibrationEsc",
                "CalibrationCopyTrims",
                "CalibrationAPMCompassMot",
                "CalibrationAPMPressureAirspeed",
                "CalibrationAPMPreFlight",
                "CalibrationPX4Airspeed",
                "CalibrationPX4Pressure",
                "CalibrationAPMAccelSimple"
            ]
        }
    }
    Component {
        file: "QGCMapCircle.h"
        name: "QGCMapCircle"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/QGCMapCircle 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "dirty"
            type: "bool"
            read: "dirty"
            write: "setDirty"
            notify: "dirtyChanged"
            index: 0
        }
        Property {
            name: "center"
            type: "QGeoCoordinate"
            read: "center"
            write: "setCenter"
            notify: "centerChanged"
            index: 1
        }
        Property {
            name: "radius"
            type: "Fact"
            isPointer: true
            read: "radius"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "interactive"
            type: "bool"
            read: "interactive"
            write: "setInteractive"
            notify: "interactiveChanged"
            index: 3
        }
        Property {
            name: "showRotation"
            type: "bool"
            read: "showRotation"
            write: "setShowRotation"
            notify: "showRotationChanged"
            index: 4
        }
        Property {
            name: "clockwiseRotation"
            type: "bool"
            read: "clockwiseRotation"
            write: "setClockwiseRotation"
            notify: "clockwiseRotationChanged"
            index: 5
        }
        Signal {
            name: "dirtyChanged"
            Parameter { name: "dirty"; type: "bool" }
        }
        Signal {
            name: "centerChanged"
            Parameter { name: "center"; type: "QGeoCoordinate" }
        }
        Signal {
            name: "interactiveChanged"
            Parameter { name: "interactive"; type: "bool" }
        }
        Signal {
            name: "showRotationChanged"
            Parameter { name: "showRotation"; type: "bool" }
        }
        Signal {
            name: "clockwiseRotationChanged"
            Parameter { name: "clockwiseRotation"; type: "bool" }
        }
        Method { name: "_setDirty" }
    }
    Component {
        file: "QGCMapPalette.h"
        name: "QGCMapPalette"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/QGCMapPalette 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "lightColors"
            type: "bool"
            read: "lightColors"
            write: "setLightColors"
            notify: "paletteChanged"
            index: 0
        }
        Property {
            name: "text"
            type: "QColor"
            read: "text"
            notify: "paletteChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "textOutline"
            type: "QColor"
            read: "textOutline"
            notify: "paletteChanged"
            index: 2
            isReadonly: true
        }
        Signal { name: "paletteChanged" }
        Signal {
            name: "lightColorsChanged"
            Parameter { name: "lightColors"; type: "bool" }
        }
    }
    Component {
        file: "QGCMapPolygon.h"
        name: "QGCMapPolygon"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/QGCMapPolygon 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "count"
            type: "int"
            read: "count"
            notify: "countChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "path"
            type: "QVariantList"
            read: "path"
            notify: "pathChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "area"
            type: "double"
            read: "area"
            notify: "pathChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "pathModel"
            type: "QmlObjectListModel"
            isPointer: true
            read: "qmlPathModel"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "dirty"
            type: "bool"
            read: "dirty"
            write: "setDirty"
            notify: "dirtyChanged"
            index: 4
        }
        Property {
            name: "center"
            type: "QGeoCoordinate"
            read: "center"
            write: "setCenter"
            notify: "centerChanged"
            index: 5
        }
        Property {
            name: "centerDrag"
            type: "bool"
            read: "centerDrag"
            write: "setCenterDrag"
            notify: "centerDragChanged"
            index: 6
        }
        Property {
            name: "interactive"
            type: "bool"
            read: "interactive"
            write: "setInteractive"
            notify: "interactiveChanged"
            index: 7
        }
        Property {
            name: "isValid"
            type: "bool"
            read: "isValid"
            notify: "isValidChanged"
            index: 8
            isReadonly: true
        }
        Property {
            name: "empty"
            type: "bool"
            read: "empty"
            notify: "isEmptyChanged"
            index: 9
            isReadonly: true
        }
        Property {
            name: "traceMode"
            type: "bool"
            read: "traceMode"
            write: "setTraceMode"
            notify: "traceModeChanged"
            index: 10
        }
        Property {
            name: "showAltColor"
            type: "bool"
            read: "showAltColor"
            write: "setShowAltColor"
            notify: "showAltColorChanged"
            index: 11
        }
        Property {
            name: "selectedVertex"
            type: "int"
            read: "selectedVertex"
            write: "selectVertex"
            notify: "selectedVertexChanged"
            index: 12
        }
        Signal {
            name: "countChanged"
            Parameter { name: "count"; type: "int" }
        }
        Signal { name: "pathChanged" }
        Signal {
            name: "dirtyChanged"
            Parameter { name: "dirty"; type: "bool" }
        }
        Signal { name: "cleared" }
        Signal {
            name: "centerChanged"
            Parameter { name: "center"; type: "QGeoCoordinate" }
        }
        Signal {
            name: "centerDragChanged"
            Parameter { name: "centerDrag"; type: "bool" }
        }
        Signal {
            name: "interactiveChanged"
            Parameter { name: "interactive"; type: "bool" }
        }
        Signal { name: "isValidChanged"; type: "bool" }
        Signal { name: "isEmptyChanged"; type: "bool" }
        Signal {
            name: "traceModeChanged"
            Parameter { name: "traceMode"; type: "bool" }
        }
        Signal {
            name: "showAltColorChanged"
            Parameter { name: "showAltColor"; type: "bool" }
        }
        Signal {
            name: "selectedVertexChanged"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "_polygonModelCountChanged"
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "_polygonModelDirtyChanged"
            Parameter { name: "dirty"; type: "bool" }
        }
        Method { name: "_updateCenter" }
        Method { name: "clear" }
        Method {
            name: "appendVertex"
            Parameter { name: "coordinate"; type: "QGeoCoordinate" }
        }
        Method {
            name: "removeVertex"
            Parameter { name: "vertexIndex"; type: "int" }
        }
        Method {
            name: "appendVertices"
            Parameter { name: "varCoords"; type: "QVariantList" }
        }
        Method {
            name: "adjustVertex"
            Parameter { name: "vertexIndex"; type: "int" }
            Parameter { name: "coordinate"; type: "QGeoCoordinate" }
        }
        Method {
            name: "splitPolygonSegment"
            Parameter { name: "vertexIndex"; type: "int" }
        }
        Method {
            name: "containsCoordinate"
            type: "bool"
            Parameter { name: "coordinate"; type: "QGeoCoordinate" }
        }
        Method {
            name: "offset"
            Parameter { name: "distance"; type: "double" }
        }
        Method {
            name: "loadKMLOrSHPFile"
            type: "bool"
            Parameter { name: "file"; type: "QString" }
        }
        Method {
            name: "vertexCoordinate"
            type: "QGeoCoordinate"
            Parameter { name: "vertex"; type: "int" }
        }
        Method { name: "verifyClockwiseWinding" }
        Method { name: "beginReset" }
        Method { name: "endReset" }
    }
    Component {
        file: "QGCOptions.h"
        name: "QGCOptions"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/QGCOptions 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "allowJoystickSelection"
            type: "bool"
            read: "allowJoystickSelection"
            notify: "allowJoystickSelectionChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "checkFirmwareVersion"
            type: "bool"
            read: "checkFirmwareVersion"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "combineSettingsAndSetup"
            type: "bool"
            read: "combineSettingsAndSetup"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "disableVehicleConnection"
            type: "bool"
            read: "disableVehicleConnection"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "enablePlanViewSelector"
            type: "bool"
            read: "enablePlanViewSelector"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "enableSaveMainWindowPosition"
            type: "bool"
            read: "enableSaveMainWindowPosition"
            index: 5
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "guidedActionsRequireRCRSSI"
            type: "bool"
            read: "guidedActionsRequireRCRSSI"
            index: 6
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "missionWaypointsOnly"
            type: "bool"
            read: "missionWaypointsOnly"
            notify: "missionWaypointsOnlyChanged"
            index: 7
            isReadonly: true
        }
        Property {
            name: "multiVehicleEnabled"
            type: "bool"
            read: "multiVehicleEnabled"
            notify: "multiVehicleEnabledChanged"
            index: 8
            isReadonly: true
        }
        Property {
            name: "sensorsHaveFixedOrientation"
            type: "bool"
            read: "sensorsHaveFixedOrientation"
            index: 9
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "showFirmwareUpgrade"
            type: "bool"
            read: "showFirmwareUpgrade"
            notify: "showFirmwareUpgradeChanged"
            index: 10
            isReadonly: true
        }
        Property {
            name: "showMissionAbsoluteAltitude"
            type: "bool"
            read: "showMissionAbsoluteAltitude"
            notify: "showMissionAbsoluteAltitudeChanged"
            index: 11
            isReadonly: true
        }
        Property {
            name: "showMissionStatus"
            type: "bool"
            read: "showMissionStatus"
            index: 12
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "showOfflineMapExport"
            type: "bool"
            read: "showOfflineMapExport"
            notify: "showOfflineMapExportChanged"
            index: 13
            isReadonly: true
        }
        Property {
            name: "showOfflineMapImport"
            type: "bool"
            read: "showOfflineMapImport"
            notify: "showOfflineMapImportChanged"
            index: 14
            isReadonly: true
        }
        Property {
            name: "showPX4LogTransferOptions"
            type: "bool"
            read: "showPX4LogTransferOptions"
            index: 15
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "showSensorCalibrationAccel"
            type: "bool"
            read: "showSensorCalibrationAccel"
            notify: "showSensorCalibrationAccelChanged"
            index: 16
            isReadonly: true
        }
        Property {
            name: "showSensorCalibrationAirspeed"
            type: "bool"
            read: "showSensorCalibrationAirspeed"
            notify: "showSensorCalibrationAirspeedChanged"
            index: 17
            isReadonly: true
        }
        Property {
            name: "showSensorCalibrationCompass"
            type: "bool"
            read: "showSensorCalibrationCompass"
            notify: "showSensorCalibrationCompassChanged"
            index: 18
            isReadonly: true
        }
        Property {
            name: "showSensorCalibrationGyro"
            type: "bool"
            read: "showSensorCalibrationGyro"
            notify: "showSensorCalibrationGyroChanged"
            index: 19
            isReadonly: true
        }
        Property {
            name: "showSensorCalibrationLevel"
            type: "bool"
            read: "showSensorCalibrationLevel"
            notify: "showSensorCalibrationLevelChanged"
            index: 20
            isReadonly: true
        }
        Property {
            name: "showSimpleMissionStart"
            type: "bool"
            read: "showSimpleMissionStart"
            notify: "showSimpleMissionStartChanged"
            index: 21
            isReadonly: true
        }
        Property {
            name: "useMobileFileDialog"
            type: "bool"
            read: "useMobileFileDialog"
            index: 22
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "wifiReliableForCalibration"
            type: "bool"
            read: "wifiReliableForCalibration"
            index: 23
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "toolbarHeightMultiplier"
            type: "double"
            read: "toolbarHeightMultiplier"
            index: 24
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "devicePixelDensity"
            type: "float"
            read: "devicePixelDensity"
            notify: "devicePixelDensityChanged"
            index: 25
            isReadonly: true
        }
        Property {
            name: "devicePixelRatio"
            type: "float"
            read: "devicePixelRatio"
            notify: "devicePixelRatioChanged"
            index: 26
            isReadonly: true
        }
        Property {
            name: "flyView"
            type: "QGCFlyViewOptions"
            isPointer: true
            isConstant: true
            read: "flyViewOptions"
            index: 27
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "firmwareUpgradeSingleURL"
            type: "QString"
            read: "firmwareUpgradeSingleURL"
            index: 28
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "surveyBuiltInPresetNames"
            type: "QStringList"
            read: "surveyBuiltInPresetNames"
            index: 29
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "preFlightChecklistUrl"
            type: "QUrl"
            read: "preFlightChecklistUrl"
            index: 30
            isReadonly: true
            isConstant: true
        }
        Signal {
            name: "allowJoystickSelectionChanged"
            Parameter { name: "allow"; type: "bool" }
        }
        Signal { name: "devicePixelDensityChanged" }
        Signal { name: "devicePixelRatioChanged" }
        Signal {
            name: "missionWaypointsOnlyChanged"
            Parameter { name: "missionWaypointsOnly"; type: "bool" }
        }
        Signal {
            name: "multiVehicleEnabledChanged"
            Parameter { name: "multiVehicleEnabled"; type: "bool" }
        }
        Signal {
            name: "showFirmwareUpgradeChanged"
            Parameter { name: "show"; type: "bool" }
        }
        Signal { name: "showMissionAbsoluteAltitudeChanged" }
        Signal { name: "showOfflineMapExportChanged" }
        Signal { name: "showOfflineMapImportChanged" }
        Signal {
            name: "showSensorCalibrationAccelChanged"
            Parameter { name: "show"; type: "bool" }
        }
        Signal {
            name: "showSensorCalibrationAirspeedChanged"
            Parameter { name: "show"; type: "bool" }
        }
        Signal {
            name: "showSensorCalibrationCompassChanged"
            Parameter { name: "show"; type: "bool" }
        }
        Signal {
            name: "showSensorCalibrationGyroChanged"
            Parameter { name: "show"; type: "bool" }
        }
        Signal {
            name: "showSensorCalibrationLevelChanged"
            Parameter { name: "show"; type: "bool" }
        }
        Signal { name: "showSimpleMissionStartChanged" }
    }
    Component {
        file: "QGCPalette.h"
        name: "QGCPalette"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/QGCPalette 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "Theme"
            values: ["Light", "Dark", "cMaxTheme"]
        }
        Property {
            name: "globalTheme"
            type: "Theme"
            read: "globalTheme"
            write: "setGlobalTheme"
            notify: "paletteChanged"
            index: 0
        }
        Property {
            name: "colorGroupEnabled"
            type: "bool"
            read: "colorGroupEnabled"
            write: "setColorGroupEnabled"
            notify: "paletteChanged"
            index: 1
        }
        Property {
            name: "colors"
            type: "QStringList"
            read: "colors"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "window"
            type: "QColor"
            read: "window"
            write: "setWindow"
            notify: "paletteChanged"
            index: 3
        }
        Property {
            name: "windowColors"
            type: "QStringList"
            read: "windowColors"
            notify: "paletteChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "windowShadeLight"
            type: "QColor"
            read: "windowShadeLight"
            write: "setWindowShadeLight"
            notify: "paletteChanged"
            index: 5
        }
        Property {
            name: "windowShadeLightColors"
            type: "QStringList"
            read: "windowShadeLightColors"
            notify: "paletteChanged"
            index: 6
            isReadonly: true
        }
        Property {
            name: "windowShade"
            type: "QColor"
            read: "windowShade"
            write: "setWindowShade"
            notify: "paletteChanged"
            index: 7
        }
        Property {
            name: "windowShadeColors"
            type: "QStringList"
            read: "windowShadeColors"
            notify: "paletteChanged"
            index: 8
            isReadonly: true
        }
        Property {
            name: "windowShadeDark"
            type: "QColor"
            read: "windowShadeDark"
            write: "setWindowShadeDark"
            notify: "paletteChanged"
            index: 9
        }
        Property {
            name: "windowShadeDarkColors"
            type: "QStringList"
            read: "windowShadeDarkColors"
            notify: "paletteChanged"
            index: 10
            isReadonly: true
        }
        Property {
            name: "text"
            type: "QColor"
            read: "text"
            write: "setText"
            notify: "paletteChanged"
            index: 11
        }
        Property {
            name: "textColors"
            type: "QStringList"
            read: "textColors"
            notify: "paletteChanged"
            index: 12
            isReadonly: true
        }
        Property {
            name: "warningText"
            type: "QColor"
            read: "warningText"
            write: "setWarningText"
            notify: "paletteChanged"
            index: 13
        }
        Property {
            name: "warningTextColors"
            type: "QStringList"
            read: "warningTextColors"
            notify: "paletteChanged"
            index: 14
            isReadonly: true
        }
        Property {
            name: "button"
            type: "QColor"
            read: "button"
            write: "setButton"
            notify: "paletteChanged"
            index: 15
        }
        Property {
            name: "buttonColors"
            type: "QStringList"
            read: "buttonColors"
            notify: "paletteChanged"
            index: 16
            isReadonly: true
        }
        Property {
            name: "buttonBorder"
            type: "QColor"
            read: "buttonBorder"
            write: "setButtonBorder"
            notify: "paletteChanged"
            index: 17
        }
        Property {
            name: "buttonBorderColors"
            type: "QStringList"
            read: "buttonBorderColors"
            notify: "paletteChanged"
            index: 18
            isReadonly: true
        }
        Property {
            name: "buttonText"
            type: "QColor"
            read: "buttonText"
            write: "setButtonText"
            notify: "paletteChanged"
            index: 19
        }
        Property {
            name: "buttonTextColors"
            type: "QStringList"
            read: "buttonTextColors"
            notify: "paletteChanged"
            index: 20
            isReadonly: true
        }
        Property {
            name: "buttonHighlight"
            type: "QColor"
            read: "buttonHighlight"
            write: "setButtonHighlight"
            notify: "paletteChanged"
            index: 21
        }
        Property {
            name: "buttonHighlightColors"
            type: "QStringList"
            read: "buttonHighlightColors"
            notify: "paletteChanged"
            index: 22
            isReadonly: true
        }
        Property {
            name: "buttonHighlightText"
            type: "QColor"
            read: "buttonHighlightText"
            write: "setButtonHighlightText"
            notify: "paletteChanged"
            index: 23
        }
        Property {
            name: "buttonHighlightTextColors"
            type: "QStringList"
            read: "buttonHighlightTextColors"
            notify: "paletteChanged"
            index: 24
            isReadonly: true
        }
        Property {
            name: "primaryButton"
            type: "QColor"
            read: "primaryButton"
            write: "setPrimaryButton"
            notify: "paletteChanged"
            index: 25
        }
        Property {
            name: "primaryButtonColors"
            type: "QStringList"
            read: "primaryButtonColors"
            notify: "paletteChanged"
            index: 26
            isReadonly: true
        }
        Property {
            name: "primaryButtonText"
            type: "QColor"
            read: "primaryButtonText"
            write: "setPrimaryButtonText"
            notify: "paletteChanged"
            index: 27
        }
        Property {
            name: "primaryButtonTextColors"
            type: "QStringList"
            read: "primaryButtonTextColors"
            notify: "paletteChanged"
            index: 28
            isReadonly: true
        }
        Property {
            name: "textField"
            type: "QColor"
            read: "textField"
            write: "setTextField"
            notify: "paletteChanged"
            index: 29
        }
        Property {
            name: "textFieldColors"
            type: "QStringList"
            read: "textFieldColors"
            notify: "paletteChanged"
            index: 30
            isReadonly: true
        }
        Property {
            name: "textFieldText"
            type: "QColor"
            read: "textFieldText"
            write: "setTextFieldText"
            notify: "paletteChanged"
            index: 31
        }
        Property {
            name: "textFieldTextColors"
            type: "QStringList"
            read: "textFieldTextColors"
            notify: "paletteChanged"
            index: 32
            isReadonly: true
        }
        Property {
            name: "mapButton"
            type: "QColor"
            read: "mapButton"
            write: "setMapButton"
            notify: "paletteChanged"
            index: 33
        }
        Property {
            name: "mapButtonColors"
            type: "QStringList"
            read: "mapButtonColors"
            notify: "paletteChanged"
            index: 34
            isReadonly: true
        }
        Property {
            name: "mapButtonHighlight"
            type: "QColor"
            read: "mapButtonHighlight"
            write: "setMapButtonHighlight"
            notify: "paletteChanged"
            index: 35
        }
        Property {
            name: "mapButtonHighlightColors"
            type: "QStringList"
            read: "mapButtonHighlightColors"
            notify: "paletteChanged"
            index: 36
            isReadonly: true
        }
        Property {
            name: "mapIndicator"
            type: "QColor"
            read: "mapIndicator"
            write: "setMapIndicator"
            notify: "paletteChanged"
            index: 37
        }
        Property {
            name: "mapIndicatorColors"
            type: "QStringList"
            read: "mapIndicatorColors"
            notify: "paletteChanged"
            index: 38
            isReadonly: true
        }
        Property {
            name: "mapIndicatorChild"
            type: "QColor"
            read: "mapIndicatorChild"
            write: "setMapIndicatorChild"
            notify: "paletteChanged"
            index: 39
        }
        Property {
            name: "mapIndicatorChildColors"
            type: "QStringList"
            read: "mapIndicatorChildColors"
            notify: "paletteChanged"
            index: 40
            isReadonly: true
        }
        Property {
            name: "mapWidgetBorderLight"
            type: "QColor"
            read: "mapWidgetBorderLight"
            write: "setMapWidgetBorderLight"
            notify: "paletteChanged"
            index: 41
        }
        Property {
            name: "mapWidgetBorderLightColors"
            type: "QStringList"
            read: "mapWidgetBorderLightColors"
            notify: "paletteChanged"
            index: 42
            isReadonly: true
        }
        Property {
            name: "mapWidgetBorderDark"
            type: "QColor"
            read: "mapWidgetBorderDark"
            write: "setMapWidgetBorderDark"
            notify: "paletteChanged"
            index: 43
        }
        Property {
            name: "mapWidgetBorderDarkColors"
            type: "QStringList"
            read: "mapWidgetBorderDarkColors"
            notify: "paletteChanged"
            index: 44
            isReadonly: true
        }
        Property {
            name: "mapMissionTrajectory"
            type: "QColor"
            read: "mapMissionTrajectory"
            write: "setMapMissionTrajectory"
            notify: "paletteChanged"
            index: 45
        }
        Property {
            name: "mapMissionTrajectoryColors"
            type: "QStringList"
            read: "mapMissionTrajectoryColors"
            notify: "paletteChanged"
            index: 46
            isReadonly: true
        }
        Property {
            name: "brandingPurple"
            type: "QColor"
            read: "brandingPurple"
            write: "setBrandingPurple"
            notify: "paletteChanged"
            index: 47
        }
        Property {
            name: "brandingPurpleColors"
            type: "QStringList"
            read: "brandingPurpleColors"
            notify: "paletteChanged"
            index: 48
            isReadonly: true
        }
        Property {
            name: "brandingBlue"
            type: "QColor"
            read: "brandingBlue"
            write: "setBrandingBlue"
            notify: "paletteChanged"
            index: 49
        }
        Property {
            name: "brandingBlueColors"
            type: "QStringList"
            read: "brandingBlueColors"
            notify: "paletteChanged"
            index: 50
            isReadonly: true
        }
        Property {
            name: "colorGreen"
            type: "QColor"
            read: "colorGreen"
            write: "setColorGreen"
            notify: "paletteChanged"
            index: 51
        }
        Property {
            name: "colorGreenColors"
            type: "QStringList"
            read: "colorGreenColors"
            notify: "paletteChanged"
            index: 52
            isReadonly: true
        }
        Property {
            name: "colorYellow"
            type: "QColor"
            read: "colorYellow"
            write: "setColorYellow"
            notify: "paletteChanged"
            index: 53
        }
        Property {
            name: "colorYellowColors"
            type: "QStringList"
            read: "colorYellowColors"
            notify: "paletteChanged"
            index: 54
            isReadonly: true
        }
        Property {
            name: "colorYellowGreen"
            type: "QColor"
            read: "colorYellowGreen"
            write: "setColorYellowGreen"
            notify: "paletteChanged"
            index: 55
        }
        Property {
            name: "colorYellowGreenColors"
            type: "QStringList"
            read: "colorYellowGreenColors"
            notify: "paletteChanged"
            index: 56
            isReadonly: true
        }
        Property {
            name: "colorOrange"
            type: "QColor"
            read: "colorOrange"
            write: "setColorOrange"
            notify: "paletteChanged"
            index: 57
        }
        Property {
            name: "colorOrangeColors"
            type: "QStringList"
            read: "colorOrangeColors"
            notify: "paletteChanged"
            index: 58
            isReadonly: true
        }
        Property {
            name: "colorRed"
            type: "QColor"
            read: "colorRed"
            write: "setColorRed"
            notify: "paletteChanged"
            index: 59
        }
        Property {
            name: "colorRedColors"
            type: "QStringList"
            read: "colorRedColors"
            notify: "paletteChanged"
            index: 60
            isReadonly: true
        }
        Property {
            name: "colorGrey"
            type: "QColor"
            read: "colorGrey"
            write: "setColorGrey"
            notify: "paletteChanged"
            index: 61
        }
        Property {
            name: "colorGreyColors"
            type: "QStringList"
            read: "colorGreyColors"
            notify: "paletteChanged"
            index: 62
            isReadonly: true
        }
        Property {
            name: "colorBlue"
            type: "QColor"
            read: "colorBlue"
            write: "setColorBlue"
            notify: "paletteChanged"
            index: 63
        }
        Property {
            name: "colorBlueColors"
            type: "QStringList"
            read: "colorBlueColors"
            notify: "paletteChanged"
            index: 64
            isReadonly: true
        }
        Property {
            name: "alertBackground"
            type: "QColor"
            read: "alertBackground"
            write: "setAlertBackground"
            notify: "paletteChanged"
            index: 65
        }
        Property {
            name: "alertBackgroundColors"
            type: "QStringList"
            read: "alertBackgroundColors"
            notify: "paletteChanged"
            index: 66
            isReadonly: true
        }
        Property {
            name: "alertBorder"
            type: "QColor"
            read: "alertBorder"
            write: "setAlertBorder"
            notify: "paletteChanged"
            index: 67
        }
        Property {
            name: "alertBorderColors"
            type: "QStringList"
            read: "alertBorderColors"
            notify: "paletteChanged"
            index: 68
            isReadonly: true
        }
        Property {
            name: "alertText"
            type: "QColor"
            read: "alertText"
            write: "setAlertText"
            notify: "paletteChanged"
            index: 69
        }
        Property {
            name: "alertTextColors"
            type: "QStringList"
            read: "alertTextColors"
            notify: "paletteChanged"
            index: 70
            isReadonly: true
        }
        Property {
            name: "missionItemEditor"
            type: "QColor"
            read: "missionItemEditor"
            write: "setMissionItemEditor"
            notify: "paletteChanged"
            index: 71
        }
        Property {
            name: "missionItemEditorColors"
            type: "QStringList"
            read: "missionItemEditorColors"
            notify: "paletteChanged"
            index: 72
            isReadonly: true
        }
        Property {
            name: "statusFailedText"
            type: "QColor"
            read: "statusFailedText"
            write: "setstatusFailedText"
            notify: "paletteChanged"
            index: 73
        }
        Property {
            name: "statusFailedTextColors"
            type: "QStringList"
            read: "statusFailedTextColors"
            notify: "paletteChanged"
            index: 74
            isReadonly: true
        }
        Property {
            name: "statusPassedText"
            type: "QColor"
            read: "statusPassedText"
            write: "setstatusPassedText"
            notify: "paletteChanged"
            index: 75
        }
        Property {
            name: "statusPassedTextColors"
            type: "QStringList"
            read: "statusPassedTextColors"
            notify: "paletteChanged"
            index: 76
            isReadonly: true
        }
        Property {
            name: "statusPendingText"
            type: "QColor"
            read: "statusPendingText"
            write: "setstatusPendingText"
            notify: "paletteChanged"
            index: 77
        }
        Property {
            name: "statusPendingTextColors"
            type: "QStringList"
            read: "statusPendingTextColors"
            notify: "paletteChanged"
            index: 78
            isReadonly: true
        }
        Property {
            name: "surveyPolygonInterior"
            type: "QColor"
            read: "surveyPolygonInterior"
            write: "setSurveyPolygonInterior"
            notify: "paletteChanged"
            index: 79
        }
        Property {
            name: "surveyPolygonInteriorColors"
            type: "QStringList"
            read: "surveyPolygonInteriorColors"
            notify: "paletteChanged"
            index: 80
            isReadonly: true
        }
        Property {
            name: "surveyPolygonTerrainCollision"
            type: "QColor"
            read: "surveyPolygonTerrainCollision"
            write: "setSurveyPolygonTerrainCollision"
            notify: "paletteChanged"
            index: 81
        }
        Property {
            name: "surveyPolygonTerrainCollisionColors"
            type: "QStringList"
            read: "surveyPolygonTerrainCollisionColors"
            notify: "paletteChanged"
            index: 82
            isReadonly: true
        }
        Property {
            name: "toolbarBackground"
            type: "QColor"
            read: "toolbarBackground"
            write: "setToolbarBackground"
            notify: "paletteChanged"
            index: 83
        }
        Property {
            name: "toolbarBackgroundColors"
            type: "QStringList"
            read: "toolbarBackgroundColors"
            notify: "paletteChanged"
            index: 84
            isReadonly: true
        }
        Property {
            name: "toolStripFGColor"
            type: "QColor"
            read: "toolStripFGColor"
            write: "setToolStripFGColor"
            notify: "paletteChanged"
            index: 85
        }
        Property {
            name: "toolStripFGColorColors"
            type: "QStringList"
            read: "toolStripFGColorColors"
            notify: "paletteChanged"
            index: 86
            isReadonly: true
        }
        Property {
            name: "toolStripHoverColor"
            type: "QColor"
            read: "toolStripHoverColor"
            write: "setToolStripHoverColor"
            notify: "paletteChanged"
            index: 87
        }
        Property {
            name: "toolStripHoverColorColors"
            type: "QStringList"
            read: "toolStripHoverColorColors"
            notify: "paletteChanged"
            index: 88
            isReadonly: true
        }
        Property {
            name: "groupBorder"
            type: "QColor"
            read: "groupBorder"
            write: "setGroupBorder"
            notify: "paletteChanged"
            index: 89
        }
        Property {
            name: "groupBorderColors"
            type: "QStringList"
            read: "groupBorderColors"
            notify: "paletteChanged"
            index: 90
            isReadonly: true
        }
        Signal { name: "paletteChanged" }
    }
    Component {
        file: "PositionManager.h"
        name: "QGCPositionManager"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/QGCPositionManager 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "gcsPosition"
            type: "QGeoCoordinate"
            read: "gcsPosition"
            notify: "gcsPositionChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "gcsHeading"
            type: "double"
            read: "gcsHeading"
            notify: "gcsHeadingChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "gcsPositionHorizontalAccuracy"
            type: "double"
            read: "gcsPositionHorizontalAccuracy"
            notify: "gcsPositionHorizontalAccuracyChanged"
            index: 2
            isReadonly: true
        }
        Signal {
            name: "gcsPositionChanged"
            Parameter { name: "gcsPosition"; type: "QGeoCoordinate" }
        }
        Signal {
            name: "gcsHeadingChanged"
            Parameter { name: "gcsHeading"; type: "double" }
        }
        Signal {
            name: "positionInfoUpdated"
            Parameter { name: "update"; type: "QGeoPositionInfo" }
        }
        Signal {
            name: "gcsPositionHorizontalAccuracyChanged"
            Parameter { name: "gcsPositionHorizontalAccuracy"; type: "double" }
        }
        Method {
            name: "_positionUpdated"
            Parameter { name: "update"; type: "QGeoPositionInfo" }
        }
    }
    Component {
        file: "QGCVideoStreamInfo.h"
        name: "QGCVideoStreamInfo"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/QGCVideoStreamInfo 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "uri"
            type: "QString"
            read: "uri"
            notify: "infoChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "name"
            type: "QString"
            read: "name"
            notify: "infoChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "streamID"
            type: "quint8"
            read: "streamID"
            notify: "infoChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "type"
            type: "quint8"
            read: "type"
            notify: "infoChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "aspectRatio"
            type: "double"
            read: "aspectRatio"
            notify: "infoChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "hfov"
            type: "ushort"
            read: "hfov"
            notify: "infoChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "isThermal"
            type: "bool"
            read: "isThermal"
            notify: "infoChanged"
            index: 6
            isReadonly: true
        }
        Property {
            name: "isActive"
            type: "bool"
            read: "isActive"
            notify: "infoChanged"
            index: 7
            isReadonly: true
        }
        Property {
            name: "resolution"
            type: "QSize"
            read: "resolution"
            notify: "infoChanged"
            index: 8
            isReadonly: true
        }
        Property {
            name: "encoding"
            type: "quint8"
            read: "encoding"
            notify: "infoChanged"
            index: 9
            isReadonly: true
        }
        Property {
            name: "rotation"
            type: "ushort"
            read: "rotation"
            notify: "infoChanged"
            index: 10
            isReadonly: true
        }
        Property {
            name: "bitrate"
            type: "uint"
            read: "bitrate"
            notify: "infoChanged"
            index: 11
            isReadonly: true
        }
        Property {
            name: "framerate"
            type: "double"
            read: "framerate"
            notify: "infoChanged"
            index: 12
            isReadonly: true
        }
        Signal { name: "infoChanged" }
    }
    Component {
        file: "QGroundControlQmlGlobal.h"
        name: "QGroundControlQmlGlobal"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/QGroundControl 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Enum {
            name: "AltMode"
            values: [
                "AltitudeModeMixed",
                "AltitudeModeRelative",
                "AltitudeModeAbsolute",
                "AltitudeModeCalcAboveTerrain",
                "AltitudeModeTerrainFrame",
                "AltitudeModeNone"
            ]
        }
        Property {
            name: "appName"
            type: "QString"
            read: "appName"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "linkManager"
            type: "LinkManager"
            isPointer: true
            read: "linkManager"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "multiVehicleManager"
            type: "MultiVehicleManager"
            isPointer: true
            read: "multiVehicleManager"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "mapEngineManager"
            type: "QGCMapEngineManager"
            isPointer: true
            read: "mapEngineManager"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "qgcPositionManger"
            type: "QGCPositionManager"
            isPointer: true
            read: "qgcPositionManger"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "videoManager"
            type: "VideoManager"
            isPointer: true
            read: "videoManager"
            index: 5
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "settingsManager"
            type: "SettingsManager"
            isPointer: true
            read: "settingsManager"
            index: 6
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "adsbVehicleManager"
            type: "ADSBVehicleManager"
            isPointer: true
            read: "adsbVehicleManager"
            index: 7
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "corePlugin"
            type: "QGCCorePlugin"
            isPointer: true
            read: "corePlugin"
            index: 8
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "missionCommandTree"
            type: "MissionCommandTree"
            isPointer: true
            read: "missionCommandTree"
            index: 9
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "gpsRtk"
            type: "FactGroup"
            isPointer: true
            read: "gpsRtkFactGroup"
            index: 10
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "airlinkSupported"
            type: "bool"
            read: "airlinkSupported"
            index: 11
            isReadonly: true
            isConstant: true
        }
        Property { name: "globalPalette"; type: "QGCPalette"; isPointer: true; index: 12; isConstant: true }
        Property {
            name: "unitsConversion"
            type: "QmlUnitsConversion"
            isPointer: true
            read: "unitsConversion"
            index: 13
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "singleFirmwareSupport"
            type: "bool"
            read: "singleFirmwareSupport"
            index: 14
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "singleVehicleSupport"
            type: "bool"
            read: "singleVehicleSupport"
            index: 15
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "px4ProFirmwareSupported"
            type: "bool"
            read: "px4ProFirmwareSupported"
            index: 16
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "apmFirmwareSupported"
            type: "int"
            read: "apmFirmwareSupported"
            index: 17
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "flightMapPosition"
            type: "QGeoCoordinate"
            read: "flightMapPosition"
            write: "setFlightMapPosition"
            notify: "flightMapPositionChanged"
            index: 18
        }
        Property {
            name: "flightMapZoom"
            type: "double"
            read: "flightMapZoom"
            write: "setFlightMapZoom"
            notify: "flightMapZoomChanged"
            index: 19
        }
        Property { name: "flightMapInitialZoom"; type: "double"; index: 20; isConstant: true }
        Property {
            name: "parameterFileExtension"
            type: "QString"
            read: "parameterFileExtension"
            index: 21
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "missionFileExtension"
            type: "QString"
            read: "missionFileExtension"
            index: 22
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "telemetryFileExtension"
            type: "QString"
            read: "telemetryFileExtension"
            index: 23
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "qgcVersion"
            type: "QString"
            read: "qgcVersion"
            index: 24
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "zOrderTopMost"
            type: "double"
            read: "zOrderTopMost"
            index: 25
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "zOrderWidgets"
            type: "double"
            read: "zOrderWidgets"
            index: 26
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "zOrderMapItems"
            type: "double"
            read: "zOrderMapItems"
            index: 27
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "zOrderVehicles"
            type: "double"
            read: "zOrderVehicles"
            index: 28
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "zOrderWaypointIndicators"
            type: "double"
            read: "zOrderWaypointIndicators"
            index: 29
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "zOrderTrajectoryLines"
            type: "double"
            read: "zOrderTrajectoryLines"
            index: 30
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "zOrderWaypointLines"
            type: "double"
            read: "zOrderWaypointLines"
            index: 31
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "hasAPMSupport"
            type: "bool"
            read: "hasAPMSupport"
            index: 32
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "hasMAVLinkInspector"
            type: "bool"
            read: "hasMAVLinkInspector"
            index: 33
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "elevationProviderName"
            type: "QString"
            read: "elevationProviderName"
            index: 34
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "elevationProviderNotice"
            type: "QString"
            read: "elevationProviderNotice"
            index: 35
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "utmspSupported"
            type: "bool"
            read: "utmspSupported"
            index: 36
            isReadonly: true
            isConstant: true
        }
        Signal {
            name: "isMultiplexingEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "mavlinkSystemIDChanged"
            Parameter { name: "id"; type: "int" }
        }
        Signal {
            name: "flightMapPositionChanged"
            Parameter { name: "flightMapPosition"; type: "QGeoCoordinate" }
        }
        Signal {
            name: "flightMapZoomChanged"
            Parameter { name: "flightMapZoom"; type: "double" }
        }
        Method {
            name: "saveGlobalSetting"
            Parameter { name: "key"; type: "QString" }
            Parameter { name: "value"; type: "QString" }
        }
        Method {
            name: "loadGlobalSetting"
            type: "QString"
            Parameter { name: "key"; type: "QString" }
            Parameter { name: "defaultValue"; type: "QString" }
        }
        Method {
            name: "saveBoolGlobalSetting"
            Parameter { name: "key"; type: "QString" }
            Parameter { name: "value"; type: "bool" }
        }
        Method {
            name: "loadBoolGlobalSetting"
            type: "bool"
            Parameter { name: "key"; type: "QString" }
            Parameter { name: "defaultValue"; type: "bool" }
        }
        Method { name: "deleteAllSettingsNextBoot" }
        Method { name: "clearDeleteAllSettingsNextBoot" }
        Method {
            name: "startPX4MockLink"
            Parameter { name: "sendStatusText"; type: "bool" }
        }
        Method {
            name: "startGenericMockLink"
            Parameter { name: "sendStatusText"; type: "bool" }
        }
        Method {
            name: "startAPMArduCopterMockLink"
            Parameter { name: "sendStatusText"; type: "bool" }
        }
        Method {
            name: "startAPMArduPlaneMockLink"
            Parameter { name: "sendStatusText"; type: "bool" }
        }
        Method {
            name: "startAPMArduSubMockLink"
            Parameter { name: "sendStatusText"; type: "bool" }
        }
        Method {
            name: "startAPMArduRoverMockLink"
            Parameter { name: "sendStatusText"; type: "bool" }
        }
        Method { name: "stopOneMockLink" }
        Method { name: "loggingCategories"; type: "QStringList" }
        Method {
            name: "setCategoryLoggingOn"
            Parameter { name: "category"; type: "QString" }
            Parameter { name: "enable"; type: "bool" }
        }
        Method {
            name: "categoryLoggingOn"
            type: "bool"
            Parameter { name: "category"; type: "QString" }
        }
        Method { name: "updateLoggingFilterRules" }
        Method {
            name: "linesIntersect"
            type: "bool"
            Parameter { name: "xLine1"; type: "QPointF" }
            Parameter { name: "yLine1"; type: "QPointF" }
            Parameter { name: "xLine2"; type: "QPointF" }
            Parameter { name: "yLine2"; type: "QPointF" }
        }
        Method {
            name: "altitudeModeExtraUnits"
            type: "QString"
            Parameter { name: "altMode"; type: "AltMode" }
        }
        Method {
            name: "altitudeModeShortDescription"
            type: "QString"
            Parameter { name: "altMode"; type: "AltMode" }
        }
    }
    Component {
        file: "qstringlistmodel.h"
        name: "QStringListModel"
        accessSemantics: "reference"
        prototype: "QAbstractListModel"
    }
    Component {
        file: "qthread.h"
        name: "QThread"
        accessSemantics: "reference"
        prototype: "QObject"
        Signal { name: "started" }
        Signal { name: "finished" }
        Method {
            name: "start"
            Parameter { type: "Priority" }
        }
        Method { name: "start"; isCloned: true }
        Method { name: "terminate" }
        Method {
            name: "exit"
            Parameter { name: "retcode"; type: "int" }
        }
        Method { name: "exit"; isCloned: true }
        Method { name: "quit" }
    }
    Component {
        file: "QmlObjectListModel.h"
        name: "QmlObjectListModel"
        accessSemantics: "reference"
        prototype: "QAbstractListModel"
        exports: ["QGC/QmlObjectListModel 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "count"
            type: "int"
            read: "count"
            notify: "countChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "dirty"
            type: "bool"
            read: "dirty"
            write: "setDirty"
            notify: "dirtyChanged"
            index: 1
        }
        Signal {
            name: "countChanged"
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "dirtyChanged"
            Parameter { name: "dirtyChanged"; type: "bool" }
        }
        Method {
            name: "_childDirtyChanged"
            Parameter { name: "dirty"; type: "bool" }
        }
        Method {
            name: "get"
            type: "QObject"
            isPointer: true
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        file: "RCChannelMonitorController.h"
        name: "RCChannelMonitorController"
        accessSemantics: "reference"
        prototype: "FactPanelController"
        exports: ["QGC/RCChannelMonitorController 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "channelCount"
            type: "int"
            read: "channelCount"
            notify: "channelCountChanged"
            index: 0
            isReadonly: true
        }
        Signal {
            name: "channelCountChanged"
            Parameter { name: "channelCount"; type: "int" }
        }
        Signal {
            name: "channelRCValueChanged"
            Parameter { name: "channel"; type: "int" }
            Parameter { name: "rcValue"; type: "int" }
        }
        Method {
            name: "_rcChannelsChanged"
            Parameter { name: "channelCount"; type: "int" }
            Parameter { name: "pwmValues"; type: "int[QGCMAVLink::maxRcChannels]" }
        }
    }
    Component {
        file: "RCToParamDialogController.h"
        name: "RCToParamDialogController"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/RCToParamDialogController 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "tuningFact"
            type: "Fact"
            isPointer: true
            read: "tuningFact"
            write: "setTuningFact"
            notify: "tuningFactChanged"
            index: 0
        }
        Property {
            name: "scale"
            type: "Fact"
            isPointer: true
            read: "scale"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "center"
            type: "Fact"
            isPointer: true
            read: "center"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "min"
            type: "Fact"
            isPointer: true
            read: "min"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "max"
            type: "Fact"
            isPointer: true
            read: "max"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property { name: "ready"; type: "bool"; notify: "readyChanged"; index: 5 }
        Signal {
            name: "tuningFactChanged"
            Parameter { name: "fact"; type: "Fact"; isPointer: true }
        }
        Signal {
            name: "readyChanged"
            Parameter { name: "ready"; type: "bool" }
        }
        Method { name: "_parameterUpdated" }
    }
    Component {
        file: "RTKSettings.h"
        name: "RTKSettings"
        accessSemantics: "reference"
        prototype: "SettingsGroup"
        exports: ["QGC/RTKSettings 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "surveyInAccuracyLimit"
            type: "Fact"
            isPointer: true
            read: "surveyInAccuracyLimit"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "surveyInMinObservationDuration"
            type: "Fact"
            isPointer: true
            read: "surveyInMinObservationDuration"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "useFixedBasePosition"
            type: "Fact"
            isPointer: true
            read: "useFixedBasePosition"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "fixedBasePositionLatitude"
            type: "Fact"
            isPointer: true
            read: "fixedBasePositionLatitude"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "fixedBasePositionLongitude"
            type: "Fact"
            isPointer: true
            read: "fixedBasePositionLongitude"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "fixedBasePositionAltitude"
            type: "Fact"
            isPointer: true
            read: "fixedBasePositionAltitude"
            index: 5
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "fixedBasePositionAccuracy"
            type: "Fact"
            isPointer: true
            read: "fixedBasePositionAccuracy"
            index: 6
            isReadonly: true
            isConstant: true
        }
    }
    Component {
        file: "RadioComponentController.h"
        name: "RadioComponentController"
        accessSemantics: "reference"
        prototype: "FactPanelController"
        exports: ["QGC/RadioComponentController 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "BindModes"
            values: ["DSM2", "DSMX7", "DSMX8"]
        }
        Property { name: "minChannelCount"; type: "int"; index: 0; isConstant: true }
        Property {
            name: "channelCount"
            type: "int"
            read: "channelCount"
            notify: "channelCountChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "statusText"
            type: "QQuickItem"
            isPointer: true
            notify: "statusTextChanged"
            index: 2
        }
        Property {
            name: "cancelButton"
            type: "QQuickItem"
            isPointer: true
            notify: "cancelButtonChanged"
            index: 3
        }
        Property {
            name: "nextButton"
            type: "QQuickItem"
            isPointer: true
            notify: "nextButtonChanged"
            index: 4
        }
        Property {
            name: "skipButton"
            type: "QQuickItem"
            isPointer: true
            notify: "skipButtonChanged"
            index: 5
        }
        Property {
            name: "rollChannelMapped"
            type: "bool"
            read: "rollChannelMapped"
            notify: "rollChannelMappedChanged"
            index: 6
            isReadonly: true
        }
        Property {
            name: "pitchChannelMapped"
            type: "bool"
            read: "pitchChannelMapped"
            notify: "pitchChannelMappedChanged"
            index: 7
            isReadonly: true
        }
        Property {
            name: "yawChannelMapped"
            type: "bool"
            read: "yawChannelMapped"
            notify: "yawChannelMappedChanged"
            index: 8
            isReadonly: true
        }
        Property {
            name: "throttleChannelMapped"
            type: "bool"
            read: "throttleChannelMapped"
            notify: "throttleChannelMappedChanged"
            index: 9
            isReadonly: true
        }
        Property {
            name: "rollChannelRCValue"
            type: "int"
            read: "rollChannelRCValue"
            notify: "rollChannelRCValueChanged"
            index: 10
            isReadonly: true
        }
        Property {
            name: "pitchChannelRCValue"
            type: "int"
            read: "pitchChannelRCValue"
            notify: "pitchChannelRCValueChanged"
            index: 11
            isReadonly: true
        }
        Property {
            name: "yawChannelRCValue"
            type: "int"
            read: "yawChannelRCValue"
            notify: "yawChannelRCValueChanged"
            index: 12
            isReadonly: true
        }
        Property {
            name: "throttleChannelRCValue"
            type: "int"
            read: "throttleChannelRCValue"
            notify: "throttleChannelRCValueChanged"
            index: 13
            isReadonly: true
        }
        Property {
            name: "rollChannelReversed"
            type: "int"
            read: "rollChannelReversed"
            notify: "rollChannelReversedChanged"
            index: 14
            isReadonly: true
        }
        Property {
            name: "pitchChannelReversed"
            type: "int"
            read: "pitchChannelReversed"
            notify: "pitchChannelReversedChanged"
            index: 15
            isReadonly: true
        }
        Property {
            name: "yawChannelReversed"
            type: "int"
            read: "yawChannelReversed"
            notify: "yawChannelReversedChanged"
            index: 16
            isReadonly: true
        }
        Property {
            name: "throttleChannelReversed"
            type: "int"
            read: "throttleChannelReversed"
            notify: "throttleChannelReversedChanged"
            index: 17
            isReadonly: true
        }
        Property {
            name: "transmitterMode"
            type: "int"
            read: "transmitterMode"
            write: "setTransmitterMode"
            notify: "transmitterModeChanged"
            index: 18
        }
        Property { name: "imageHelp"; type: "QString"; notify: "imageHelpChanged"; index: 19 }
        Signal { name: "statusTextChanged" }
        Signal { name: "cancelButtonChanged" }
        Signal { name: "nextButtonChanged" }
        Signal { name: "skipButtonChanged" }
        Signal {
            name: "channelCountChanged"
            Parameter { name: "channelCount"; type: "int" }
        }
        Signal {
            name: "channelRCValueChanged"
            Parameter { name: "channel"; type: "int" }
            Parameter { name: "rcValue"; type: "int" }
        }
        Signal {
            name: "rollChannelMappedChanged"
            Parameter { name: "mapped"; type: "bool" }
        }
        Signal {
            name: "pitchChannelMappedChanged"
            Parameter { name: "mapped"; type: "bool" }
        }
        Signal {
            name: "yawChannelMappedChanged"
            Parameter { name: "mapped"; type: "bool" }
        }
        Signal {
            name: "throttleChannelMappedChanged"
            Parameter { name: "mapped"; type: "bool" }
        }
        Signal {
            name: "rollChannelRCValueChanged"
            Parameter { name: "rcValue"; type: "int" }
        }
        Signal {
            name: "pitchChannelRCValueChanged"
            Parameter { name: "rcValue"; type: "int" }
        }
        Signal {
            name: "yawChannelRCValueChanged"
            Parameter { name: "rcValue"; type: "int" }
        }
        Signal {
            name: "throttleChannelRCValueChanged"
            Parameter { name: "rcValue"; type: "int" }
        }
        Signal {
            name: "rollChannelReversedChanged"
            Parameter { name: "reversed"; type: "bool" }
        }
        Signal {
            name: "pitchChannelReversedChanged"
            Parameter { name: "reversed"; type: "bool" }
        }
        Signal {
            name: "yawChannelReversedChanged"
            Parameter { name: "reversed"; type: "bool" }
        }
        Signal {
            name: "throttleChannelReversedChanged"
            Parameter { name: "reversed"; type: "bool" }
        }
        Signal {
            name: "imageHelpChanged"
            Parameter { name: "source"; type: "QString" }
        }
        Signal {
            name: "transmitterModeChanged"
            Parameter { name: "mode"; type: "int" }
        }
        Signal { name: "nextButtonMessageBoxDisplayed" }
        Signal { name: "functionMappingChangedAPMReboot" }
        Signal { name: "throttleReversedCalFailure" }
        Method {
            name: "_rcChannelsChanged"
            Parameter { name: "channelCount"; type: "int" }
            Parameter { name: "pwmValues"; type: "int[QGCMAVLink::maxRcChannels]" }
        }
        Method {
            name: "spektrumBindMode"
            Parameter { name: "mode"; type: "int" }
        }
        Method { name: "crsfBindMode" }
        Method { name: "cancelButtonClicked" }
        Method { name: "skipButtonClicked" }
        Method { name: "nextButtonClicked" }
        Method { name: "start" }
        Method { name: "copyTrims" }
    }
    Component {
        file: "RallyPointController.h"
        name: "RallyPointController"
        accessSemantics: "reference"
        prototype: "PlanElementController"
        exports: ["QGC/RallyPointController 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "points"
            type: "QmlObjectListModel"
            isPointer: true
            read: "points"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "editorQml"
            type: "QString"
            read: "editorQml"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "currentRallyPoint"
            type: "QObject"
            isPointer: true
            read: "currentRallyPoint"
            write: "setCurrentRallyPoint"
            notify: "currentRallyPointChanged"
            index: 2
        }
        Signal {
            name: "currentRallyPointChanged"
            Parameter { name: "rallyPoint"; type: "QObject"; isPointer: true }
        }
        Signal { name: "loadComplete" }
        Method { name: "_managerLoadComplete" }
        Method {
            name: "_managerSendComplete"
            Parameter { name: "error"; type: "bool" }
        }
        Method {
            name: "_managerRemoveAllComplete"
            Parameter { name: "error"; type: "bool" }
        }
        Method { name: "_setFirstPointCurrent" }
        Method { name: "_updateContainsItems" }
        Method {
            name: "_managerVehicleChanged"
            Parameter { name: "managerVehicle"; type: "Vehicle"; isPointer: true }
        }
        Method {
            name: "addPoint"
            Parameter { name: "point"; type: "QGeoCoordinate" }
        }
        Method {
            name: "removePoint"
            Parameter { name: "rallyPoint"; type: "QObject"; isPointer: true }
        }
    }
    Component {
        file: "RemoteIDManager.h"
        name: "RemoteIDManager"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/RemoteIDManager 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "available"
            type: "bool"
            read: "available"
            notify: "availableChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "armStatusGood"
            type: "bool"
            read: "armStatusGood"
            notify: "armStatusGoodChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "armStatusError"
            type: "QString"
            read: "armStatusError"
            notify: "armStatusErrorChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "commsGood"
            type: "bool"
            read: "commsGood"
            notify: "commsGoodChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "gcsGPSGood"
            type: "bool"
            read: "gcsGPSGood"
            notify: "gcsGPSGoodChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "basicIDGood"
            type: "bool"
            read: "basicIDGood"
            notify: "basicIDGoodChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "emergencyDeclared"
            type: "bool"
            read: "emergencyDeclared"
            notify: "emergencyDeclaredChanged"
            index: 6
            isReadonly: true
        }
        Property {
            name: "operatorIDGood"
            type: "bool"
            read: "operatorIDGood"
            notify: "operatorIDGoodChanged"
            index: 7
            isReadonly: true
        }
        Signal { name: "availableChanged" }
        Signal { name: "armStatusGoodChanged" }
        Signal { name: "armStatusErrorChanged" }
        Signal { name: "commsGoodChanged" }
        Signal { name: "gcsGPSGoodChanged" }
        Signal { name: "basicIDGoodChanged" }
        Signal { name: "emergencyDeclaredChanged" }
        Signal { name: "operatorIDGoodChanged" }
        Method { name: "_odidTimeout" }
        Method { name: "_sendMessages" }
        Method {
            name: "_updateLastGCSPositionInfo"
            Parameter { name: "update"; type: "QGeoPositionInfo" }
        }
        Method { name: "_checkGCSBasicID" }
        Method {
            name: "checkOperatorID"
            Parameter { name: "operatorID"; type: "QString" }
        }
        Method { name: "setOperatorID" }
        Method {
            name: "setEmergency"
            Parameter { name: "declare"; type: "bool" }
        }
    }
    Component {
        file: "RemoteIDSettings.h"
        name: "RemoteIDSettings"
        accessSemantics: "reference"
        prototype: "SettingsGroup"
        exports: ["QGC/RemoteIDSettings 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "operatorID"
            type: "Fact"
            isPointer: true
            read: "operatorID"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "operatorIDValid"
            type: "Fact"
            isPointer: true
            read: "operatorIDValid"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "operatorIDType"
            type: "Fact"
            isPointer: true
            read: "operatorIDType"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "sendOperatorID"
            type: "Fact"
            isPointer: true
            read: "sendOperatorID"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "selfIDFree"
            type: "Fact"
            isPointer: true
            read: "selfIDFree"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "selfIDEmergency"
            type: "Fact"
            isPointer: true
            read: "selfIDEmergency"
            index: 5
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "selfIDExtended"
            type: "Fact"
            isPointer: true
            read: "selfIDExtended"
            index: 6
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "selfIDType"
            type: "Fact"
            isPointer: true
            read: "selfIDType"
            index: 7
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "sendSelfID"
            type: "Fact"
            isPointer: true
            read: "sendSelfID"
            index: 8
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "basicID"
            type: "Fact"
            isPointer: true
            read: "basicID"
            index: 9
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "basicIDType"
            type: "Fact"
            isPointer: true
            read: "basicIDType"
            index: 10
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "basicIDUaType"
            type: "Fact"
            isPointer: true
            read: "basicIDUaType"
            index: 11
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "sendBasicID"
            type: "Fact"
            isPointer: true
            read: "sendBasicID"
            index: 12
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "region"
            type: "Fact"
            isPointer: true
            read: "region"
            index: 13
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "locationType"
            type: "Fact"
            isPointer: true
            read: "locationType"
            index: 14
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "latitudeFixed"
            type: "Fact"
            isPointer: true
            read: "latitudeFixed"
            index: 15
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "longitudeFixed"
            type: "Fact"
            isPointer: true
            read: "longitudeFixed"
            index: 16
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "altitudeFixed"
            type: "Fact"
            isPointer: true
            read: "altitudeFixed"
            index: 17
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "classificationType"
            type: "Fact"
            isPointer: true
            read: "classificationType"
            index: 18
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "categoryEU"
            type: "Fact"
            isPointer: true
            read: "categoryEU"
            index: 19
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "classEU"
            type: "Fact"
            isPointer: true
            read: "classEU"
            index: 20
            isReadonly: true
            isConstant: true
        }
    }
    Component {
        file: "ScreenToolsController.h"
        name: "ScreenToolsController"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/ScreenToolsController 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Property {
            name: "isAndroid"
            type: "bool"
            read: "isAndroid"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property { name: "isiOS"; type: "bool"; read: "isiOS"; index: 1; isReadonly: true; isConstant: true }
        Property {
            name: "isMobile"
            type: "bool"
            read: "isMobile"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "fakeMobile"
            type: "bool"
            read: "fakeMobile"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "isDebug"
            type: "bool"
            read: "isDebug"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "isMacOS"
            type: "bool"
            read: "isMacOS"
            index: 5
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "isLinux"
            type: "bool"
            read: "isLinux"
            index: 6
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "isWindows"
            type: "bool"
            read: "isWindows"
            index: 7
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "isSerialAvailable"
            type: "bool"
            read: "isSerialAvailable"
            index: 8
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "hasTouch"
            type: "bool"
            read: "hasTouch"
            index: 9
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "iOSDevice"
            type: "QString"
            read: "iOSDevice"
            index: 10
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "fixedFontFamily"
            type: "QString"
            read: "fixedFontFamily"
            index: 11
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "normalFontFamily"
            type: "QString"
            read: "normalFontFamily"
            index: 12
            isReadonly: true
            isConstant: true
        }
        Method { name: "mouseX"; type: "int" }
        Method { name: "mouseY"; type: "int" }
        Method {
            name: "defaultFontDescent"
            type: "double"
            Parameter { name: "pointSize"; type: "int" }
        }
    }
    Component {
        file: "SensorsComponentController.h"
        name: "SensorsComponentController"
        accessSemantics: "reference"
        prototype: "FactPanelController"
        exports: ["QGC/SensorsComponentController 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "statusLog"; type: "QQuickItem"; isPointer: true; index: 0 }
        Property { name: "progressBar"; type: "QQuickItem"; isPointer: true; index: 1 }
        Property { name: "compassButton"; type: "QQuickItem"; isPointer: true; index: 2 }
        Property { name: "gyroButton"; type: "QQuickItem"; isPointer: true; index: 3 }
        Property { name: "accelButton"; type: "QQuickItem"; isPointer: true; index: 4 }
        Property { name: "airspeedButton"; type: "QQuickItem"; isPointer: true; index: 5 }
        Property { name: "levelButton"; type: "QQuickItem"; isPointer: true; index: 6 }
        Property { name: "cancelButton"; type: "QQuickItem"; isPointer: true; index: 7 }
        Property { name: "setOrientationsButton"; type: "QQuickItem"; isPointer: true; index: 8 }
        Property { name: "orientationCalAreaHelpText"; type: "QQuickItem"; isPointer: true; index: 9 }
        Property {
            name: "showOrientationCalArea"
            type: "bool"
            notify: "showOrientationCalAreaChanged"
            index: 10
        }
        Property {
            name: "orientationCalDownSideDone"
            type: "bool"
            notify: "orientationCalSidesDoneChanged"
            index: 11
        }
        Property {
            name: "orientationCalUpsideDownSideDone"
            type: "bool"
            notify: "orientationCalSidesDoneChanged"
            index: 12
        }
        Property {
            name: "orientationCalLeftSideDone"
            type: "bool"
            notify: "orientationCalSidesDoneChanged"
            index: 13
        }
        Property {
            name: "orientationCalRightSideDone"
            type: "bool"
            notify: "orientationCalSidesDoneChanged"
            index: 14
        }
        Property {
            name: "orientationCalNoseDownSideDone"
            type: "bool"
            notify: "orientationCalSidesDoneChanged"
            index: 15
        }
        Property {
            name: "orientationCalTailDownSideDone"
            type: "bool"
            notify: "orientationCalSidesDoneChanged"
            index: 16
        }
        Property {
            name: "orientationCalDownSideVisible"
            type: "bool"
            notify: "orientationCalSidesVisibleChanged"
            index: 17
        }
        Property {
            name: "orientationCalUpsideDownSideVisible"
            type: "bool"
            notify: "orientationCalSidesVisibleChanged"
            index: 18
        }
        Property {
            name: "orientationCalLeftSideVisible"
            type: "bool"
            notify: "orientationCalSidesVisibleChanged"
            index: 19
        }
        Property {
            name: "orientationCalRightSideVisible"
            type: "bool"
            notify: "orientationCalSidesVisibleChanged"
            index: 20
        }
        Property {
            name: "orientationCalNoseDownSideVisible"
            type: "bool"
            notify: "orientationCalSidesVisibleChanged"
            index: 21
        }
        Property {
            name: "orientationCalTailDownSideVisible"
            type: "bool"
            notify: "orientationCalSidesVisibleChanged"
            index: 22
        }
        Property {
            name: "orientationCalDownSideInProgress"
            type: "bool"
            notify: "orientationCalSidesInProgressChanged"
            index: 23
        }
        Property {
            name: "orientationCalUpsideDownSideInProgress"
            type: "bool"
            notify: "orientationCalSidesInProgressChanged"
            index: 24
        }
        Property {
            name: "orientationCalLeftSideInProgress"
            type: "bool"
            notify: "orientationCalSidesInProgressChanged"
            index: 25
        }
        Property {
            name: "orientationCalRightSideInProgress"
            type: "bool"
            notify: "orientationCalSidesInProgressChanged"
            index: 26
        }
        Property {
            name: "orientationCalNoseDownSideInProgress"
            type: "bool"
            notify: "orientationCalSidesInProgressChanged"
            index: 27
        }
        Property {
            name: "orientationCalTailDownSideInProgress"
            type: "bool"
            notify: "orientationCalSidesInProgressChanged"
            index: 28
        }
        Property {
            name: "orientationCalDownSideRotate"
            type: "bool"
            notify: "orientationCalSidesRotateChanged"
            index: 29
        }
        Property {
            name: "orientationCalUpsideDownSideRotate"
            type: "bool"
            notify: "orientationCalSidesRotateChanged"
            index: 30
        }
        Property {
            name: "orientationCalLeftSideRotate"
            type: "bool"
            notify: "orientationCalSidesRotateChanged"
            index: 31
        }
        Property {
            name: "orientationCalRightSideRotate"
            type: "bool"
            notify: "orientationCalSidesRotateChanged"
            index: 32
        }
        Property {
            name: "orientationCalNoseDownSideRotate"
            type: "bool"
            notify: "orientationCalSidesRotateChanged"
            index: 33
        }
        Property {
            name: "orientationCalTailDownSideRotate"
            type: "bool"
            notify: "orientationCalSidesRotateChanged"
            index: 34
        }
        Property { name: "waitingForCancel"; type: "bool"; notify: "waitingForCancelChanged"; index: 35 }
        Signal { name: "showGyroCalAreaChanged" }
        Signal { name: "showOrientationCalAreaChanged" }
        Signal { name: "orientationCalSidesDoneChanged" }
        Signal { name: "orientationCalSidesVisibleChanged" }
        Signal { name: "orientationCalSidesInProgressChanged" }
        Signal { name: "orientationCalSidesRotateChanged" }
        Signal { name: "resetStatusTextArea" }
        Signal { name: "waitingForCancelChanged" }
        Signal { name: "magCalComplete" }
        Method {
            name: "_handleUASTextMessage"
            Parameter { name: "uasId"; type: "int" }
            Parameter { name: "compId"; type: "int" }
            Parameter { name: "severity"; type: "int" }
            Parameter { name: "text"; type: "QString" }
            Parameter { name: "description"; type: "QString" }
        }
        Method {
            name: "_handleParametersReset"
            Parameter { name: "success"; type: "bool" }
        }
        Method { name: "calibrateCompass" }
        Method { name: "calibrateGyro" }
        Method { name: "calibrateAccel" }
        Method { name: "calibrateLevel" }
        Method { name: "calibrateAirspeed" }
        Method { name: "cancelCalibration" }
        Method { name: "usingUDPLink"; type: "bool" }
        Method { name: "resetFactoryParameters" }
    }
    Component {
        file: "SettingsGroup.h"
        name: "SettingsGroup"
        accessSemantics: "reference"
        prototype: "QObject"
        Property {
            name: "visible"
            type: "bool"
            read: "visible"
            write: "setVisible"
            notify: "visibleChanged"
            index: 0
        }
        Signal { name: "visibleChanged" }
    }
    Component {
        file: "SettingsManager.h"
        name: "SettingsManager"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/SettingsManager 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "adsbVehicleManagerSettings"
            type: "QObject"
            isPointer: true
            read: "adsbVehicleManagerSettings"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "apmMavlinkStreamRateSettings"
            type: "QObject"
            isPointer: true
            read: "apmMavlinkStreamRateSettings"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "appSettings"
            type: "QObject"
            isPointer: true
            read: "appSettings"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "autoConnectSettings"
            type: "QObject"
            isPointer: true
            read: "autoConnectSettings"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "batteryIndicatorSettings"
            type: "QObject"
            isPointer: true
            read: "batteryIndicatorSettings"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "brandImageSettings"
            type: "QObject"
            isPointer: true
            read: "brandImageSettings"
            index: 5
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "mavlinkActionsSettings"
            type: "QObject"
            isPointer: true
            read: "mavlinkActionsSettings"
            index: 6
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "firmwareUpgradeSettings"
            type: "QObject"
            isPointer: true
            read: "firmwareUpgradeSettings"
            index: 7
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "flightMapSettings"
            type: "QObject"
            isPointer: true
            read: "flightMapSettings"
            index: 8
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "flightModeSettings"
            type: "QObject"
            isPointer: true
            read: "flightModeSettings"
            index: 9
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "flyViewSettings"
            type: "QObject"
            isPointer: true
            read: "flyViewSettings"
            index: 10
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "gimbalControllerSettings"
            type: "QObject"
            isPointer: true
            read: "gimbalControllerSettings"
            index: 11
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "mapsSettings"
            type: "QObject"
            isPointer: true
            read: "mapsSettings"
            index: 12
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "offlineMapsSettings"
            type: "QObject"
            isPointer: true
            read: "offlineMapsSettings"
            index: 13
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "planViewSettings"
            type: "QObject"
            isPointer: true
            read: "planViewSettings"
            index: 14
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "remoteIDSettings"
            type: "QObject"
            isPointer: true
            read: "remoteIDSettings"
            index: 15
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "rtkSettings"
            type: "QObject"
            isPointer: true
            read: "rtkSettings"
            index: 16
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "unitsSettings"
            type: "QObject"
            isPointer: true
            read: "unitsSettings"
            index: 17
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "videoSettings"
            type: "QObject"
            isPointer: true
            read: "videoSettings"
            index: 18
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "mavlinkSettings"
            type: "QObject"
            isPointer: true
            read: "mavlinkSettings"
            index: 19
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "viewer3DSettings"
            type: "QObject"
            isPointer: true
            read: "viewer3DSettings"
            index: 20
            isReadonly: true
            isConstant: true
        }
    }
    Component {
        file: "ShapeFileHelper.h"
        name: "ShapeFileHelper"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/ShapeFileHelper 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Property {
            name: "fileDialogKMLFilters"
            type: "QStringList"
            read: "fileDialogKMLFilters"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "fileDialogKMLOrSHPFilters"
            type: "QStringList"
            read: "fileDialogKMLOrSHPFilters"
            index: 1
            isReadonly: true
            isConstant: true
        }
    }
    Component {
        file: "SyslinkComponentController.h"
        name: "SyslinkComponentController"
        accessSemantics: "reference"
        prototype: "FactPanelController"
        exports: ["QGC/SyslinkComponentController 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "radioChannel"
            type: "int"
            read: "radioChannel"
            write: "setRadioChannel"
            notify: "radioChannelChanged"
            index: 0
        }
        Property {
            name: "radioAddress"
            type: "QString"
            read: "radioAddress"
            write: "setRadioAddress"
            notify: "radioAddressChanged"
            index: 1
        }
        Property {
            name: "radioRate"
            type: "int"
            read: "radioRate"
            write: "setRadioRate"
            notify: "radioRateChanged"
            index: 2
        }
        Property {
            name: "radioRates"
            type: "QStringList"
            read: "radioRates"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Signal { name: "radioChannelChanged" }
        Signal { name: "radioAddressChanged" }
        Signal { name: "radioRateChanged" }
        Method {
            name: "_channelChanged"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "_addressChanged"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "_rateChanged"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method { name: "resetDefaults" }
    }
    Component {
        file: "TerrainProfile.h"
        name: "TerrainProfile"
        accessSemantics: "reference"
        defaultProperty: "data"
        parentProperty: "parent"
        prototype: "QQuickItem"
        exports: ["QGC/TerrainProfile 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "visibleWidth"; type: "double"; notify: "visibleWidthChanged"; index: 0 }
        Property {
            name: "missionController"
            type: "MissionController"
            isPointer: true
            read: "missionController"
            write: "setMissionController"
            notify: "missionControllerChanged"
            index: 1
        }
        Property { name: "pixelsPerMeter"; type: "double"; notify: "pixelsPerMeterChanged"; index: 2 }
        Property { name: "minAMSLAlt"; type: "double"; notify: "minAMSLAltChanged"; index: 3 }
        Property { name: "maxAMSLAlt"; type: "double"; notify: "maxAMSLAltChanged"; index: 4 }
        Signal { name: "missionControllerChanged" }
        Signal { name: "visibleWidthChanged" }
        Signal { name: "pixelsPerMeterChanged" }
        Signal { name: "minAMSLAltChanged" }
        Signal { name: "maxAMSLAltChanged" }
        Signal { name: "_updateSignal" }
        Method { name: "_newVisualItems" }
    }
    Component {
        file: "ToolStripAction.h"
        name: "ToolStripAction"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/ToolStripAction 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "enabled"
            type: "bool"
            read: "enabled"
            write: "setEnabled"
            notify: "enabledChanged"
            index: 0
        }
        Property {
            name: "visible"
            type: "bool"
            read: "visible"
            write: "setVisible"
            notify: "visibleChanged"
            index: 1
        }
        Property {
            name: "checkable"
            type: "bool"
            read: "checkable"
            write: "setCheckable"
            notify: "checkableChanged"
            index: 2
        }
        Property {
            name: "checked"
            type: "bool"
            read: "checked"
            write: "setChecked"
            notify: "checkedChanged"
            index: 3
        }
        Property {
            name: "showAlternateIcon"
            type: "bool"
            read: "showAlternateIcon"
            write: "setShowAlternateIcon"
            notify: "showAlternateIconChanged"
            index: 4
        }
        Property {
            name: "biColorIcon"
            type: "bool"
            read: "biColorIcon"
            write: "setbiColorIcon"
            notify: "biColorIconChanged"
            index: 5
        }
        Property {
            name: "fullColorIcon"
            type: "bool"
            read: "fullColorIcon"
            write: "setfullColorIcon"
            notify: "fullColorIconChanged"
            index: 6
        }
        Property {
            name: "nonExclusive"
            type: "bool"
            read: "nonExclusive"
            write: "setNonExclusive"
            notify: "nonExclusiveChanged"
            index: 7
        }
        Property {
            name: "toolStripIndex"
            type: "int"
            read: "toolStripIndex"
            write: "setToolStripIndex"
            notify: "toolStripIndexChanged"
            index: 8
        }
        Property {
            name: "text"
            type: "QString"
            read: "text"
            write: "setText"
            notify: "textChanged"
            index: 9
        }
        Property {
            name: "iconSource"
            type: "QString"
            read: "iconSource"
            write: "setIconSource"
            notify: "iconSourceChanged"
            index: 10
        }
        Property {
            name: "alternateIconSource"
            type: "QString"
            read: "alternateIconSource"
            write: "setAlternateIconSource"
            notify: "alternateIconSourceChanged"
            index: 11
        }
        Property {
            name: "dropPanelComponent"
            type: "QQmlComponent"
            isPointer: true
            read: "dropPanelComponent"
            write: "setDropPanelComponent"
            notify: "dropPanelComponentChanged"
            index: 12
        }
        Signal {
            name: "enabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "visibleChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Signal {
            name: "checkableChanged"
            Parameter { name: "checkable"; type: "bool" }
        }
        Signal {
            name: "checkedChanged"
            Parameter { name: "checked"; type: "bool" }
        }
        Signal {
            name: "showAlternateIconChanged"
            Parameter { name: "showAlternateIcon"; type: "bool" }
        }
        Signal {
            name: "biColorIconChanged"
            Parameter { name: "biColorIcon"; type: "bool" }
        }
        Signal {
            name: "fullColorIconChanged"
            Parameter { name: "fullColorIcon"; type: "bool" }
        }
        Signal {
            name: "nonExclusiveChanged"
            Parameter { name: "nonExclusive"; type: "bool" }
        }
        Signal {
            name: "toolStripIndexChanged"
            Parameter { name: "toolStripIndex"; type: "int" }
        }
        Signal {
            name: "textChanged"
            Parameter { name: "text"; type: "QString" }
        }
        Signal {
            name: "iconSourceChanged"
            Parameter { name: "iconSource"; type: "QString" }
        }
        Signal {
            name: "alternateIconSourceChanged"
            Parameter { name: "alternateIconSource"; type: "QString" }
        }
        Signal {
            name: "triggered"
            Parameter { name: "source"; type: "QObject"; isPointer: true }
        }
        Signal { name: "dropPanelComponentChanged" }
    }
    Component {
        file: "ToolStripActionList.h"
        name: "ToolStripActionList"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/ToolStripActionList 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "model"
            type: "QObject"
            isList: true
            read: "model"
            notify: "modelChanged"
            index: 0
            isReadonly: true
        }
        Signal { name: "modelChanged" }
    }
    Component {
        file: "TrajectoryPoints.h"
        name: "TrajectoryPoints"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/TrajectoryPoints 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Signal {
            name: "pointAdded"
            Parameter { name: "coordinate"; type: "QGeoCoordinate" }
        }
        Signal {
            name: "updateLastPoint"
            Parameter { name: "coordinate"; type: "QGeoCoordinate" }
        }
        Signal { name: "pointsCleared" }
        Method { name: "clear" }
        Method {
            name: "_vehicleCoordinateChanged"
            Parameter { name: "coordinate"; type: "QGeoCoordinate" }
        }
        Method { name: "list"; type: "QVariantList" }
    }
    Component {
        file: "UnitsSettings.h"
        name: "UnitsSettings"
        accessSemantics: "reference"
        prototype: "SettingsGroup"
        exports: ["QGC/UnitsSettings 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Enum {
            name: "HorizontalDistanceUnits"
            values: [
                "HorizontalDistanceUnitsFeet",
                "HorizontalDistanceUnitsMeters"
            ]
        }
        Enum {
            name: "VerticalDistanceUnits"
            values: [
                "VerticalDistanceUnitsFeet",
                "VerticalDistanceUnitsMeters"
            ]
        }
        Enum {
            name: "AreaUnits"
            values: [
                "AreaUnitsSquareFeet",
                "AreaUnitsSquareMeters",
                "AreaUnitsSquareKilometers",
                "AreaUnitsHectares",
                "AreaUnitsAcres",
                "AreaUnitsSquareMiles"
            ]
        }
        Enum {
            name: "SpeedUnits"
            values: [
                "SpeedUnitsFeetPerSecond",
                "SpeedUnitsMetersPerSecond",
                "SpeedUnitsMilesPerHour",
                "SpeedUnitsKilometersPerHour",
                "SpeedUnitsKnots"
            ]
        }
        Enum {
            name: "TemperatureUnits"
            values: ["TemperatureUnitsCelsius", "TemperatureUnitsFarenheit"]
        }
        Enum {
            name: "WeightUnits"
            values: [
                "WeightUnitsGrams",
                "WeightUnitsKg",
                "WeightUnitsOz",
                "WeightUnitsLbs"
            ]
        }
        Property {
            name: "horizontalDistanceUnits"
            type: "Fact"
            isPointer: true
            read: "horizontalDistanceUnits"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "verticalDistanceUnits"
            type: "Fact"
            isPointer: true
            read: "verticalDistanceUnits"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "areaUnits"
            type: "Fact"
            isPointer: true
            read: "areaUnits"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "speedUnits"
            type: "Fact"
            isPointer: true
            read: "speedUnits"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "temperatureUnits"
            type: "Fact"
            isPointer: true
            read: "temperatureUnits"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "weightUnits"
            type: "Fact"
            isPointer: true
            read: "weightUnits"
            index: 5
            isReadonly: true
            isConstant: true
        }
    }
    Component {
        file: "Vehicle.h"
        name: "Vehicle"
        accessSemantics: "reference"
        prototype: "VehicleFactGroup"
        exports: ["QGC/Vehicle 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Enum {
            name: "CheckList"
            values: [
                "CheckListNotSetup",
                "CheckListPassed",
                "CheckListFailed"
            ]
        }
        Enum {
            name: "PIDTuningTelemetryMode"
            values: [
                "ModeDisabled",
                "ModeRateAndAttitude",
                "ModeVelocityAndPosition",
                "ModeAltitudeAndAirspeed"
            ]
        }
        Property { name: "id"; type: "int"; read: "id"; index: 0; isReadonly: true; isConstant: true }
        Property {
            name: "autopilotPlugin"
            type: "AutoPilotPlugin"
            isPointer: true
            index: 1
            isConstant: true
        }
        Property {
            name: "coordinate"
            type: "QGeoCoordinate"
            read: "coordinate"
            notify: "coordinateChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "homePosition"
            type: "QGeoCoordinate"
            read: "homePosition"
            notify: "homePositionChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "armedPosition"
            type: "QGeoCoordinate"
            read: "armedPosition"
            notify: "armedPositionChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "armed"
            type: "bool"
            read: "armed"
            write: "setArmedShowError"
            notify: "armedChanged"
            index: 5
        }
        Property {
            name: "autoDisarm"
            type: "bool"
            read: "autoDisarm"
            notify: "autoDisarmChanged"
            index: 6
            isReadonly: true
        }
        Property {
            name: "flightModeSetAvailable"
            type: "bool"
            read: "flightModeSetAvailable"
            index: 7
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "flightModes"
            type: "QStringList"
            read: "flightModes"
            notify: "flightModesChanged"
            index: 8
            isReadonly: true
        }
        Property {
            name: "flightMode"
            type: "QString"
            read: "flightMode"
            write: "setFlightMode"
            notify: "flightModeChanged"
            index: 9
        }
        Property {
            name: "trajectoryPoints"
            type: "TrajectoryPoints"
            isPointer: true
            index: 10
            isConstant: true
        }
        Property {
            name: "cameraTriggerPoints"
            type: "QmlObjectListModel"
            isPointer: true
            read: "cameraTriggerPoints"
            index: 11
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "latitude"
            type: "float"
            read: "latitude"
            notify: "coordinateChanged"
            index: 12
            isReadonly: true
        }
        Property {
            name: "longitude"
            type: "float"
            read: "longitude"
            notify: "coordinateChanged"
            index: 13
            isReadonly: true
        }
        Property {
            name: "joystickEnabled"
            type: "bool"
            read: "joystickEnabled"
            write: "setJoystickEnabled"
            notify: "joystickEnabledChanged"
            index: 14
        }
        Property {
            name: "rcRSSI"
            type: "int"
            read: "rcRSSI"
            notify: "rcRSSIChanged"
            index: 15
            isReadonly: true
        }
        Property {
            name: "px4Firmware"
            type: "bool"
            read: "px4Firmware"
            notify: "firmwareTypeChanged"
            index: 16
            isReadonly: true
        }
        Property {
            name: "apmFirmware"
            type: "bool"
            read: "apmFirmware"
            notify: "firmwareTypeChanged"
            index: 17
            isReadonly: true
        }
        Property {
            name: "soloFirmware"
            type: "bool"
            read: "soloFirmware"
            write: "setSoloFirmware"
            notify: "soloFirmwareChanged"
            index: 18
        }
        Property {
            name: "genericFirmware"
            type: "bool"
            read: "genericFirmware"
            index: 19
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "messagesReceived"
            type: "uint"
            read: "messagesReceived"
            notify: "messagesReceivedChanged"
            index: 20
            isReadonly: true
        }
        Property {
            name: "messagesSent"
            type: "uint"
            read: "messagesSent"
            notify: "messagesSentChanged"
            index: 21
            isReadonly: true
        }
        Property {
            name: "messagesLost"
            type: "uint"
            read: "messagesLost"
            notify: "messagesLostChanged"
            index: 22
            isReadonly: true
        }
        Property {
            name: "airship"
            type: "bool"
            read: "airship"
            notify: "vehicleTypeChanged"
            index: 23
            isReadonly: true
        }
        Property {
            name: "fixedWing"
            type: "bool"
            read: "fixedWing"
            notify: "vehicleTypeChanged"
            index: 24
            isReadonly: true
        }
        Property {
            name: "multiRotor"
            type: "bool"
            read: "multiRotor"
            notify: "vehicleTypeChanged"
            index: 25
            isReadonly: true
        }
        Property {
            name: "vtol"
            type: "bool"
            read: "vtol"
            notify: "vehicleTypeChanged"
            index: 26
            isReadonly: true
        }
        Property {
            name: "rover"
            type: "bool"
            read: "rover"
            notify: "vehicleTypeChanged"
            index: 27
            isReadonly: true
        }
        Property {
            name: "sub"
            type: "bool"
            read: "sub"
            notify: "vehicleTypeChanged"
            index: 28
            isReadonly: true
        }
        Property {
            name: "supportsThrottleModeCenterZero"
            type: "bool"
            read: "supportsThrottleModeCenterZero"
            index: 29
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "supportsNegativeThrust"
            type: "bool"
            read: "supportsNegativeThrust"
            index: 30
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "supportsJSButton"
            type: "bool"
            read: "supportsJSButton"
            index: 31
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "supportsRadio"
            type: "bool"
            read: "supportsRadio"
            index: 32
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "supportsMotorInterference"
            type: "bool"
            read: "supportsMotorInterference"
            index: 33
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "prearmError"
            type: "QString"
            read: "prearmError"
            write: "setPrearmError"
            notify: "prearmErrorChanged"
            index: 34
        }
        Property {
            name: "motorCount"
            type: "int"
            read: "motorCount"
            index: 35
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "coaxialMotors"
            type: "bool"
            read: "coaxialMotors"
            index: 36
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "xConfigMotors"
            type: "bool"
            read: "xConfigMotors"
            index: 37
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "isOfflineEditingVehicle"
            type: "bool"
            read: "isOfflineEditingVehicle"
            index: 38
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "brandImageIndoor"
            type: "QString"
            read: "brandImageIndoor"
            notify: "firmwareTypeChanged"
            index: 39
            isReadonly: true
        }
        Property {
            name: "brandImageOutdoor"
            type: "QString"
            read: "brandImageOutdoor"
            notify: "firmwareTypeChanged"
            index: 40
            isReadonly: true
        }
        Property {
            name: "sensorsPresentBits"
            type: "int"
            read: "sensorsPresentBits"
            notify: "sensorsPresentBitsChanged"
            index: 41
            isReadonly: true
        }
        Property {
            name: "sensorsEnabledBits"
            type: "int"
            read: "sensorsEnabledBits"
            notify: "sensorsEnabledBitsChanged"
            index: 42
            isReadonly: true
        }
        Property {
            name: "sensorsHealthBits"
            type: "int"
            read: "sensorsHealthBits"
            notify: "sensorsHealthBitsChanged"
            index: 43
            isReadonly: true
        }
        Property {
            name: "sensorsUnhealthyBits"
            type: "int"
            read: "sensorsUnhealthyBits"
            notify: "sensorsUnhealthyBitsChanged"
            index: 44
            isReadonly: true
        }
        Property {
            name: "missionFlightMode"
            type: "QString"
            read: "missionFlightMode"
            index: 45
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "pauseFlightMode"
            type: "QString"
            read: "pauseFlightMode"
            index: 46
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "rtlFlightMode"
            type: "QString"
            read: "rtlFlightMode"
            index: 47
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "smartRTLFlightMode"
            type: "QString"
            read: "smartRTLFlightMode"
            index: 48
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "supportsSmartRTL"
            type: "bool"
            read: "supportsSmartRTL"
            index: 49
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "landFlightMode"
            type: "QString"
            read: "landFlightMode"
            index: 50
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "takeControlFlightMode"
            type: "QString"
            read: "takeControlFlightMode"
            index: 51
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "followFlightMode"
            type: "QString"
            read: "followFlightMode"
            index: 52
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "motorDetectionFlightMode"
            type: "QString"
            read: "motorDetectionFlightMode"
            index: 53
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "stabilizedFlightMode"
            type: "QString"
            read: "stabilizedFlightMode"
            index: 54
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "firmwareTypeString"
            type: "QString"
            read: "firmwareTypeString"
            notify: "firmwareTypeChanged"
            index: 55
            isReadonly: true
        }
        Property {
            name: "vehicleTypeString"
            type: "QString"
            read: "vehicleTypeString"
            notify: "vehicleTypeChanged"
            index: 56
            isReadonly: true
        }
        Property {
            name: "vehicleImageOpaque"
            type: "QString"
            read: "vehicleImageOpaque"
            index: 57
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "vehicleImageOutline"
            type: "QString"
            read: "vehicleImageOutline"
            index: 58
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "telemetryRRSSI"
            type: "int"
            read: "telemetryRRSSI"
            notify: "telemetryRRSSIChanged"
            index: 59
            isReadonly: true
        }
        Property {
            name: "telemetryLRSSI"
            type: "int"
            read: "telemetryLRSSI"
            notify: "telemetryLRSSIChanged"
            index: 60
            isReadonly: true
        }
        Property {
            name: "telemetryRXErrors"
            type: "uint"
            read: "telemetryRXErrors"
            notify: "telemetryRXErrorsChanged"
            index: 61
            isReadonly: true
        }
        Property {
            name: "telemetryFixed"
            type: "uint"
            read: "telemetryFixed"
            notify: "telemetryFixedChanged"
            index: 62
            isReadonly: true
        }
        Property {
            name: "telemetryTXBuffer"
            type: "uint"
            read: "telemetryTXBuffer"
            notify: "telemetryTXBufferChanged"
            index: 63
            isReadonly: true
        }
        Property {
            name: "telemetryLNoise"
            type: "int"
            read: "telemetryLNoise"
            notify: "telemetryLNoiseChanged"
            index: 64
            isReadonly: true
        }
        Property {
            name: "telemetryRNoise"
            type: "int"
            read: "telemetryRNoise"
            notify: "telemetryRNoiseChanged"
            index: 65
            isReadonly: true
        }
        Property {
            name: "mainStatusIndicatorContentItem"
            type: "QVariant"
            read: "mainStatusIndicatorContentItem"
            index: 66
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "toolIndicators"
            type: "QVariantList"
            read: "toolIndicators"
            notify: "toolIndicatorsChanged"
            index: 67
            isReadonly: true
        }
        Property {
            name: "modeIndicators"
            type: "QVariantList"
            read: "modeIndicators"
            notify: "modeIndicatorsChanged"
            index: 68
            isReadonly: true
        }
        Property {
            name: "initialPlanRequestComplete"
            type: "bool"
            read: "initialPlanRequestComplete"
            notify: "initialPlanRequestCompleteChanged"
            index: 69
            isReadonly: true
        }
        Property {
            name: "staticCameraList"
            type: "QVariantList"
            read: "staticCameraList"
            index: 70
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "cameraManager"
            type: "QGCCameraManager"
            isPointer: true
            read: "cameraManager"
            notify: "cameraManagerChanged"
            index: 71
            isReadonly: true
        }
        Property {
            name: "hobbsMeter"
            type: "QString"
            read: "hobbsMeter"
            notify: "hobbsMeterChanged"
            index: 72
            isReadonly: true
        }
        Property {
            name: "inFwdFlight"
            type: "bool"
            read: "inFwdFlight"
            notify: "inFwdFlightChanged"
            index: 73
            isReadonly: true
        }
        Property {
            name: "vtolInFwdFlight"
            type: "bool"
            read: "vtolInFwdFlight"
            write: "setVtolInFwdFlight"
            notify: "vtolInFwdFlightChanged"
            index: 74
        }
        Property {
            name: "supportsTerrainFrame"
            type: "bool"
            read: "supportsTerrainFrame"
            notify: "firmwareTypeChanged"
            index: 75
            isReadonly: true
        }
        Property {
            name: "mavlinkSentCount"
            type: "qulonglong"
            read: "mavlinkSentCount"
            notify: "mavlinkStatusChanged"
            index: 76
            isReadonly: true
        }
        Property {
            name: "mavlinkReceivedCount"
            type: "qulonglong"
            read: "mavlinkReceivedCount"
            notify: "mavlinkStatusChanged"
            index: 77
            isReadonly: true
        }
        Property {
            name: "mavlinkLossCount"
            type: "qulonglong"
            read: "mavlinkLossCount"
            notify: "mavlinkStatusChanged"
            index: 78
            isReadonly: true
        }
        Property {
            name: "mavlinkLossPercent"
            type: "float"
            read: "mavlinkLossPercent"
            notify: "mavlinkStatusChanged"
            index: 79
            isReadonly: true
        }
        Property {
            name: "gimbalController"
            type: "GimbalController"
            isPointer: true
            read: "gimbalController"
            index: 80
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "hasGripper"
            type: "bool"
            read: "hasGripper"
            index: 81
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "isROIEnabled"
            type: "bool"
            read: "isROIEnabled"
            notify: "isROIEnabledChanged"
            index: 82
            isReadonly: true
        }
        Property {
            name: "checkListState"
            type: "CheckList"
            read: "checkListState"
            write: "setCheckListState"
            notify: "checkListStateChanged"
            index: 83
        }
        Property {
            name: "readyToFlyAvailable"
            type: "bool"
            read: "readyToFlyAvailable"
            notify: "readyToFlyAvailableChanged"
            index: 84
            isReadonly: true
        }
        Property {
            name: "readyToFly"
            type: "bool"
            read: "readyToFly"
            notify: "readyToFlyChanged"
            index: 85
            isReadonly: true
        }
        Property {
            name: "sysStatusSensorInfo"
            type: "QObject"
            isPointer: true
            read: "sysStatusSensorInfo"
            index: 86
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "allSensorsHealthy"
            type: "bool"
            read: "allSensorsHealthy"
            notify: "allSensorsHealthyChanged"
            index: 87
            isReadonly: true
        }
        Property {
            name: "requiresGpsFix"
            type: "bool"
            read: "requiresGpsFix"
            notify: "requiresGpsFixChanged"
            index: 88
            isReadonly: true
        }
        Property {
            name: "loadProgress"
            type: "double"
            read: "loadProgress"
            notify: "loadProgressChanged"
            index: 89
            isReadonly: true
        }
        Property {
            name: "initialConnectComplete"
            type: "bool"
            read: "isInitialConnectComplete"
            notify: "initialConnectComplete"
            index: 90
            isReadonly: true
        }
        Property {
            name: "orbitActive"
            type: "bool"
            read: "orbitActive"
            notify: "orbitActiveChanged"
            index: 91
            isReadonly: true
        }
        Property {
            name: "orbitMapCircle"
            type: "QGCMapCircle"
            isPointer: true
            read: "orbitMapCircle"
            index: 92
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "flying"
            type: "bool"
            read: "flying"
            notify: "flyingChanged"
            index: 93
            isReadonly: true
        }
        Property {
            name: "landing"
            type: "bool"
            read: "landing"
            notify: "landingChanged"
            index: 94
            isReadonly: true
        }
        Property {
            name: "guidedMode"
            type: "bool"
            read: "guidedMode"
            write: "setGuidedMode"
            notify: "guidedModeChanged"
            index: 95
        }
        Property {
            name: "guidedModeSupported"
            type: "bool"
            read: "guidedModeSupported"
            index: 96
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "pauseVehicleSupported"
            type: "bool"
            read: "pauseVehicleSupported"
            index: 97
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "orbitModeSupported"
            type: "bool"
            read: "orbitModeSupported"
            index: 98
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "roiModeSupported"
            type: "bool"
            read: "roiModeSupported"
            index: 99
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "takeoffVehicleSupported"
            type: "bool"
            read: "takeoffVehicleSupported"
            index: 100
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "guidedTakeoffSupported"
            type: "bool"
            read: "guidedTakeoffSupported"
            index: 101
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "changeHeadingSupported"
            type: "bool"
            read: "changeHeadingSupported"
            index: 102
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "gotoFlightMode"
            type: "QString"
            read: "gotoFlightMode"
            index: 103
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "haveMRSpeedLimits"
            type: "bool"
            read: "haveMRSpeedLimits"
            notify: "haveMRSpeedLimChanged"
            index: 104
            isReadonly: true
        }
        Property {
            name: "haveFWSpeedLimits"
            type: "bool"
            read: "haveFWSpeedLimits"
            notify: "haveFWSpeedLimChanged"
            index: 105
            isReadonly: true
        }
        Property {
            name: "parameterManager"
            type: "ParameterManager"
            isPointer: true
            read: "parameterManager"
            index: 106
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "vehicleLinkManager"
            type: "VehicleLinkManager"
            isPointer: true
            read: "vehicleLinkManager"
            index: 107
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "objectAvoidance"
            type: "VehicleObjectAvoidance"
            isPointer: true
            read: "objectAvoidance"
            index: 108
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "autotune"
            type: "Autotune"
            isPointer: true
            read: "autotune"
            index: 109
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "remoteIDManager"
            type: "RemoteIDManager"
            isPointer: true
            read: "remoteIDManager"
            index: 110
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "vehicle"
            type: "FactGroup"
            isPointer: true
            read: "vehicleFactGroup"
            index: 111
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "gps"
            type: "FactGroup"
            isPointer: true
            read: "gpsFactGroup"
            index: 112
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "gps2"
            type: "FactGroup"
            isPointer: true
            read: "gps2FactGroup"
            index: 113
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "wind"
            type: "FactGroup"
            isPointer: true
            read: "windFactGroup"
            index: 114
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "vibration"
            type: "FactGroup"
            isPointer: true
            read: "vibrationFactGroup"
            index: 115
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "temperature"
            type: "FactGroup"
            isPointer: true
            read: "temperatureFactGroup"
            index: 116
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "clock"
            type: "FactGroup"
            isPointer: true
            read: "clockFactGroup"
            index: 117
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "setpoint"
            type: "FactGroup"
            isPointer: true
            read: "setpointFactGroup"
            index: 118
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "escStatus"
            type: "FactGroup"
            isPointer: true
            read: "escStatusFactGroup"
            index: 119
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "estimatorStatus"
            type: "FactGroup"
            isPointer: true
            read: "estimatorStatusFactGroup"
            index: 120
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "terrain"
            type: "FactGroup"
            isPointer: true
            read: "terrainFactGroup"
            index: 121
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "distanceSensors"
            type: "FactGroup"
            isPointer: true
            read: "distanceSensorFactGroup"
            index: 122
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "localPosition"
            type: "FactGroup"
            isPointer: true
            read: "localPositionFactGroup"
            index: 123
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "localPositionSetpoint"
            type: "FactGroup"
            isPointer: true
            read: "localPositionSetpointFactGroup"
            index: 124
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "hygrometer"
            type: "FactGroup"
            isPointer: true
            read: "hygrometerFactGroup"
            index: 125
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "generator"
            type: "FactGroup"
            isPointer: true
            read: "generatorFactGroup"
            index: 126
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "efi"
            type: "FactGroup"
            isPointer: true
            read: "efiFactGroup"
            index: 127
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "batteries"
            type: "QmlObjectListModel"
            isPointer: true
            read: "batteries"
            index: 128
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "actuators"
            type: "Actuators"
            isPointer: true
            read: "actuators"
            index: 129
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "healthAndArmingCheckReport"
            type: "HealthAndArmingCheckReport"
            isPointer: true
            read: "healthAndArmingCheckReport"
            index: 130
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "firmwareMajorVersion"
            type: "int"
            read: "firmwareMajorVersion"
            notify: "firmwareVersionChanged"
            index: 131
            isReadonly: true
        }
        Property {
            name: "firmwareMinorVersion"
            type: "int"
            read: "firmwareMinorVersion"
            notify: "firmwareVersionChanged"
            index: 132
            isReadonly: true
        }
        Property {
            name: "firmwarePatchVersion"
            type: "int"
            read: "firmwarePatchVersion"
            notify: "firmwareVersionChanged"
            index: 133
            isReadonly: true
        }
        Property {
            name: "firmwareVersionType"
            type: "int"
            read: "firmwareVersionType"
            notify: "firmwareVersionChanged"
            index: 134
            isReadonly: true
        }
        Property {
            name: "firmwareVersionTypeString"
            type: "QString"
            read: "firmwareVersionTypeString"
            notify: "firmwareVersionChanged"
            index: 135
            isReadonly: true
        }
        Property {
            name: "firmwareCustomMajorVersion"
            type: "int"
            read: "firmwareCustomMajorVersion"
            notify: "firmwareCustomVersionChanged"
            index: 136
            isReadonly: true
        }
        Property {
            name: "firmwareCustomMinorVersion"
            type: "int"
            read: "firmwareCustomMinorVersion"
            notify: "firmwareCustomVersionChanged"
            index: 137
            isReadonly: true
        }
        Property {
            name: "firmwareCustomPatchVersion"
            type: "int"
            read: "firmwareCustomPatchVersion"
            notify: "firmwareCustomVersionChanged"
            index: 138
            isReadonly: true
        }
        Property {
            name: "gitHash"
            type: "QString"
            read: "gitHash"
            notify: "gitHashChanged"
            index: 139
            isReadonly: true
        }
        Property {
            name: "vehicleUID"
            type: "qulonglong"
            read: "vehicleUID"
            notify: "vehicleUIDChanged"
            index: 140
            isReadonly: true
        }
        Property {
            name: "vehicleUIDStr"
            type: "QString"
            read: "vehicleUIDStr"
            notify: "vehicleUIDChanged"
            index: 141
            isReadonly: true
        }
        Property {
            name: "mavlinkSigning"
            type: "bool"
            read: "mavlinkSigning"
            notify: "mavlinkSigningChanged"
            index: 142
            isReadonly: true
        }
        Property {
            name: "sysidInControl"
            type: "quint8"
            read: "sysidInControl"
            notify: "gcsControlStatusChanged"
            index: 143
            isReadonly: true
        }
        Property {
            name: "gcsControlStatusFlags_SystemManager"
            type: "bool"
            read: "gcsControlStatusFlags_SystemManager"
            notify: "gcsControlStatusChanged"
            index: 144
            isReadonly: true
        }
        Property {
            name: "gcsControlStatusFlags_TakeoverAllowed"
            type: "bool"
            read: "gcsControlStatusFlags_TakeoverAllowed"
            notify: "gcsControlStatusChanged"
            index: 145
            isReadonly: true
        }
        Property {
            name: "firstControlStatusReceived"
            type: "bool"
            read: "firstControlStatusReceived"
            notify: "gcsControlStatusChanged"
            index: 146
            isReadonly: true
        }
        Property {
            name: "operatorControlTakeoverTimeoutMsecs"
            type: "int"
            read: "operatorControlTakeoverTimeoutMsecs"
            index: 147
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "requestOperatorControlRemainingMsecs"
            type: "int"
            read: "requestOperatorControlRemainingMsecs"
            index: 148
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "sendControlRequestAllowed"
            type: "bool"
            read: "sendControlRequestAllowed"
            notify: "sendControlRequestAllowedChanged"
            index: 149
            isReadonly: true
        }
        Property {
            name: "messageTypeNone"
            type: "bool"
            read: "messageTypeNone"
            notify: "messageTypeChanged"
            index: 150
            isReadonly: true
        }
        Property {
            name: "messageTypeNormal"
            type: "bool"
            read: "messageTypeNormal"
            notify: "messageTypeChanged"
            index: 151
            isReadonly: true
        }
        Property {
            name: "messageTypeWarning"
            type: "bool"
            read: "messageTypeWarning"
            notify: "messageTypeChanged"
            index: 152
            isReadonly: true
        }
        Property {
            name: "messageTypeError"
            type: "bool"
            read: "messageTypeError"
            notify: "messageTypeChanged"
            index: 153
            isReadonly: true
        }
        Property {
            name: "messageCount"
            type: "int"
            read: "messageCount"
            notify: "messageCountChanged"
            index: 154
            isReadonly: true
        }
        Property {
            name: "formattedMessages"
            type: "QString"
            read: "formattedMessages"
            notify: "formattedMessagesChanged"
            index: 155
            isReadonly: true
        }
        Property {
            name: "flowImageIndex"
            type: "uint"
            read: "flowImageIndex"
            notify: "flowImageIndexChanged"
            index: 156
            isReadonly: true
        }
        Property {
            name: "mavlinkLogManager"
            type: "MAVLinkLogManager"
            isPointer: true
            read: "mavlinkLogManager"
            notify: "mavlinkLogManagerChanged"
            index: 157
            isReadonly: true
        }
        Signal {
            name: "coordinateChanged"
            Parameter { name: "coordinate"; type: "QGeoCoordinate" }
        }
        Signal {
            name: "joystickEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "mavlinkMessageReceived"
            Parameter { name: "message"; type: "mavlink_message_t" }
        }
        Signal {
            name: "homePositionChanged"
            Parameter { name: "homePosition"; type: "QGeoCoordinate" }
        }
        Signal { name: "armedPositionChanged" }
        Signal {
            name: "armedChanged"
            Parameter { name: "armed"; type: "bool" }
        }
        Signal {
            name: "flightModeChanged"
            Parameter { name: "flightMode"; type: "QString" }
        }
        Signal {
            name: "flyingChanged"
            Parameter { name: "flying"; type: "bool" }
        }
        Signal {
            name: "landingChanged"
            Parameter { name: "landing"; type: "bool" }
        }
        Signal {
            name: "guidedModeChanged"
            Parameter { name: "guidedMode"; type: "bool" }
        }
        Signal { name: "inFwdFlightChanged" }
        Signal {
            name: "vtolInFwdFlightChanged"
            Parameter { name: "vtolInFwdFlight"; type: "bool" }
        }
        Signal {
            name: "prearmErrorChanged"
            Parameter { name: "prearmError"; type: "QString" }
        }
        Signal {
            name: "soloFirmwareChanged"
            Parameter { name: "soloFirmware"; type: "bool" }
        }
        Signal {
            name: "defaultCruiseSpeedChanged"
            Parameter { name: "cruiseSpeed"; type: "double" }
        }
        Signal {
            name: "defaultHoverSpeedChanged"
            Parameter { name: "hoverSpeed"; type: "double" }
        }
        Signal { name: "firmwareTypeChanged" }
        Signal { name: "vehicleTypeChanged" }
        Signal { name: "cameraManagerChanged" }
        Signal { name: "hobbsMeterChanged" }
        Signal {
            name: "capabilitiesKnownChanged"
            Parameter { name: "capabilitiesKnown"; type: "bool" }
        }
        Signal {
            name: "initialPlanRequestCompleteChanged"
            Parameter { name: "initialPlanRequestComplete"; type: "bool" }
        }
        Signal {
            name: "capabilityBitsChanged"
            Parameter { name: "capabilityBits"; type: "qulonglong" }
        }
        Signal { name: "toolIndicatorsChanged" }
        Signal { name: "modeIndicatorsChanged" }
        Signal {
            name: "calibrationEventReceived"
            Parameter { name: "uasid"; type: "int" }
            Parameter { name: "componentid"; type: "int" }
            Parameter { name: "severity"; type: "int" }
            Parameter { name: "event"; type: "QSharedPointer<events::parser::ParsedEvent>" }
        }
        Signal { name: "checkListStateChanged" }
        Signal { name: "longitudeChanged" }
        Signal { name: "currentConfigChanged" }
        Signal {
            name: "rcRSSIChanged"
            Parameter { name: "rcRSSI"; type: "int" }
        }
        Signal {
            name: "telemetryRRSSIChanged"
            Parameter { name: "value"; type: "int" }
        }
        Signal {
            name: "telemetryLRSSIChanged"
            Parameter { name: "value"; type: "int" }
        }
        Signal {
            name: "telemetryRXErrorsChanged"
            Parameter { name: "value"; type: "uint" }
        }
        Signal {
            name: "telemetryFixedChanged"
            Parameter { name: "value"; type: "uint" }
        }
        Signal {
            name: "telemetryTXBufferChanged"
            Parameter { name: "value"; type: "uint" }
        }
        Signal {
            name: "telemetryLNoiseChanged"
            Parameter { name: "value"; type: "int" }
        }
        Signal {
            name: "telemetryRNoiseChanged"
            Parameter { name: "value"; type: "int" }
        }
        Signal { name: "autoDisarmChanged" }
        Signal { name: "flightModesChanged" }
        Signal {
            name: "sensorsPresentBitsChanged"
            Parameter { name: "sensorsPresentBits"; type: "int" }
        }
        Signal {
            name: "sensorsEnabledBitsChanged"
            Parameter { name: "sensorsEnabledBits"; type: "int" }
        }
        Signal {
            name: "sensorsHealthBitsChanged"
            Parameter { name: "sensorsHealthBits"; type: "int" }
        }
        Signal {
            name: "sensorsUnhealthyBitsChanged"
            Parameter { name: "sensorsUnhealthyBits"; type: "int" }
        }
        Signal {
            name: "orbitActiveChanged"
            Parameter { name: "orbitActive"; type: "bool" }
        }
        Signal {
            name: "readyToFlyAvailableChanged"
            Parameter { name: "readyToFlyAvailable"; type: "bool" }
        }
        Signal {
            name: "readyToFlyChanged"
            Parameter { name: "readyToFy"; type: "bool" }
        }
        Signal {
            name: "allSensorsHealthyChanged"
            Parameter { name: "allSensorsHealthy"; type: "bool" }
        }
        Signal { name: "requiresGpsFixChanged" }
        Signal { name: "haveMRSpeedLimChanged" }
        Signal { name: "haveFWSpeedLimChanged" }
        Signal { name: "firmwareVersionChanged" }
        Signal { name: "firmwareCustomVersionChanged" }
        Signal {
            name: "gitHashChanged"
            Parameter { name: "hash"; type: "QString" }
        }
        Signal { name: "vehicleUIDChanged" }
        Signal {
            name: "loadProgressChanged"
            Parameter { name: "value"; type: "float" }
        }
        Signal {
            name: "rcChannelsChanged"
            Parameter { name: "channelCount"; type: "int" }
            Parameter { name: "pwmValues"; type: "int[QGCMAVLink::maxRcChannels]" }
        }
        Signal {
            name: "remoteControlRSSIChanged"
            Parameter { name: "rssi"; type: "quint8" }
        }
        Signal {
            name: "mavlinkLogData"
            Parameter { name: "vehicle"; type: "Vehicle"; isPointer: true }
            Parameter { name: "target_system"; type: "quint8" }
            Parameter { name: "target_component"; type: "quint8" }
            Parameter { name: "sequence"; type: "ushort" }
            Parameter { name: "first_message"; type: "quint8" }
            Parameter { name: "data"; type: "QByteArray" }
            Parameter { name: "acked"; type: "bool" }
        }
        Signal {
            name: "mavCommandResult"
            Parameter { name: "vehicleId"; type: "int" }
            Parameter { name: "targetComponent"; type: "int" }
            Parameter { name: "command"; type: "int" }
            Parameter { name: "ackResult"; type: "int" }
            Parameter { name: "failureCode"; type: "int" }
        }
        Signal {
            name: "mavlinkSerialControl"
            Parameter { name: "device"; type: "quint8" }
            Parameter { name: "flags"; type: "quint8" }
            Parameter { name: "timeout"; type: "ushort" }
            Parameter { name: "baudrate"; type: "uint" }
            Parameter { name: "data"; type: "QByteArray" }
        }
        Signal {
            name: "requestProtocolVersion"
            Parameter { name: "version"; type: "uint" }
        }
        Signal { name: "mavlinkStatusChanged" }
        Signal { name: "mavlinkSigningChanged" }
        Signal { name: "isROIEnabledChanged" }
        Signal {
            name: "roiCoordChanged"
            Parameter { name: "centerCoord"; type: "QGeoCoordinate" }
        }
        Signal { name: "initialConnectComplete" }
        Signal {
            name: "sensorsParametersResetAck"
            Parameter { name: "success"; type: "bool" }
        }
        Signal {
            name: "logEntry"
            Parameter { name: "time_utc"; type: "uint" }
            Parameter { name: "size"; type: "uint" }
            Parameter { name: "id"; type: "ushort" }
            Parameter { name: "num_logs"; type: "ushort" }
            Parameter { name: "last_log_num"; type: "ushort" }
        }
        Signal {
            name: "logData"
            Parameter { name: "ofs"; type: "uint" }
            Parameter { name: "id"; type: "ushort" }
            Parameter { name: "count"; type: "quint8" }
            Parameter { name: "data"; type: "quint8"; isPointer: true; isConstant: true }
        }
        Signal {
            name: "mavlinkMsgIntervalsChanged"
            Parameter { name: "compid"; type: "quint8" }
            Parameter { name: "msgId"; type: "ushort" }
            Parameter { name: "rate"; type: "int" }
        }
        Signal { name: "gcsControlStatusChanged" }
        Signal {
            name: "requestOperatorControlReceived"
            Parameter { name: "sysIdRequestingControl"; type: "int" }
            Parameter { name: "allowTakeover"; type: "int" }
            Parameter { name: "requestTimeoutSecs"; type: "int" }
        }
        Signal {
            name: "sendControlRequestAllowedChanged"
            Parameter { name: "sendControlRequestAllowed"; type: "bool" }
        }
        Signal {
            name: "textMessageReceived"
            Parameter { name: "sysid"; type: "int" }
            Parameter { name: "componentid"; type: "int" }
            Parameter { name: "severity"; type: "int" }
            Parameter { name: "text"; type: "QString" }
            Parameter { name: "description"; type: "QString" }
        }
        Signal { name: "messagesReceivedChanged" }
        Signal { name: "messagesSentChanged" }
        Signal { name: "messagesLostChanged" }
        Signal { name: "messageTypeChanged" }
        Signal { name: "messageCountChanged" }
        Signal { name: "formattedMessagesChanged" }
        Signal {
            name: "newFormattedMessage"
            Parameter { name: "formattedMessage"; type: "QString" }
        }
        Signal { name: "flowImageIndexChanged" }
        Signal { name: "mavlinkLogManagerChanged" }
        Method {
            name: "setVtolInFwdFlight"
            Parameter { name: "vtolInFwdFlight"; type: "bool" }
        }
        Method {
            name: "_offlineFirmwareTypeSettingChanged"
            Parameter { name: "varFirmwareType"; type: "QVariant" }
        }
        Method {
            name: "_offlineVehicleTypeSettingChanged"
            Parameter { name: "varVehicleType"; type: "QVariant" }
        }
        Method {
            name: "_mavlinkMessageReceived"
            Parameter { name: "link"; type: "LinkInterface"; isPointer: true }
            Parameter { name: "message"; type: "mavlink_message_t" }
        }
        Method { name: "_sendMessageMultipleNext" }
        Method {
            name: "_parametersReady"
            Parameter { name: "parametersReady"; type: "bool" }
        }
        Method {
            name: "_remoteControlRSSIChanged"
            Parameter { name: "rssi"; type: "quint8" }
        }
        Method {
            name: "_handleFlightModeChanged"
            Parameter { name: "flightMode"; type: "QString" }
        }
        Method {
            name: "_announceArmedChanged"
            Parameter { name: "armed"; type: "bool" }
        }
        Method {
            name: "_offlineCruiseSpeedSettingChanged"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "_offlineHoverSpeedSettingChanged"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method { name: "_prearmErrorTimeout" }
        Method { name: "_firstMissionLoadComplete" }
        Method { name: "_firstGeoFenceLoadComplete" }
        Method { name: "_firstRallyPointLoadComplete" }
        Method { name: "_sendMavCommandResponseTimeoutCheck" }
        Method { name: "_clearCameraTriggerPoints" }
        Method { name: "_updateDistanceHeadingHome" }
        Method { name: "_updateMissionItemIndex" }
        Method { name: "_updateHeadingToNextWP" }
        Method { name: "_updateDistanceHeadingGCS" }
        Method { name: "_updateHomepoint" }
        Method { name: "_updateHobbsMeter" }
        Method {
            name: "_vehicleParamLoaded"
            Parameter { name: "ready"; type: "bool" }
        }
        Method { name: "_sendQGCTimeToVehicle" }
        Method {
            name: "_mavlinkMessageStatus"
            Parameter { name: "uasId"; type: "int" }
            Parameter { name: "totalSent"; type: "qulonglong" }
            Parameter { name: "totalReceived"; type: "qulonglong" }
            Parameter { name: "totalLoss"; type: "qulonglong" }
            Parameter { name: "lossPercent"; type: "float" }
        }
        Method { name: "_orbitTelemetryTimeout" }
        Method { name: "_updateFlightTime" }
        Method {
            name: "_gotProgressUpdate"
            Parameter { name: "progressValue"; type: "float" }
        }
        Method {
            name: "_doSetHomeTerrainReceived"
            Parameter { name: "success"; type: "bool" }
            Parameter { name: "heights"; type: "double"; isList: true }
        }
        Method { name: "_updateAltAboveTerrain" }
        Method {
            name: "_altitudeAboveTerrainReceived"
            Parameter { name: "sucess"; type: "bool" }
            Parameter { name: "heights"; type: "double"; isList: true }
        }
        Method {
            name: "_textMessageReceived"
            Parameter { name: "componentid"; type: "MAV_COMPONENT" }
            Parameter { name: "severity"; type: "MAV_SEVERITY" }
            Parameter { name: "text"; type: "QString" }
            Parameter { name: "description"; type: "QString" }
        }
        Method {
            name: "_errorMessageReceived"
            Parameter { name: "message"; type: "QString" }
        }
        Method { name: "resetCounters" }
        Method {
            name: "virtualTabletJoystickValue"
            Parameter { name: "roll"; type: "double" }
            Parameter { name: "pitch"; type: "double" }
            Parameter { name: "yaw"; type: "double" }
            Parameter { name: "thrust"; type: "double" }
        }
        Method {
            name: "guidedModeRTL"
            Parameter { name: "smartRTL"; type: "bool" }
        }
        Method { name: "guidedModeLand" }
        Method {
            name: "guidedModeTakeoff"
            Parameter { name: "altitudeRelative"; type: "double" }
        }
        Method { name: "minimumTakeoffAltitudeMeters"; type: "double" }
        Method { name: "maximumHorizontalSpeedMultirotor"; type: "double" }
        Method { name: "maximumEquivalentAirspeed"; type: "double" }
        Method { name: "minimumEquivalentAirspeed"; type: "double" }
        Method {
            name: "guidedModeGotoLocation"
            Parameter { name: "gotoCoord"; type: "QGeoCoordinate" }
            Parameter { name: "forwardFlightLoiterRadius"; type: "double" }
        }
        Method {
            name: "guidedModeGotoLocation"
            isCloned: true
            Parameter { name: "gotoCoord"; type: "QGeoCoordinate" }
        }
        Method {
            name: "guidedModeChangeAltitude"
            Parameter { name: "altitudeChange"; type: "double" }
            Parameter { name: "pauseVehicle"; type: "bool" }
        }
        Method {
            name: "guidedModeChangeHeading"
            Parameter { name: "headingCoord"; type: "QGeoCoordinate" }
        }
        Method {
            name: "guidedModeChangeGroundSpeedMetersSecond"
            Parameter { name: "groundspeed"; type: "double" }
        }
        Method {
            name: "guidedModeChangeEquivalentAirspeedMetersSecond"
            Parameter { name: "airspeed"; type: "double" }
        }
        Method {
            name: "guidedModeOrbit"
            Parameter { name: "centerCoord"; type: "QGeoCoordinate" }
            Parameter { name: "radius"; type: "double" }
            Parameter { name: "amslAltitude"; type: "double" }
        }
        Method {
            name: "guidedModeROI"
            Parameter { name: "centerCoord"; type: "QGeoCoordinate" }
        }
        Method { name: "stopGuidedModeROI" }
        Method { name: "pauseVehicle" }
        Method { name: "emergencyStop" }
        Method {
            name: "abortLanding"
            Parameter { name: "climbOutAltitude"; type: "double" }
        }
        Method { name: "landingGearDeploy" }
        Method { name: "landingGearRetract" }
        Method { name: "startTakeoff" }
        Method { name: "startMission" }
        Method {
            name: "setCurrentMissionSequence"
            Parameter { name: "seq"; type: "int" }
        }
        Method { name: "rebootVehicle" }
        Method {
            name: "sendPlan"
            Parameter { name: "planFile"; type: "QString" }
        }
        Method {
            name: "setEstimatorOrigin"
            Parameter { name: "centerCoord"; type: "QGeoCoordinate" }
        }
        Method {
            name: "versionCompare"
            type: "int"
            Parameter { name: "compare"; type: "QString" }
        }
        Method {
            name: "versionCompare"
            type: "int"
            Parameter { name: "major"; type: "int" }
            Parameter { name: "minor"; type: "int" }
            Parameter { name: "patch"; type: "int" }
        }
        Method {
            name: "motorTest"
            Parameter { name: "motor"; type: "int" }
            Parameter { name: "percent"; type: "int" }
            Parameter { name: "timeoutSecs"; type: "int" }
            Parameter { name: "showError"; type: "bool" }
        }
        Method {
            name: "setPIDTuningTelemetryMode"
            Parameter { name: "mode"; type: "PIDTuningTelemetryMode" }
        }
        Method { name: "forceArm" }
        Method {
            name: "sendParamMapRC"
            Parameter { name: "paramName"; type: "QString" }
            Parameter { name: "scale"; type: "double" }
            Parameter { name: "centerValue"; type: "double" }
            Parameter { name: "tuningID"; type: "int" }
            Parameter { name: "minValue"; type: "double" }
            Parameter { name: "maxValue"; type: "double" }
        }
        Method { name: "clearAllParamMapRC" }
        Method { name: "closeVehicle" }
        Method { name: "triggerSimpleCamera" }
        Method {
            name: "doSetHome"
            Parameter { name: "coord"; type: "QGeoCoordinate" }
        }
        Method { name: "saveJoystickSettings" }
        Method { name: "sendSetupSigning" }
        Method { name: "vehicleClassInternalName"; type: "QString" }
        Method {
            name: "sendGripperAction"
            Parameter { name: "gripperOption"; type: "QGCMAVLink::GRIPPER_OPTIONS" }
        }
        Method {
            name: "sendCommand"
            Parameter { name: "compId"; type: "int" }
            Parameter { name: "command"; type: "int" }
            Parameter { name: "showError"; type: "bool" }
            Parameter { name: "param1"; type: "double" }
            Parameter { name: "param2"; type: "double" }
            Parameter { name: "param3"; type: "double" }
            Parameter { name: "param4"; type: "double" }
            Parameter { name: "param5"; type: "double" }
            Parameter { name: "param6"; type: "double" }
            Parameter { name: "param7"; type: "double" }
        }
        Method {
            name: "sendCommand"
            isCloned: true
            Parameter { name: "compId"; type: "int" }
            Parameter { name: "command"; type: "int" }
            Parameter { name: "showError"; type: "bool" }
            Parameter { name: "param1"; type: "double" }
            Parameter { name: "param2"; type: "double" }
            Parameter { name: "param3"; type: "double" }
            Parameter { name: "param4"; type: "double" }
            Parameter { name: "param5"; type: "double" }
            Parameter { name: "param6"; type: "double" }
        }
        Method {
            name: "sendCommand"
            isCloned: true
            Parameter { name: "compId"; type: "int" }
            Parameter { name: "command"; type: "int" }
            Parameter { name: "showError"; type: "bool" }
            Parameter { name: "param1"; type: "double" }
            Parameter { name: "param2"; type: "double" }
            Parameter { name: "param3"; type: "double" }
            Parameter { name: "param4"; type: "double" }
            Parameter { name: "param5"; type: "double" }
        }
        Method {
            name: "sendCommand"
            isCloned: true
            Parameter { name: "compId"; type: "int" }
            Parameter { name: "command"; type: "int" }
            Parameter { name: "showError"; type: "bool" }
            Parameter { name: "param1"; type: "double" }
            Parameter { name: "param2"; type: "double" }
            Parameter { name: "param3"; type: "double" }
            Parameter { name: "param4"; type: "double" }
        }
        Method {
            name: "sendCommand"
            isCloned: true
            Parameter { name: "compId"; type: "int" }
            Parameter { name: "command"; type: "int" }
            Parameter { name: "showError"; type: "bool" }
            Parameter { name: "param1"; type: "double" }
            Parameter { name: "param2"; type: "double" }
            Parameter { name: "param3"; type: "double" }
        }
        Method {
            name: "sendCommand"
            isCloned: true
            Parameter { name: "compId"; type: "int" }
            Parameter { name: "command"; type: "int" }
            Parameter { name: "showError"; type: "bool" }
            Parameter { name: "param1"; type: "double" }
            Parameter { name: "param2"; type: "double" }
        }
        Method {
            name: "sendCommand"
            isCloned: true
            Parameter { name: "compId"; type: "int" }
            Parameter { name: "command"; type: "int" }
            Parameter { name: "showError"; type: "bool" }
            Parameter { name: "param1"; type: "double" }
        }
        Method {
            name: "sendCommand"
            isCloned: true
            Parameter { name: "compId"; type: "int" }
            Parameter { name: "command"; type: "int" }
            Parameter { name: "showError"; type: "bool" }
        }
        Method { name: "flashBootloader" }
        Method {
            name: "motorInterlock"
            Parameter { name: "enable"; type: "bool" }
        }
        Method { name: "startTimerRevertAllowTakeover" }
        Method {
            name: "requestOperatorControl"
            Parameter { name: "allowOverride"; type: "bool" }
            Parameter { name: "requestTimeoutSecs"; type: "int" }
        }
        Method {
            name: "requestOperatorControl"
            isCloned: true
            Parameter { name: "allowOverride"; type: "bool" }
        }
        Method { name: "resetAllMessages" }
        Method { name: "resetErrorLevelMessages" }
        Method { name: "clearMessages" }
    }
    Component {
        file: "VehicleComponent.h"
        name: "VehicleComponent"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/VehicleComponent 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property { name: "name"; type: "QString"; read: "name"; index: 0; isReadonly: true; isConstant: true }
        Property {
            name: "description"
            type: "QString"
            read: "description"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "requiresSetup"
            type: "bool"
            read: "requiresSetup"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "setupComplete"
            type: "bool"
            read: "setupComplete"
            notify: "setupCompleteChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "iconResource"
            type: "QString"
            read: "iconResource"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "setupSource"
            type: "QUrl"
            read: "setupSource"
            notify: "setupSourceChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "summaryQmlSource"
            type: "QUrl"
            read: "summaryQmlSource"
            index: 6
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "allowSetupWhileArmed"
            type: "bool"
            read: "allowSetupWhileArmed"
            index: 7
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "allowSetupWhileFlying"
            type: "bool"
            read: "allowSetupWhileFlying"
            index: 8
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "KnownVehicleComponent"
            type: "AutoPilotPlugin::KnownVehicleComponent"
            read: "KnownVehicleComponent"
            index: 9
            isReadonly: true
            isConstant: true
        }
        Signal { name: "setupCompleteChanged" }
        Signal { name: "setupSourceChanged" }
        Method {
            name: "_triggerUpdated"
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component {
        file: "VehicleFactGroup.h"
        name: "VehicleFactGroup"
        accessSemantics: "reference"
        prototype: "FactGroup"
        Property {
            name: "roll"
            type: "Fact"
            isPointer: true
            read: "roll"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "pitch"
            type: "Fact"
            isPointer: true
            read: "pitch"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "heading"
            type: "Fact"
            isPointer: true
            read: "heading"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "rollRate"
            type: "Fact"
            isPointer: true
            read: "rollRate"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "pitchRate"
            type: "Fact"
            isPointer: true
            read: "pitchRate"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "yawRate"
            type: "Fact"
            isPointer: true
            read: "yawRate"
            index: 5
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "groundSpeed"
            type: "Fact"
            isPointer: true
            read: "groundSpeed"
            index: 6
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "airSpeed"
            type: "Fact"
            isPointer: true
            read: "airSpeed"
            index: 7
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "airSpeedSetpoint"
            type: "Fact"
            isPointer: true
            read: "airSpeedSetpoint"
            index: 8
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "climbRate"
            type: "Fact"
            isPointer: true
            read: "climbRate"
            index: 9
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "altitudeRelative"
            type: "Fact"
            isPointer: true
            read: "altitudeRelative"
            index: 10
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "altitudeAMSL"
            type: "Fact"
            isPointer: true
            read: "altitudeAMSL"
            index: 11
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "altitudeAboveTerr"
            type: "Fact"
            isPointer: true
            read: "altitudeAboveTerr"
            index: 12
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "altitudeTuning"
            type: "Fact"
            isPointer: true
            read: "altitudeTuning"
            index: 13
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "altitudeTuningSetpoint"
            type: "Fact"
            isPointer: true
            read: "altitudeTuningSetpoint"
            index: 14
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "xTrackError"
            type: "Fact"
            isPointer: true
            read: "xTrackError"
            index: 15
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "rangeFinderDist"
            type: "Fact"
            isPointer: true
            read: "rangeFinderDist"
            index: 16
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "flightDistance"
            type: "Fact"
            isPointer: true
            read: "flightDistance"
            index: 17
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "distanceToHome"
            type: "Fact"
            isPointer: true
            read: "distanceToHome"
            index: 18
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "timeToHome"
            type: "Fact"
            isPointer: true
            read: "timeToHome"
            index: 19
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "missionItemIndex"
            type: "Fact"
            isPointer: true
            read: "missionItemIndex"
            index: 20
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "headingToNextWP"
            type: "Fact"
            isPointer: true
            read: "headingToNextWP"
            index: 21
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "distanceToNextWP"
            type: "Fact"
            isPointer: true
            read: "distanceToNextWP"
            index: 22
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "headingToHome"
            type: "Fact"
            isPointer: true
            read: "headingToHome"
            index: 23
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "headingFromHome"
            type: "Fact"
            isPointer: true
            read: "headingFromHome"
            index: 24
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "headingFromGCS"
            type: "Fact"
            isPointer: true
            read: "headingFromGCS"
            index: 25
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "distanceToGCS"
            type: "Fact"
            isPointer: true
            read: "distanceToGCS"
            index: 26
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "hobbs"
            type: "Fact"
            isPointer: true
            read: "hobbs"
            index: 27
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "throttlePct"
            type: "Fact"
            isPointer: true
            read: "throttlePct"
            index: 28
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "imuTemp"
            type: "Fact"
            isPointer: true
            read: "imuTemp"
            index: 29
            isReadonly: true
            isConstant: true
        }
    }
    Component {
        file: "VehicleLinkManager.h"
        name: "VehicleLinkManager"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/VehicleLinkManager 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "primaryLinkName"
            type: "QString"
            read: "primaryLinkName"
            write: "setPrimaryLinkByName"
            notify: "primaryLinkChanged"
            index: 0
        }
        Property {
            name: "linkNames"
            type: "QStringList"
            read: "linkNames"
            notify: "linkNamesChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "linkStatuses"
            type: "QStringList"
            read: "linkStatuses"
            notify: "linkStatusesChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "communicationLost"
            type: "bool"
            read: "communicationLost"
            notify: "communicationLostChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "communicationLostEnabled"
            type: "bool"
            read: "communicationLostEnabled"
            write: "setCommunicationLostEnabled"
            notify: "communicationLostEnabledChanged"
            index: 4
        }
        Property { name: "autoDisconnect"; type: "bool"; notify: "autoDisconnectChanged"; index: 5 }
        Signal { name: "primaryLinkChanged" }
        Signal {
            name: "allLinksRemoved"
            Parameter { name: "vehicle"; type: "Vehicle"; isPointer: true }
        }
        Signal {
            name: "communicationLostChanged"
            Parameter { name: "communicationLost"; type: "bool" }
        }
        Signal {
            name: "communicationLostEnabledChanged"
            Parameter { name: "communicationLostEnabled"; type: "bool" }
        }
        Signal { name: "linkNamesChanged" }
        Signal { name: "linkStatusesChanged" }
        Signal {
            name: "autoDisconnectChanged"
            Parameter { name: "autoDisconnect"; type: "bool" }
        }
        Method { name: "_commLostCheck" }
    }
    Component {
        file: "VehicleObjectAvoidance.h"
        name: "VehicleObjectAvoidance"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/VehicleObjectAvoidance 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "available"
            type: "bool"
            read: "available"
            notify: "objectAvoidanceChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "enabled"
            type: "bool"
            read: "enabled"
            notify: "objectAvoidanceChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "distances"
            type: "int"
            isList: true
            read: "distances"
            notify: "objectAvoidanceChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "increment"
            type: "double"
            read: "increment"
            notify: "objectAvoidanceChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "minDistance"
            type: "int"
            read: "minDistance"
            notify: "objectAvoidanceChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "maxDistance"
            type: "int"
            read: "maxDistance"
            notify: "objectAvoidanceChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "angleOffset"
            type: "double"
            read: "angleOffset"
            notify: "objectAvoidanceChanged"
            index: 6
            isReadonly: true
        }
        Property {
            name: "gridSize"
            type: "int"
            read: "gridSize"
            notify: "objectAvoidanceChanged"
            index: 7
            isReadonly: true
        }
        Signal { name: "objectAvoidanceChanged" }
        Method {
            name: "start"
            Parameter { name: "minDistance"; type: "int" }
        }
        Method { name: "stop" }
        Method {
            name: "grid"
            type: "QPointF"
            Parameter { name: "i"; type: "int" }
        }
        Method {
            name: "distance"
            type: "double"
            Parameter { name: "i"; type: "int" }
        }
    }
    Component {
        file: "VideoItemStub.h"
        name: "VideoItemStub"
        accessSemantics: "reference"
        defaultProperty: "data"
        parentProperty: "parent"
        prototype: "QQuickItem"
        exports: ["QGC/GstQt6VideoItem 1.0"]
        exportMetaObjectRevisions: [256]
    }
    Component {
        file: "VideoManager.h"
        name: "VideoManager"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/VideoManager 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "gstreamerEnabled"
            type: "bool"
            read: "gstreamerEnabled"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "qtmultimediaEnabled"
            type: "bool"
            read: "qtmultimediaEnabled"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "uvcEnabled"
            type: "bool"
            read: "uvcEnabled"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "autoStreamConfigured"
            type: "bool"
            read: "autoStreamConfigured"
            notify: "autoStreamConfiguredChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "decoding"
            type: "bool"
            read: "decoding"
            notify: "decodingChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "fullScreen"
            type: "bool"
            read: "fullScreen"
            write: "setfullScreen"
            notify: "fullScreenChanged"
            index: 5
        }
        Property {
            name: "hasThermal"
            type: "bool"
            read: "hasThermal"
            notify: "decodingChanged"
            index: 6
            isReadonly: true
        }
        Property {
            name: "hasVideo"
            type: "bool"
            read: "hasVideo"
            notify: "hasVideoChanged"
            index: 7
            isReadonly: true
        }
        Property {
            name: "isStreamSource"
            type: "bool"
            read: "isStreamSource"
            notify: "isStreamSourceChanged"
            index: 8
            isReadonly: true
        }
        Property {
            name: "isUvc"
            type: "bool"
            read: "isUvc"
            notify: "isUvcChanged"
            index: 9
            isReadonly: true
        }
        Property {
            name: "recording"
            type: "bool"
            read: "recording"
            notify: "recordingChanged"
            index: 10
            isReadonly: true
        }
        Property {
            name: "streaming"
            type: "bool"
            read: "streaming"
            notify: "streamingChanged"
            index: 11
            isReadonly: true
        }
        Property {
            name: "aspectRatio"
            type: "double"
            read: "aspectRatio"
            notify: "aspectRatioChanged"
            index: 12
            isReadonly: true
        }
        Property {
            name: "hfov"
            type: "double"
            read: "hfov"
            notify: "aspectRatioChanged"
            index: 13
            isReadonly: true
        }
        Property {
            name: "thermalAspectRatio"
            type: "double"
            read: "thermalAspectRatio"
            notify: "aspectRatioChanged"
            index: 14
            isReadonly: true
        }
        Property {
            name: "thermalHfov"
            type: "double"
            read: "thermalHfov"
            notify: "aspectRatioChanged"
            index: 15
            isReadonly: true
        }
        Property {
            name: "videoSize"
            type: "QSize"
            read: "videoSize"
            notify: "videoSizeChanged"
            index: 16
            isReadonly: true
        }
        Property {
            name: "imageFile"
            type: "QString"
            read: "imageFile"
            notify: "imageFileChanged"
            index: 17
            isReadonly: true
        }
        Property {
            name: "uvcVideoSourceID"
            type: "QString"
            read: "uvcVideoSourceID"
            notify: "uvcVideoSourceIDChanged"
            index: 18
            isReadonly: true
        }
        Signal { name: "aspectRatioChanged" }
        Signal { name: "autoStreamConfiguredChanged" }
        Signal { name: "decodingChanged" }
        Signal { name: "fullScreenChanged" }
        Signal { name: "hasVideoChanged" }
        Signal {
            name: "imageFileChanged"
            Parameter { name: "filename"; type: "QString" }
        }
        Signal { name: "isAutoStreamChanged" }
        Signal { name: "isStreamSourceChanged" }
        Signal { name: "isUvcChanged" }
        Signal { name: "recordingChanged" }
        Signal {
            name: "recordingStarted"
            Parameter { name: "filename"; type: "QString" }
        }
        Signal { name: "streamingChanged" }
        Signal { name: "uvcVideoSourceIDChanged" }
        Signal { name: "videoSizeChanged" }
        Method {
            name: "_communicationLostChanged"
            Parameter { name: "communicationLost"; type: "bool" }
        }
        Method {
            name: "_setActiveVehicle"
            Parameter { name: "vehicle"; type: "Vehicle"; isPointer: true }
        }
        Method { name: "_videoSourceChanged" }
        Method {
            name: "grabImage"
            Parameter { name: "imageFile"; type: "QString" }
        }
        Method { name: "grabImage"; isCloned: true }
        Method {
            name: "startRecording"
            Parameter { name: "videoFile"; type: "QString" }
        }
        Method { name: "startRecording"; isCloned: true }
        Method { name: "startVideo" }
        Method { name: "stopRecording" }
        Method { name: "stopVideo" }
    }
    Component {
        file: "VideoReceiver.h"
        name: "VideoReceiver"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/VideoReceiver 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Enum {
            name: "FILE_FORMAT"
            values: [
                "FILE_FORMAT_MIN",
                "FILE_FORMAT_MKV",
                "FILE_FORMAT_MOV",
                "FILE_FORMAT_MP4",
                "FILE_FORMAT_MAX"
            ]
        }
        Enum {
            name: "STATUS"
            values: [
                "STATUS_MIN",
                "STATUS_OK",
                "STATUS_FAIL",
                "STATUS_INVALID_STATE",
                "STATUS_INVALID_URL",
                "STATUS_NOT_IMPLEMENTED",
                "STATUS_MAX"
            ]
        }
        Signal { name: "timeout" }
        Signal {
            name: "streamingChanged"
            Parameter { name: "active"; type: "bool" }
        }
        Signal {
            name: "decodingChanged"
            Parameter { name: "active"; type: "bool" }
        }
        Signal {
            name: "recordingChanged"
            Parameter { name: "active"; type: "bool" }
        }
        Signal {
            name: "recordingStarted"
            Parameter { name: "filename"; type: "QString" }
        }
        Signal {
            name: "videoSizeChanged"
            Parameter { name: "size"; type: "QSize" }
        }
        Signal {
            name: "sinkChanged"
            Parameter { name: "sink"; type: "void"; isPointer: true }
        }
        Signal {
            name: "nameChanged"
            Parameter { name: "name"; type: "QString" }
        }
        Signal {
            name: "uriChanged"
            Parameter { name: "uri"; type: "QString" }
        }
        Signal {
            name: "startedChanged"
            Parameter { name: "started"; type: "bool" }
        }
        Signal {
            name: "lowLatencyChanged"
            Parameter { name: "lowLatency"; type: "bool" }
        }
        Signal { name: "videoStreamInfoChanged" }
        Signal {
            name: "widgetChanged"
            Parameter { name: "widget"; type: "QQuickItem"; isPointer: true }
        }
        Signal {
            name: "onStartComplete"
            Parameter { name: "status"; type: "STATUS" }
        }
        Signal {
            name: "onStopComplete"
            Parameter { name: "status"; type: "STATUS" }
        }
        Signal {
            name: "onStartDecodingComplete"
            Parameter { name: "status"; type: "STATUS" }
        }
        Signal {
            name: "onStopDecodingComplete"
            Parameter { name: "status"; type: "STATUS" }
        }
        Signal {
            name: "onStartRecordingComplete"
            Parameter { name: "status"; type: "STATUS" }
        }
        Signal {
            name: "onStopRecordingComplete"
            Parameter { name: "status"; type: "STATUS" }
        }
        Signal {
            name: "onTakeScreenshotComplete"
            Parameter { name: "status"; type: "STATUS" }
        }
        Method {
            name: "start"
            Parameter { name: "timeout"; type: "uint" }
        }
        Method { name: "stop" }
        Method {
            name: "startDecoding"
            Parameter { name: "sink"; type: "void"; isPointer: true }
        }
        Method { name: "stopDecoding" }
        Method {
            name: "startRecording"
            Parameter { name: "videoFile"; type: "QString" }
            Parameter { name: "format"; type: "FILE_FORMAT" }
        }
        Method { name: "stopRecording" }
        Method {
            name: "takeScreenshot"
            Parameter { name: "imageFile"; type: "QString" }
        }
    }
    Component {
        file: "VideoSettings.h"
        name: "VideoSettings"
        accessSemantics: "reference"
        prototype: "SettingsGroup"
        exports: ["QGC/VideoSettings 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "videoSource"
            type: "Fact"
            isPointer: true
            read: "videoSource"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "udpUrl"
            type: "Fact"
            isPointer: true
            read: "udpUrl"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "tcpUrl"
            type: "Fact"
            isPointer: true
            read: "tcpUrl"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "rtspUrl"
            type: "Fact"
            isPointer: true
            read: "rtspUrl"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "aspectRatio"
            type: "Fact"
            isPointer: true
            read: "aspectRatio"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "videoFit"
            type: "Fact"
            isPointer: true
            read: "videoFit"
            index: 5
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "gridLines"
            type: "Fact"
            isPointer: true
            read: "gridLines"
            index: 6
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "showRecControl"
            type: "Fact"
            isPointer: true
            read: "showRecControl"
            index: 7
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "recordingFormat"
            type: "Fact"
            isPointer: true
            read: "recordingFormat"
            index: 8
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "maxVideoSize"
            type: "Fact"
            isPointer: true
            read: "maxVideoSize"
            index: 9
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "enableStorageLimit"
            type: "Fact"
            isPointer: true
            read: "enableStorageLimit"
            index: 10
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "rtspTimeout"
            type: "Fact"
            isPointer: true
            read: "rtspTimeout"
            index: 11
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "streamEnabled"
            type: "Fact"
            isPointer: true
            read: "streamEnabled"
            index: 12
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "disableWhenDisarmed"
            type: "Fact"
            isPointer: true
            read: "disableWhenDisarmed"
            index: 13
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "lowLatencyMode"
            type: "Fact"
            isPointer: true
            read: "lowLatencyMode"
            index: 14
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "forceVideoDecoder"
            type: "Fact"
            isPointer: true
            read: "forceVideoDecoder"
            index: 15
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "streamConfigured"
            type: "bool"
            read: "streamConfigured"
            notify: "streamConfiguredChanged"
            index: 16
            isReadonly: true
        }
        Property {
            name: "rtspVideoSource"
            type: "QString"
            read: "rtspVideoSource"
            index: 17
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "udp264VideoSource"
            type: "QString"
            read: "udp264VideoSource"
            index: 18
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "udp265VideoSource"
            type: "QString"
            read: "udp265VideoSource"
            index: 19
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "tcpVideoSource"
            type: "QString"
            read: "tcpVideoSource"
            index: 20
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "mpegtsVideoSource"
            type: "QString"
            read: "mpegtsVideoSource"
            index: 21
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "disabledVideoSource"
            type: "QString"
            read: "disabledVideoSource"
            index: 22
            isReadonly: true
            isConstant: true
        }
        Signal {
            name: "streamConfiguredChanged"
            Parameter { name: "configured"; type: "bool" }
        }
        Method {
            name: "_configChanged"
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component {
        file: "Viewer3DManager.h"
        name: "Viewer3DManager"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/Viewer3DManager 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "osmParser"; type: "OsmParser"; isPointer: true; index: 0; isConstant: true }
        Property {
            name: "qmlBackend"
            type: "Viewer3DQmlBackend"
            isPointer: true
            index: 1
            isConstant: true
        }
    }
    Component {
        file: "Viewer3DQmlBackend.h"
        name: "Viewer3DQmlBackend"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/Viewer3DQmlBackend 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "gpsRef"
            type: "QGeoCoordinate"
            read: "gpsRef"
            notify: "gpsRefChanged"
            index: 0
            isReadonly: true
        }
        Signal { name: "gpsRefChanged" }
        Method {
            name: "_gpsRefChangedEvent"
            Parameter { name: "newGpsRef"; type: "QGeoCoordinate" }
            Parameter { name: "isRefSet"; type: "bool" }
        }
        Method {
            name: "_activeVehicleChangedEvent"
            Parameter { name: "vehicle"; type: "Vehicle"; isPointer: true }
        }
        Method {
            name: "_activeVehicleCoordinateChanged"
            Parameter { name: "newCoordinate"; type: "QGeoCoordinate" }
        }
    }
    Component {
        file: "Viewer3DSettings.h"
        name: "Viewer3DSettings"
        accessSemantics: "reference"
        prototype: "SettingsGroup"
        exports: ["QGC/Viewer3DSettings 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "enabled"
            type: "Fact"
            isPointer: true
            read: "enabled"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "osmFilePath"
            type: "Fact"
            isPointer: true
            read: "osmFilePath"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "buildingLevelHeight"
            type: "Fact"
            isPointer: true
            read: "buildingLevelHeight"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "altitudeBias"
            type: "Fact"
            isPointer: true
            read: "altitudeBias"
            index: 3
            isReadonly: true
            isConstant: true
        }
    }
    Component {
        file: "Viewer3DTerrainGeometry.h"
        name: "Viewer3DTerrainGeometry"
        accessSemantics: "reference"
        prototype: "QQuick3DGeometry"
        exports: ["QGC/Viewer3DTerrainGeometry 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "sectorCount"
            type: "int"
            read: "sectorCount"
            write: "setSectorCount"
            notify: "sectorCountChanged"
            index: 0
        }
        Property {
            name: "stackCount"
            type: "int"
            read: "stackCount"
            write: "setStackCount"
            notify: "stackCountChanged"
            index: 1
        }
        Property {
            name: "radius"
            type: "int"
            read: "radius"
            write: "setRadius"
            notify: "radiusChanged"
            index: 2
        }
        Property {
            name: "roiMin"
            type: "QGeoCoordinate"
            read: "roiMin"
            write: "setRoiMin"
            notify: "roiMinChanged"
            index: 3
        }
        Property {
            name: "roiMax"
            type: "QGeoCoordinate"
            read: "roiMax"
            write: "setRoiMax"
            notify: "roiMaxChanged"
            index: 4
        }
        Property {
            name: "refCoordinate"
            type: "QGeoCoordinate"
            read: "refCoordinate"
            write: "setRefCoordinate"
            notify: "refCoordinateChanged"
            index: 5
        }
        Signal { name: "sectorCountChanged" }
        Signal { name: "stackCountChanged" }
        Signal { name: "radiusChanged" }
        Signal { name: "roiMinChanged" }
        Signal { name: "roiMaxChanged" }
        Signal { name: "refCoordinateChanged" }
        Method { name: "updateEarthData" }
    }
    Component {
        file: "Viewer3DTerrainTexture.h"
        name: "Viewer3DTerrainTexture"
        accessSemantics: "reference"
        prototype: "QQuick3DTextureData"
        exports: ["QGC/Viewer3DTerrainTexture 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "osmParser"
            type: "OsmParser"
            isPointer: true
            read: "osmParser"
            write: "setOsmParser"
            notify: "osmParserChanged"
            index: 0
        }
        Property {
            name: "roiMinCoordinate"
            type: "QGeoCoordinate"
            read: "roiMinCoordinate"
            write: "setRoiMinCoordinate"
            notify: "roiMinCoordinateChanged"
            index: 1
        }
        Property {
            name: "roiMaxCoordinate"
            type: "QGeoCoordinate"
            read: "roiMaxCoordinate"
            write: "setRoiMaxCoordinate"
            notify: "roiMaxCoordinateChanged"
            index: 2
        }
        Property {
            name: "tileCount"
            type: "QSize"
            read: "tileCount"
            notify: "tileCountChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "textureLoaded"
            type: "bool"
            read: "textureLoaded"
            notify: "textureLoadedChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "textureGeometryDone"
            type: "bool"
            read: "textureGeometryDone"
            notify: "textureGeometryDoneChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "textureDownloadProgress"
            type: "float"
            read: "textureDownloadProgress"
            notify: "textureDownloadProgressChanged"
            index: 6
            isReadonly: true
        }
        Signal { name: "roiMinCoordinateChanged" }
        Signal { name: "roiMaxCoordinateChanged" }
        Signal { name: "textureLoadedChanged" }
        Signal { name: "osmParserChanged" }
        Signal { name: "tileCountChanged" }
        Signal { name: "textureGeometryDoneChanged" }
        Signal { name: "mapProviderIdChanged" }
        Signal { name: "textureDownloadProgressChanged" }
        Method { name: "loadTexture" }
    }
    Component {
        file: "VisualMissionItem.h"
        name: "VisualMissionItem"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QGC/VisualMissionItem 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Enum {
            name: "ReadyForSaveState"
            values: [
                "ReadyForSave",
                "NotReadyForSaveTerrain",
                "NotReadyForSaveData"
            ]
        }
        Property {
            name: "homePosition"
            type: "bool"
            read: "homePosition"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "coordinate"
            type: "QGeoCoordinate"
            read: "coordinate"
            write: "setCoordinate"
            notify: "coordinateChanged"
            index: 1
        }
        Property {
            name: "amslEntryAlt"
            type: "double"
            read: "amslEntryAlt"
            notify: "amslEntryAltChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "terrainAltitude"
            type: "double"
            read: "terrainAltitude"
            notify: "terrainAltitudeChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "exitCoordinate"
            type: "QGeoCoordinate"
            read: "exitCoordinate"
            notify: "exitCoordinateChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "amslExitAlt"
            type: "double"
            read: "amslExitAlt"
            notify: "amslExitAltChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "exitCoordinateSameAsEntry"
            type: "bool"
            read: "exitCoordinateSameAsEntry"
            notify: "exitCoordinateSameAsEntryChanged"
            index: 6
            isReadonly: true
        }
        Property {
            name: "commandDescription"
            type: "QString"
            read: "commandDescription"
            notify: "commandDescriptionChanged"
            index: 7
            isReadonly: true
        }
        Property {
            name: "commandName"
            type: "QString"
            read: "commandName"
            notify: "commandNameChanged"
            index: 8
            isReadonly: true
        }
        Property {
            name: "abbreviation"
            type: "QString"
            read: "abbreviation"
            notify: "abbreviationChanged"
            index: 9
            isReadonly: true
        }
        Property {
            name: "dirty"
            type: "bool"
            read: "dirty"
            write: "setDirty"
            notify: "dirtyChanged"
            index: 10
        }
        Property {
            name: "isCurrentItem"
            type: "bool"
            read: "isCurrentItem"
            write: "setIsCurrentItem"
            notify: "isCurrentItemChanged"
            index: 11
        }
        Property {
            name: "hasCurrentChildItem"
            type: "bool"
            read: "hasCurrentChildItem"
            write: "setHasCurrentChildItem"
            notify: "hasCurrentChildItemChanged"
            index: 12
        }
        Property {
            name: "sequenceNumber"
            type: "int"
            read: "sequenceNumber"
            write: "setSequenceNumber"
            notify: "sequenceNumberChanged"
            index: 13
        }
        Property {
            name: "lastSequenceNumber"
            type: "int"
            read: "lastSequenceNumber"
            notify: "lastSequenceNumberChanged"
            index: 14
            isReadonly: true
        }
        Property {
            name: "specifiesCoordinate"
            type: "bool"
            read: "specifiesCoordinate"
            notify: "specifiesCoordinateChanged"
            index: 15
            isReadonly: true
        }
        Property {
            name: "isStandaloneCoordinate"
            type: "bool"
            read: "isStandaloneCoordinate"
            notify: "isStandaloneCoordinateChanged"
            index: 16
            isReadonly: true
        }
        Property {
            name: "specifiesAltitudeOnly"
            type: "bool"
            read: "specifiesAltitudeOnly"
            notify: "specifiesAltitudeOnlyChanged"
            index: 17
            isReadonly: true
        }
        Property {
            name: "isSimpleItem"
            type: "bool"
            read: "isSimpleItem"
            notify: "isSimpleItemChanged"
            index: 18
            isReadonly: true
        }
        Property {
            name: "isTakeoffItem"
            type: "bool"
            read: "isTakeoffItem"
            notify: "isTakeoffItemChanged"
            index: 19
            isReadonly: true
        }
        Property {
            name: "isLandCommand"
            type: "bool"
            read: "isLandCommand"
            notify: "isLandCommandChanged"
            index: 20
            isReadonly: true
        }
        Property { name: "isSurveyItem"; type: "bool"; read: "isSurveyItem"; index: 21; isReadonly: true }
        Property { name: "editorQml"; type: "QString"; index: 22; isConstant: true }
        Property {
            name: "mapVisualQML"
            type: "QString"
            read: "mapVisualQML"
            index: 23
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "specifiedFlightSpeed"
            type: "double"
            read: "specifiedFlightSpeed"
            notify: "specifiedFlightSpeedChanged"
            index: 24
            isReadonly: true
        }
        Property {
            name: "specifiedGimbalYaw"
            type: "double"
            read: "specifiedGimbalYaw"
            notify: "specifiedGimbalYawChanged"
            index: 25
            isReadonly: true
        }
        Property {
            name: "specifiedGimbalPitch"
            type: "double"
            read: "specifiedGimbalPitch"
            notify: "specifiedGimbalPitchChanged"
            index: 26
            isReadonly: true
        }
        Property {
            name: "specifiedVehicleYaw"
            type: "double"
            read: "specifiedVehicleYaw"
            notify: "specifiedVehicleYawChanged"
            index: 27
            isReadonly: true
        }
        Property {
            name: "missionGimbalYaw"
            type: "double"
            read: "missionGimbalYaw"
            notify: "missionGimbalYawChanged"
            index: 28
            isReadonly: true
        }
        Property {
            name: "missionVehicleYaw"
            type: "double"
            read: "missionVehicleYaw"
            notify: "missionVehicleYawChanged"
            index: 29
            isReadonly: true
        }
        Property {
            name: "flyView"
            type: "bool"
            read: "flyView"
            index: 30
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "wizardMode"
            type: "bool"
            read: "wizardMode"
            write: "setWizardMode"
            notify: "wizardModeChanged"
            index: 31
        }
        Property { name: "previousVTOLMode"; type: "int"; notify: "previousVTOLModeChanged"; index: 32 }
        Property {
            name: "masterController"
            type: "PlanMasterController"
            isPointer: true
            read: "masterController"
            index: 33
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "readyForSaveState"
            type: "ReadyForSaveState"
            read: "readyForSaveState"
            notify: "readyForSaveStateChanged"
            index: 34
            isReadonly: true
        }
        Property {
            name: "parentItem"
            type: "VisualMissionItem"
            isPointer: true
            read: "parentItem"
            write: "setParentItem"
            notify: "parentItemChanged"
            index: 35
        }
        Property {
            name: "childItems"
            type: "QmlObjectListModel"
            isPointer: true
            read: "childItems"
            index: 36
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "boundingCube"
            type: "QGCGeoBoundingCube"
            isPointer: true
            read: "boundingCube"
            notify: "boundingCubeChanged"
            index: 37
            isReadonly: true
        }
        Property {
            name: "altDifference"
            type: "double"
            read: "altDifference"
            write: "setAltDifference"
            notify: "altDifferenceChanged"
            index: 38
        }
        Property {
            name: "altPercent"
            type: "double"
            read: "altPercent"
            write: "setAltPercent"
            notify: "altPercentChanged"
            index: 39
        }
        Property {
            name: "terrainPercent"
            type: "double"
            read: "terrainPercent"
            write: "setTerrainPercent"
            notify: "terrainPercentChanged"
            index: 40
        }
        Property {
            name: "terrainCollision"
            type: "bool"
            read: "terrainCollision"
            write: "setTerrainCollision"
            notify: "terrainCollisionChanged"
            index: 41
        }
        Property {
            name: "azimuth"
            type: "double"
            read: "azimuth"
            write: "setAzimuth"
            notify: "azimuthChanged"
            index: 42
        }
        Property {
            name: "distance"
            type: "double"
            read: "distance"
            write: "setDistance"
            notify: "distanceChanged"
            index: 43
        }
        Property {
            name: "distanceFromStart"
            type: "double"
            read: "distanceFromStart"
            write: "setDistanceFromStart"
            notify: "distanceFromStartChanged"
            index: 44
        }
        Signal {
            name: "altDifferenceChanged"
            Parameter { name: "altDifference"; type: "double" }
        }
        Signal {
            name: "altPercentChanged"
            Parameter { name: "altPercent"; type: "double" }
        }
        Signal {
            name: "terrainPercentChanged"
            Parameter { name: "terrainPercent"; type: "double" }
        }
        Signal {
            name: "terrainCollisionChanged"
            Parameter { name: "terrainCollision"; type: "bool" }
        }
        Signal {
            name: "azimuthChanged"
            Parameter { name: "azimuth"; type: "double" }
        }
        Signal { name: "commandDescriptionChanged" }
        Signal { name: "commandNameChanged" }
        Signal { name: "abbreviationChanged" }
        Signal {
            name: "coordinateChanged"
            Parameter { name: "coordinate"; type: "QGeoCoordinate" }
        }
        Signal {
            name: "exitCoordinateChanged"
            Parameter { name: "exitCoordinate"; type: "QGeoCoordinate" }
        }
        Signal {
            name: "dirtyChanged"
            Parameter { name: "dirty"; type: "bool" }
        }
        Signal {
            name: "distanceChanged"
            Parameter { name: "distance"; type: "double" }
        }
        Signal {
            name: "distanceFromStartChanged"
            Parameter { name: "distanceFromStart"; type: "double" }
        }
        Signal {
            name: "isCurrentItemChanged"
            Parameter { name: "isCurrentItem"; type: "bool" }
        }
        Signal {
            name: "hasCurrentChildItemChanged"
            Parameter { name: "hasCurrentChildItem"; type: "bool" }
        }
        Signal {
            name: "sequenceNumberChanged"
            Parameter { name: "sequenceNumber"; type: "int" }
        }
        Signal {
            name: "isSimpleItemChanged"
            Parameter { name: "isSimpleItem"; type: "bool" }
        }
        Signal {
            name: "isTakeoffItemChanged"
            Parameter { name: "isTakeoffItem"; type: "bool" }
        }
        Signal { name: "isLandCommandChanged" }
        Signal { name: "specifiesCoordinateChanged" }
        Signal { name: "isStandaloneCoordinateChanged" }
        Signal { name: "specifiesAltitudeOnlyChanged" }
        Signal { name: "specifiedFlightSpeedChanged" }
        Signal { name: "specifiedGimbalYawChanged" }
        Signal { name: "specifiedGimbalPitchChanged" }
        Signal { name: "specifiedVehicleYawChanged" }
        Signal {
            name: "lastSequenceNumberChanged"
            Parameter { name: "sequenceNumber"; type: "int" }
        }
        Signal {
            name: "missionGimbalYawChanged"
            Parameter { name: "missionGimbalYaw"; type: "double" }
        }
        Signal {
            name: "missionVehicleYawChanged"
            Parameter { name: "missionVehicleYaw"; type: "double" }
        }
        Signal {
            name: "terrainAltitudeChanged"
            Parameter { name: "terrainAltitude"; type: "double" }
        }
        Signal { name: "additionalTimeDelayChanged" }
        Signal { name: "boundingCubeChanged" }
        Signal { name: "readyForSaveStateChanged" }
        Signal {
            name: "wizardModeChanged"
            Parameter { name: "wizardMode"; type: "bool" }
        }
        Signal {
            name: "parentItemChanged"
            Parameter { name: "parentItem"; type: "VisualMissionItem"; isPointer: true }
        }
        Signal {
            name: "amslEntryAltChanged"
            Parameter { name: "alt"; type: "double" }
        }
        Signal {
            name: "amslExitAltChanged"
            Parameter { name: "alt"; type: "double" }
        }
        Signal { name: "previousVTOLModeChanged" }
        Signal { name: "currentVTOLModeChanged" }
        Signal {
            name: "exitCoordinateSameAsEntryChanged"
            Parameter { name: "exitCoordinateSameAsEntry"; type: "bool" }
        }
        Method { name: "_amslEntryAltChanged" }
        Method { name: "_amslExitAltChanged" }
        Method { name: "_updateTerrainAltitude" }
        Method { name: "_reallyUpdateTerrainAltitude" }
        Method {
            name: "_terrainDataReceived"
            Parameter { name: "success"; type: "bool" }
            Parameter { name: "heights"; type: "double"; isList: true }
        }
    }
}
